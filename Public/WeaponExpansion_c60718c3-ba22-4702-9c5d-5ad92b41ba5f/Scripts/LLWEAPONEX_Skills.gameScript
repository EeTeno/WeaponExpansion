INIT

EVENTS

//REGION EXPLODING
EVENT LLWEAPONEX_Blunderbuss_Cannonball_Explode
VARS
	CHARACTER:_Char
	FLOAT3:_Target
	FLOAT3:_Pos
	FLOAT:_LevelF
	INT:_Level
	STRING:_Str
ON
	//OnSkillCast(_Char, Zone_LLWEAPONEX_Blunderbuss_Cannonball)
	OnCharacterEvent(_Char, "LLWEAPONEX_Blunderbuss_Cannonball_Explode")
ACTIONS
IF "c1"
	CharacterGetStat(_LevelF, _Char, Level)
THEN
	Cast(_Level, _LevelF)
ELSE
	Set(_Level, 1)
ENDIF
	GetForwardDirection(_Char, _Target)
IF "c1&!c2"
	GetPosition(_Char, _Pos)
	IsEqual(_Target, null)
THEN
	Multiply(_Target, FLOAT:13.5) // 13m range on skill, explosion needs to be at end
	Add(_Target, _Pos)
	ExplodeAt(_Target, Projectile_LLWEAPONEX_Blunderbuss_Cannonball_Explode, _Level, _Char)
	//DisplayCombatInfoText(_Char, "Exploding?", 3.0)
	//Print(_Str, "[LLWEAPONEX:Skills.gameScript:Cannonball] Exploding at position [1]. Player's pos: [2]", _Target, _Pos)
	//SetVar(_Char, "LeaderLog_Type", STRING:"Debug")
	//SetVar(_Char, "LeaderLog_Message", _Str)
	//CharacterEvent(_Char, "LeaderLog_Commands_Log")
ENDIF

EVENT LLWEAPONEX_ArmCannon_Disperse_Explode
VARS
	CHARACTER:_Char
	FLOAT3:_Target
	FLOAT3:_Pos
	FLOAT:_LevelF
	INT:_Level
	STRING:_Str
ON
	OnCharacterEvent(_Char, "LLWEAPONEX_ArmCannon_Disperse_Explode")
ACTIONS
IF "c1"
	CharacterGetStat(_LevelF, _Char, Level)
THEN
	Cast(_Level, _LevelF)
ELSE
	Set(_Level, 1)
ENDIF
	GetForwardDirection(_Char, _Target)
IF "c1&!c2"
	GetPosition(_Char, _Pos)
	IsEqual(_Target, null)
THEN
	Multiply(_Target, FLOAT:11.5) // 11m range on skill, explosion needs to be at end
	Add(_Target, _Pos)
	ExplodeAt(_Target, Projectile_LLWEAPONEX_ArmCannon_Disperse_Explosion, _Level, _Char)
ENDIF

EVENT LLWEAPONEX_AnvilMace_RushSmash_Explode
VARS
	CHARACTER:_Char
	FLOAT3:_Target
	FLOAT3:_Pos
	FLOAT:_LevelF
	INT:_Level
ON
	OnCharacterEvent(_Char, "LLWEAPONEX_AnvilMace_RushSmash_Explode")
ACTIONS
	Set(_Level, 1)
IF "c1"
	CharacterGetStat(_LevelF, _Char, Level)
THEN
	Cast(_Level, _LevelF)
ENDIF
	GetForwardDirection(_Char, _Target)
IF "c1&!c2"
	GetPosition(_Char, _Pos)
	IsEqual(_Target, null)
THEN
	Multiply(_Target, FLOAT:2.0) // Weapon range
	Add(_Target, _Pos)
	ExplodeAt(_Target, Projectile_LLWEAPONEX_AnvilMace_RushSmash_GroundImpact, _Level, _Char)
ENDIF

//END_REGION

EVENT LLWEAPONEX_Rapiers_FlickerStrike_Damage
VARS
	CHARACTER:_Source
	CHARACTER:_Target
	FLOAT:_LevelF
	INT:_Level
	FLOAT3:_Position
ON
	OnCharacterCharacterEvent(_Source, _Target, "LLWEAPONEX_FlickerStrike_FireBonusHit")
ACTIONS
	Set(_Level, 1)
IF "c1"
	CharacterGetStat(_LevelF, _Source, Level)
THEN
	Cast(_Level, _LevelF)
ENDIF
	CharacterPlayEffect(_Source, "RS3_FX_Skills_Warrior_BlinkStrike_Cast_01")
	CharacterPlayEffect(_Target, "RS3_FX_Skills_Warrior_BlinkStrike_Impact_01")
	//ExplodeAt(_Target, Projectile_LLWEAPONEX_Rapier_FlickerStrike_FrenzyBonus, _Level, _Source)
	CharacterApplyStatus(_Target, LLWEAPONEX_RAPIER_FLICKER_HIT_PROC, 0, 0, _Source)

EVENT LLWEAPONEX_DualShields_ShieldCover_CounterAttack
VARS
	CHARACTER:_Blocker
	CHARACTER:_Attacker
	CHARACTER:_BlockingTarget
	FLOAT3:_Direction
	FLOAT:_Dist
	FLOAT3:_TeleportSpot
	FLOAT3:_ValidPos
ON
	OnCharacterCharacterEvent(_Blocker, _Attacker, "LLWEAPONEX_ShieldCover_CounterAttack_Teleport")
ACTIONS
IF "c1&!c2"
	GetVar(_BlockingTarget, _Blocker, "LLWEAPONEX_ShieldCover_Covering")
	IsEqual(_BlockingTarget, null)
THEN
	GetDirection(_Attacker, _BlockingTarget, _Direction, _Dist)
ELSE
	GetForwardDirection(_Attacker, _Direction)
ENDIF
	GetPosition(_Attacker, _TeleportSpot)
	Add(_TeleportSpot, _Direction)
	Multiply(_TeleportSpot, 1.5)
	IF "c1&c2"
		FindPosition(_ValidPos,_Blocker,1,0,0,12.0,0,_Blocker,-1,-1,-1,-1,null,0,_TeleportSpot)
		FindValidPosition(_ValidPos, 12, _Blocker)
	THEN
		SetVar(_Blocker, "LLWEAPONEX_ShieldCover_TeleportPos", _ValidPos)
		CharacterCharacterEvent(_Blocker, _Attacker, "LLWEAPONEX_ShieldCover_CounterAttack_UseSkill")
	ELSE
		CharacterCharacterEvent(_Blocker, _Attacker, "LLWEAPONEX_ShieldCover_CounterAttack_UseSkill_NoPositionFound")
	ENDIF

EVENT LLWEAPONEX_ForceLaunch_Start
VARS
	CHARACTER:_Target
	ITEM:_TargetItem
	CHARACTER:_Source
	INT:_ForceIndex
	SKILL:_ForceSkill
ON
	OnCharacterCharacterEvent(_Source, _Target, "LLWEAPONEX_Force_StartLaunch")
	OnCharacterItemEvent(_Source, _TargetItem, "LLWEAPONEX_Force_StartLaunch")
ACTIONS
	Set(_ForceIndex, 0)
	Set(_ForceSkill, Projectile_LeaderLib_Force1)
IF "c1"
	GetVar(_ForceIndex, _Source, "LLWEAPONEX_Force_ForceIndex")
THEN
ENDIF
IF "c1"
	IsEqual(_ForceIndex, 0)
THEN
	Set(_ForceSkill, Projectile_LeaderLib_Force1)
ELIF "c1"
	IsEqual(_ForceIndex, 2)
THEN
	Set(_ForceSkill, Projectile_LeaderLib_Force2)
ELIF "c1"
	IsEqual(_ForceIndex, 3)
THEN
	Set(_ForceSkill, Projectile_LeaderLib_Force3)
ELIF "c1"
	IsEqual(_ForceIndex, 3)
THEN
	Set(_ForceSkill, Projectile_LeaderLib_Force7)
ELIF "c1"
	IsEqual(_ForceIndex, 4)
THEN
	Set(_ForceSkill, Projectile_LeaderLib_Force8)
ELIF "c1"
	IsEqual(_ForceIndex, 5)
THEN
	Set(_ForceSkill, Projectile_LeaderLib_Force9)
ELIF "c1"
	IsEqual(_ForceIndex, 6)
THEN
	Set(_ForceSkill, Projectile_LeaderLib_Force10)
ELIF "c1"
	IsEqual(_ForceIndex, 7)
THEN
	Set(_ForceSkill, Projectile_LeaderLib_Force11)
ELIF "c1"
	IsEqual(_ForceIndex, 8)
THEN
	Set(_ForceSkill, Projectile_LeaderLib_Force12)
ENDIF
	ShootLocalProjectileAt(_ForceSkill, _Source, FLOAT3:{0;3.0;0}, _Target, 1, _Source)

EVENT LLWEAPONEX_Throwing_CheckCanThrow_Char
VARS
    CHARACTER:_Source
	CHARACTER:_Target
	FLOAT:_Weight
	INT:_BaseWeightInt
	FLOAT:_BaseWeight
	FLOAT:_Strength
	FLOAT:_MaxStrengthWeight
	STRING:_Str
ON
    OnCharacterCharacterEvent(_Source, _Target, "LLWEAPONEX_ThrowObject_CheckStrengthWeight")
ACTIONS
	Set(_Weight, 0.0)
	Set(_Strength, 0.0)
	IF "c1&c2"
		CharacterGetStat(_Weight, _Target, Weight)
		CharacterGetStat(_Strength, _Source, Strength)
	THEN
	ENDIF

	IF "c1&c2"
		HasGlobalFlag("LeaderLib_ExtenderIsActive")
		GetVar(_BaseWeightInt, _Target, "LLWEAPONEX_BaseWeight")
	THEN
		Cast(_BaseWeight, _BaseWeightInt)
	ELSE
		Set(_BaseWeight, 50000.0)
	ENDIF

	//Base Weight is 50,000, 1,000 weight == 1 weight unit in-game
	//20 STR == 200 max units == 200,000 max weight
	IF "c1&(c2|c3)"
		IsGreaterThen(_Weight, 0.0)
		IsGreaterThen(_Weight, _BaseWeight)
		IsEqual(_Weight, _BaseWeight)
	THEN
		Subtract(_Weight, _BaseWeight)
	ENDIF

	IF "c1|!c2|c3|c4"
		IsGreaterThen(_Strength, 40)
		IsGreaterThen(_Weight, 0.0)
		IsTagged(_Source, "LLWEAPONEX_ThrowingAbility_Mastery4")
		HasGlobalFlag("WeaponExpansion_Settings_ThrowObject_NoLimit")
	THEN
		CharacterCharacterEvent(_Source, _Target, "LLWEAPONEX_ThrowObject_CanThrowObject")
	ELSE
		/*
			1 Str = +10 additional carry weight, +7.5 object movement weight
			CarryWeightBase = 0
			CarryWeightPerStr = 10000
			MoveToCarryWeightRatio = 0.75
		*/

		Set(_MaxStrengthWeight, _Strength)
		Multiply(_MaxStrengthWeight, 10000)
		
		IF "c1|c2"
			IsGreaterThen(_MaxStrengthWeight, _Weight)
			IsEqual(_MaxStrengthWeight, _Weight)
		THEN
			CharacterCharacterEvent(_Source, _Target, "LLWEAPONEX_ThrowObject_CanThrowObject")
		ELSE
			StatusText(_Source, "LLWEAPONEX_StatusText_ThrowObjectFailed")
			CharacterPlayEffect(_Target, "LLWEAPONEX_FX_Status_ThrowObject_Failed_01")
			CharacterAddActionPoints(_Source, 1)
		ENDIF
	ENDIF
	
	/*
	Print(_Str, "[LLWEAPONEX:Throwing:TossObject:Landed] Target weight is ([1]), Strength is ([2]).", _Weight, _Strength)
	SetVar(_Source, "LeaderLog_Message", _Str)
	CharacterEvent(_Source, "LeaderLog_Commands_Log")
	*/
	

EVENT LLWEAPONEX_Throwing_CheckCanThrow_Item
VARS
    CHARACTER:_Source
	ITEM:_Target
	FLOAT:_Weight
	INT:_BaseWeightInt
	FLOAT:_BaseWeight
	FLOAT:_Strength
	FLOAT:_MaxStrengthWeight
ON
    OnCharacterItemEvent(_Source, _Target, "LLWEAPONEX_ThrowObject_CheckStrengthWeight")
ACTIONS
	Set(_Weight, 0.0)
	Set(_Strength, 0.0)
	IF "c1&c2"
		ItemGetStat(_Weight, _Target, Weight)
		CharacterGetStat(_Strength, _Source, Strength)
	THEN
	ENDIF

	IF "c1|!c2|c3|c4"
		IsGreaterThen(_Strength, 40)
		IsGreaterThen(_Weight, 0.0)
		IsTagged(_Source, "LLWEAPONEX_ThrowingAbility_Mastery4")
		HasGlobalFlag("WeaponExpansion_Settings_ThrowObject_NoLimit")
	THEN
		CharacterItemEvent(_Source, _Target, "LLWEAPONEX_ThrowObject_CanThrowObject")
	ELSE
		Set(_MaxStrengthWeight, _Strength)
		Multiply(_MaxStrengthWeight, 10000)
		
		IF "c1|c2"
			IsGreaterThen(_MaxStrengthWeight, _Weight)
			IsEqual(_MaxStrengthWeight, _Weight)
		THEN
			CharacterItemEvent(_Source, _Target, "LLWEAPONEX_ThrowObject_CanThrowObject")
		ELSE
			ItemPlayEffect(_Target, "LLWEAPONEX_FX_Status_ThrowObject_Failed_01")
			StatusText(_Source, "LLWEAPONEX_StatusText_ThrowObjectFailed")
			CharacterAddActionPoints(_Source, 1)
		ENDIF
	ENDIF

EVENT LLWEAPONEX_Throwing_TossLanded_Char
VARS
    CHARACTER:_Source
	CHARACTER:_TargetChar
	FLOAT:_Weight
	FLOAT:_RandomWeight
	SKILL:_TossSkill
	FLOAT:_LevelF
	INT:_Level	
	STRING:_Str
ON
    OnCharacterCharacterEvent(_Source, _TargetChar, "LLWEAPONEX_Throwing_TossObject_Landed")
ACTIONS
	Set(_Weight, 0.0)
	Set(_LevelF, 1.0)
	IF "c1&c2"
		CharacterGetStat(_Weight, _TargetChar, Weight)
		CharacterGetStat(_LevelF, _Source, Level)
	THEN
	ENDIF

	//Base Weight is 50,000, 1,000 weight == 1 weight unit in-game
	//20 STR = 200 max units == 200,000 max weight
	IF "c1"
		IsGreaterThen(_Weight, 0.0)
	THEN
		Divide(_Weight, 1000.0)
		IF "c1|c2"
			IsGreaterThen(_Weight, 50.0)
			IsEqual(_Weight, 50.0)
		THEN
			Subtract(_Weight, 50.0)
		ENDIF
	ENDIF

	IF "!c1&(c2|c3)"
		CharacterIsPlayer(_TargetChar)
		IsLessThen(_Weight, 1.0)
		IsEqual(_Weight, 0.0)
	THEN
		Add(_Weight, _RandomWeight)
	ENDIF

	Cast(_Level, _LevelF)
	IF "c1"
		IsGreaterThen(_Weight, 249.0)
	THEN
		Set(_TossSkill, Projectile_LLWEAPONEX_Status_Tossed_Damage_Heavy)
	ELIF "c1"
		IsGreaterThen(_Weight, 100.0)
	THEN
		Set(_TossSkill, Projectile_LLWEAPONEX_Status_Tossed_Damage_Medium)
	ELSE
		Set(_TossSkill, Projectile_LLWEAPONEX_Status_Tossed_Damage_Light)
	ENDIF

	ExplodeAt(_TargetChar, _TossSkill, _Level, _Source)

	/*
	Print(_Str, "[LLWEAPONEX:Throwing:TossObject:Landed] Character weight is ([1]), exploding skill is ([2]).", _Weight, _TossSkill)
	SetVar(_Source, "LeaderLog_Message", _Str)
	CharacterEvent(_Source, "LeaderLog_Commands_Log")
	*/

EVENT LLWEAPONEX_Throwing_TossLanded_Item
VARS
    CHARACTER:_Source
	ITEM:_TargetItem
	FLOAT:_Weight
	SKILL:_TossSkill
	FLOAT:_LevelF
	INT:_Level
	STRING:_Str
ON
    OnCharacterItemEvent(_Source, _TargetItem, "LLWEAPONEX_Throwing_TossObject_Landed")
ACTIONS
	Set(_Weight, 0.0)
	Set(_LevelF, 1.0)
	IF "c1&c2"
		ItemGetStat(_Weight, _TargetItem, Weight)
		CharacterGetStat(_LevelF, _Source, Level)
	THEN
	ENDIF

	Cast(_Level, _LevelF)

	/* Default Weights
	Book				500.0
	Crate				10000.0
	Steel Chest			10000.0
	Chest				50000.0
	Water Barrel		60000.0
	DeathFog Barrel		95000.0
	Strong Chest		100000.0
	Metal Crate			150000.0
	DeathFog Crate		200000.0
	*/

	IF "c1"
		IsGreaterThen(_Weight, 149000.0)
	THEN
		Set(_TossSkill, Projectile_LLWEAPONEX_Status_Tossed_Damage_Heavy)
	ELIF "c1"
		IsGreaterThen(_Weight, 59000.0)
	THEN
		Set(_TossSkill, Projectile_LLWEAPONEX_Status_Tossed_Damage_Medium)
	ELSE
		Set(_TossSkill, Projectile_LLWEAPONEX_Status_Tossed_Damage_Light)
	ENDIF

	ExplodeAt(_TargetItem, _TossSkill, _Level, _Source)

	/*
	Print(_Str, "[LLWEAPONEX:Throwing:TossObject:Landed] Item weight is ([1]), exploding skill is ([2]).", _Weight, _TossSkill)
	SetVar(_Source, "LeaderLog_Message", _Str)
	CharacterEvent(_Source, "LeaderLog_Commands_Log")
	*/
	
EVENT LLWEAPONEX_Skill_SlayHidden_TrailRibbon
VARS
	CHARACTER:_Char
	FLOAT3:_StartPos
	STRING:_Str
	FLOAT:_y
ON
	OnCharacterEvent(_Char, "LLWEAPONEX_SlayHidden_Teleported")
ACTIONS
IF "c1&c2"
	GetVar(_StartPos, _Char, "LLWEAPONEX_SlayHidden_StartPosition")
	GetY(_StartPos, _y)
THEN
	Add(_y, 3.0)
	SetY(_StartPos, _y)
	ShootWorldProjectileAt(Projectile_LLWEAPONEX_Effect_TrailRibbon_Red, _Char, _StartPos, _Char, 1)
ENDIF
	/*
	Print(_Str, "[LLWEAPONEX:SlayHidden:TrailRibbon] Shooting projectile to [1]", _StartPos)
	SetVar(_Char, "LeaderLog_Message", _Str)
	CharacterEvent(_Char, "LeaderLog_Commands_Log")
	*/

EVENT LLWEAPONEX_Daggers_ThrowingKnife_ProcBonus
VARS
	CHARACTER:_Char
	FLOAT3:_Target
	FLOAT:_LevelF
	INT:_Level
	SKILL:_Skill
ON
	OnCharacterEvent(_Char, "LLWEAPONEX_Daggers_ThrowingKnife_ProcBonus")
ACTIONS
	Set(_Level, 1)
IF "c1&c2"
	CharacterGetStat(_LevelF, _Char, Level)
	GetVar(_Target, _Char, "LLWEAPONEX_ThrowingKnife_ExplodePosition")
THEN
	GetRandom(_Skill, Projectile_LLWEAPONEX_DaggerMastery_ThrowingKnife_Poison, Projectile_LLWEAPONEX_DaggerMastery_ThrowingKnife_Explosive)
	Cast(_Level, _LevelF)
	ExplodeAt(_Target, _Skill, _Level, _Char)
ENDIF

EVENT LLWEAPONEX_Pistols_ShootProjectile_Debug
VARS
	CHARACTER:_Char
	CHARACTER:_Target
	FLOAT:_CharBounda
	FLOAT:_TargetBounda
	STRING:_Str
	FIXEDSTRING:_StrF
ON
	OnCharacterCharacterEvent(_Char, _Target, "LLWEAPONEX_Pistols_TraceBounds")
ACTIONS
IF "c1&c2"
	GetAIBounds(_Char, _CharBounda)
	GetAIBounds(_Target, _TargetBounda)
THEN
	Print(_Str, "Bounds: Me:([1]) Target:([2])", _CharBounda, _TargetBounda)
	Output("Bounds: Me:([1]) Target:([2])", _CharBounda, _TargetBounda)
	Cast(_StrF, _Str)
	StatusText(_Char, _StrF)
ENDIF

EVENT LLWEAPONEX_Pistols_ShootProjectile
VARS
	CHARACTER:_Char
	CHARACTER:_Dummy
	FLOAT3:_Target
	SKILL:_Skill
	FLOAT3:_Dir
	FLOAT:_Dist
	FLOAT3:_SourcePos
	FLOAT:_LevelF
	INT:_Level
	FLOAT:_y
	FLOAT:_SourceY
ON
	//OnCharacterEvent(_Char, "LLWEAPONEX_Pistols_ShootProjectile")
	OnCharacterCharacterEvent(_Char, _Dummy, "LLWEAPONEX_Pistols_ShootProjectile")
ACTIONS
	Set(_Level, 1)
IF "c1&c2&c3"
	CharacterGetStat(_LevelF, _Char, Level)
	GetVar(_Target, _Char, "LLWEAPONEX_Pistols_ShootProjectileTarget")
	GetVar(_Skill, _Char, "LLWEAPONEX_Pistols_ShootProjectileSkill")
THEN
	IF "!c1"
		HasFlag(_Char, "LLWEAPONEX_Pistols_ManualTarget")
	THEN
		IF "c1&c2&c3"
			GetPosition(_Char, _SourcePos)
			GetY(_SourcePos, _SourceY)
			GetY(_Target, _y)
		THEN
			Output("Pistol Target 1: [1] | SourcePos: [2]", _Target, _SourcePos)
			Subtract(_y, _SourceY)
			Abs(_y)
			Output("Pistol HeightDiff: [1]", _y)
			IF "!c1&c2"
				IsGreaterThen(_y, 1.0)
				GetY(_Target, _y)
			THEN
				GetForwardDirection(_Char, _Dir)
				Set(_Dist, 15.0)
				Multiply(_Dir, _Dist)
				Add(_Target, _Dir)
			ELIF "c1"
				GetY(_Target, _y)
			THEN
			ENDIF
			Add(_y, 0.5)
			SetY(_Target, _y)
			Output("Pistol Target Final: [1] | SourcePos: [2]", _Target, _SourcePos)
		ENDIF
	ELIF "c1"
		GetY(_Target, _y)
	THEN
		Add(_y, 0.5)
		SetY(_Target, _y)
		// Use the projectile's saved position since the target could be a short frog.
	ENDIF
	ClearFlag(_Char, "LLWEAPONEX_Pistols_ManualTarget")
	Cast(_Level, _LevelF)
	ShootLocalProjectileAt(_Skill, _Char, {0;1.0;0}, _Target, _Level, _Dummy)
	/*
	IF "!c1"
		HasGlobalFlag("LeaderLib_ExtenderIsActive")
	THEN
		ShootLocalProjectileAt(_Skill, _Char, {0;1.0;0}, _Target, _Level, _Char)
	ELSE
		StatusText(_Char, "Using Extender")
		SetVar(_Char, "LLWEAPONEX_Pistols_ShootProjectileTarget", _Target)
		CharacterEvent(_Char, "LLWEAPONEX_Pistols_Ext_Shoot")
	ENDIF
	*/
	//ShootLocalProjectileAt(Projectile_LLWEAPONEX_Pistol_A_Shoot_LeftHand, CHARACTER:S_Lizards_Hero_Male_004_3c81d65a-fc10-4785-aa2c-dc215fa7313f, {0;1.0;0}, _Target, _Level)
	//ShootLocalProjectileAt(Projectile_LLWEAPONEX_Pistol_A_Shoot_LeftHand, _Char, {0;1.0;0}, _Target, _Level, CHARACTER:S_Lizards_Hero_Male_004_3c81d65a-fc10-4785-aa2c-dc215fa7313f)
	//ShootWorldProjectileAt(_Skill, CHARACTER:S_Lizards_Hero_Male_004_3c81d65a-fc10-4785-aa2c-dc215fa7313f, _SourcePos, _Target, _Level)
	//ShootLocalProjectile(_Skill, _Char, {0;1.0;0}, _Dir, _Level, _Char)
	//ShootLocalProjectileAt(Projectile_SkyShot, _Char, {0;1.0;0}, _Target, _Level, _Char)
ENDIF
