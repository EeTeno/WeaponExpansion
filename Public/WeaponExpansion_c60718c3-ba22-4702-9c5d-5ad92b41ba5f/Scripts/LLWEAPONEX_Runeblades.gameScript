INIT
	INT:%LLWEAPONEX_Runeblade_Air_Chance = 10
	INT:%LLWEAPONEX_Runeblade_Air_Chance_Wet = 50
	INT:%LLWEAPONEX_Runeblade_Avalanche_Chance = 40
	INT:%LLWEAPONEX_Runeblade_BloodDisease_Chance = 40
	INT:%LLWEAPONEX_Runeblade_BloodEarth_Chance = 10
	INT:%LLWEAPONEX_Runeblade_BloodEarth_Chance_Undead = 50
	INT:%LLWEAPONEX_Runeblade_Dust_Chance = 30
	INT:%LLWEAPONEX_Runeblade_Earth_Chance = 20
	INT:%LLWEAPONEX_Runeblade_Explosion_Chance = 80
	INT:%LLWEAPONEX_Runeblade_Gas_Chance = 50
	INT:%LLWEAPONEX_Runeblade_Gas_MaxSurfaceTurns = 4
	INT:%LLWEAPONEX_Runeblade_Lava_Chance = 60
	INT:%LLWEAPONEX_Runeblade_Quake_Chance = 20
	INT:%LLWEAPONEX_Runeblade_Searing_Chance = 40
	INT:%LLWEAPONEX_Runeblade_Tar_Chance = 40
	INT:%LLWEAPONEX_Runeblade_Thunderbolt_Chance = 40
	INT:%LLWEAPONEX_Runeblade_Thunderbolt_Chance_Wet = 80
	INT:%LLWEAPONEX_Runeblade_Water_Chance = 50
	
	INT:%LLWEAPONEX_Runeblade_ComboRune_Turns = 2
EVENTS

EVENT LLWEAPONEX_Runeblade_OnHit_StartRolling
VARS
	CHARACTER:_Target
	CHARACTER:_Source
ON
	OnCharacterStatusApplied(_Target, LLWEAPONEX_RUNEBLADE_APPLY_STATUS)
ACTIONS
IF "c1"
	CharacterGetStatusSourceCharacter(_Target, LLWEAPONEX_RUNEBLADE_APPLY_STATUS, _Source)
THEN
	//Use LeaderLib's Random, since low range randoms aren't so random
	CharacterCharacterEvent(_Source, _Target, "LLWEAPONEX_Commands_Runeblade_StartRandom")
ENDIF

EVENT LLWEAPONEX_Runeblade_OnHit_RollingDone
VARS
	CHARACTER:_Target
	CHARACTER:_Source
	INT:_Ran
	INT:_IntVar
	STRING:_Msg
	FIXEDSTRING:_MsgF
	SURFACE:_Surface
	INT:_SurfaceTurns
	INT:_CellMin
	INT:_CellMax
	INT:_GrowMin
	INT:_GrowMax
ON
	OnCharacterCharacterEvent(_Source, _Target, "LLWEAPONEX_Events_Runeblade_RandomSet")
ACTIONS
IF "c1"
	GetVar(_Ran, _Source, "LLWEAPONEX_Runeblade_Roll")
THEN
	/*
	Print(_Msg, "Roll: [1]", _Ran)
	Cast(_MsgF, _Msg)
	DisplayCombatInfoText(_Source, _MsgF, 2)
	*/
	IF "c1"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE)
	THEN
		CharacterApplyStatus(_Target, BURNING, 1, 0, _Source)
	ELIF "c1"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_INFERNO)
	THEN
		CharacterApplyStatus(_Target, BURNING, 2, 0, _Source)
	ENDIF
	
	IF "c1&c2"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_LAVA)
		IsLessThen(_Ran, %LLWEAPONEX_Runeblade_Lava_Chance)
	THEN
		CharacterApplyStatus(_Target, LLWEAPONEX_RUNEBLADE_LAVA_EXPLODE, 0, 0, _Source)
	ENDIF
	
	IF "c1&c2&!c3"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_HEATBURST)
		//CharacterHasStatus(_Source, BURNING)
		GetStatusTurns(_Target, BURNING, _IntVar)
		CharacterHasStatus(_Target, LLWEAPONEX_RUNEBLADE_HEATBURST_SPREAD)
	THEN
		IF "c1"
			IsLessThen(_IntVar, 4)
		THEN
			Add(_IntVar, 1)
			CharacterApplyStatus(_Target, BURNING, _IntVar, 1, _Source)
		ENDIF
		CharacterApplyStatus(_Target, LLWEAPONEX_RUNEBLADE_HEATBURST_SPREAD, 1, 0, _Source)
	ENDIF
	
	IF "c1"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER)
	THEN
		CharacterApplyStatus(_Target, WET, 1, 0, _Source)
	ENDIF
	
	IF "c1"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_ICE)
	THEN
		IF "c1"
			CharacterHasStatus(_Target, CHILLED)
		THEN
			IF "c1"
				IsLessThen(_Ran, %LLWEAPONEX_Runeblade_Water_Chance)
			THEN
				CharacterApplyStatus(_Target, FROZEN, 1, 0, _Source)
			ENDIF
		ELSE
			CharacterApplyStatus(_Target, CHILLED, 1, 0, _Source)
		ENDIF
	ENDIF
	
	IF "c1"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_SEARING)
	THEN
		IF "c1"
			IsLessThen(_Ran, %LLWEAPONEX_Runeblade_Searing_Chance)
		THEN
			CharacterApplyStatus(_Target, LLWEAPONEX_WATER_BURN, 2, 0, _Source)
		ENDIF
		IF "c1"
			CharacterHasStatus(_Target, WET)
		THEN
			CharacterRemoveStatus(_Target, WET, LLWEAPONEX_EVAPORATE_WATER, 1)
			CharacterApplyStatus(_Target, LLWEAPONEX_EVAPORATE_WATER, 0, 0, _Source)
			CharacterApplyStatus(_Target, LLWEAPONEX_EVAPORATE_FIRE, 0, 0, _Source)
		ENDIF
	ENDIF
	
	IF "c1&c2"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_AVALANCHE)
		IsLessThen(_Ran, %LLWEAPONEX_Runeblade_Avalanche_Chance)
	THEN
		CharacterApplyStatus(_Target, LLWEAPONEX_RUNEBLADE_AVALANCHE_SNOW, 1, 0, _Source)
	ENDIF
	
	IF "c1&c2"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH)
		IsLessThen(_Ran, %LLWEAPONEX_Runeblade_Earth_Chance)
	THEN
		CharacterApplyStatus(_Target, SLOWED, 1, 0, _Source)
	ENDIF
	
	IF "c1&c2"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_QUAKE)
		IsLessThen(_Ran, %LLWEAPONEX_Runeblade_Quake_Chance)
	THEN
		CharacterApplyStatus(_Target, LLWEAPONEX_MAGIC_KNOCKDOWN_CHECK, 1, 0, _Source)
	ENDIF
	
	IF "c1&!c2"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_DUST)
		CharacterHasStatus(_Source, LLWEAPONEX_RUNEBLADE_DUST_COOLDOWN)
	THEN
		IF "c1"
			IsLessThen(_Ran, %LLWEAPONEX_Runeblade_Dust_Chance)
		THEN
			ShootLocalConeAt(Cone_LLWEAPONEX_Runeblade_DustBlast, _Source, null, _Target, -1, _Source)
			CharacterApplyStatus(_Source, LLWEAPONEX_RUNEBLADE_DUST_COOLDOWN, 1, 0, _Source)
			CharacterPlayEffect(_Source, "LLWEAPONEX_FX_Skills_Runeblade_DustBlast_Cast_01", "")
		ENDIF
	ENDIF
	
	IF "c1"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON)
	THEN
		CharacterApplyStatus(_Target, POISONED, 1, 0, _Source)
	ELIF "c1"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_VENOM)
	THEN
		CharacterApplyStatus(_Target, POISONED, 2, 0, _Source)
	ENDIF
	
	IF "c1&c2&!c3"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_CONTAMINATION)
		CharacterHasStatus(_Target, POISONED)
		CharacterHasStatus(_Target, LLWEAPONEX_RUNEBLADE_CONTAMINATION_SPREAD)
	THEN
		CharacterApplyStatus(_Target, LLWEAPONEX_RUNEBLADE_CONTAMINATION_SPREAD, 1, 0, _Source)
	ENDIF
	
	IF "c1&!c2&c3"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_GAS)
		CharacterHasStatus(_Source, LLWEAPONEX_RUNEBLADE_GAS_COOLDOWN)
		IsLessThen(_Ran, %LLWEAPONEX_Runeblade_Gas_Chance)
	THEN
		IF "c1&c2"
			GetSurfaceCloudAt(_Target, _Surface)
			IsEqual(_Surface, SurfacePoisonCloud)
		THEN
			StatusText(_Target, "<font color='#f7ba14'>Gas Expansion</font>")
			Set(_IntVar, 2)
		ELSE
			StatusText(_Target, "<font color='#65c900'>Gas Creation</font>")
			Set(_IntVar, 1)
		ENDIF
		
		Set(_CellMin, 20)
		Set(_CellMax, 35)
		Set(_GrowMin, 2)
		Set(_GrowMax, 5)
		Multiply(_CellMax, _IntVar)
		Multiply(_GrowMax, _IntVar)

		CreatePuddleAt(_Target, SurfacePoisonCloud, _CellMin, _CellMax, _GrowMin, _GrowMax, 0.01, 3)
		CharacterApplyStatus(_Source, LLWEAPONEX_RUNEBLADE_GAS_COOLDOWN, 1, 0, _Source)
		CharacterPlayEffect(_Target, "RS3_FX_Skills_Earth_Cast_Target_Air_Hand_01", "Dummy_BodyFX")
		//PlaySound(_Target, "Skill_Earth_Cast_Target_Air_Poison")
	ENDIF
	
	IF "c1"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR)
	THEN
		IF "c1&c2"
			CharacterHasStatus(_Target, WET)
			IsLessThen(_Ran, %LLWEAPONEX_Runeblade_Air_Chance_Wet)
		THEN
			CharacterApplyStatus(_Target, SHOCKED, 1, 0, _Source)
		ELIF "!c1&c2"
			CharacterHasStatus(_Target, WET)
			IsLessThen(_Ran, %LLWEAPONEX_Runeblade_Air_Chance)
		THEN
			CharacterApplyStatus(_Target, SHOCKED, 1, 0, _Source)
		ENDIF
	ENDIF
	
	IF "c1"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_CONDUCTION)
	THEN
		IF "c1"
			CharacterHasStatus(_Target, WET)
		THEN
			CharacterApplyStatus(_Target, SHOCKED, 1, 0, _Source)
		ELSE
			CharacterApplyStatus(_Target, WET, 1, 0, _Source)
		ENDIF
	ENDIF
	
	IF "c1"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_THUNDERBOLT)
	THEN
		IF "c1&c2"
			CharacterHasStatus(_Target, WET)
			IsLessThen(_Ran, %LLWEAPONEX_Runeblade_Thunderbolt_Chance_Wet)
		THEN
			CharacterApplyStatus(_Target, LLWEAPONEX_RUNEBLADE_THUNDERBOLT_EXPLODE, 0, 0, _Source)
		ELIF "!c1&c2"
			CharacterHasStatus(_Target, WET)
			IsLessThen(_Ran, %LLWEAPONEX_Runeblade_Thunderbolt_Chance)
		THEN
			CharacterApplyStatus(_Target, LLWEAPONEX_RUNEBLADE_THUNDERBOLT_EXPLODE, 0, 0, _Source)
		ENDIF
	ENDIF
	
	IF "c1"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_EXPLOSIVE)
	THEN
		IF "c1"
			IsLessThen(_Ran, %LLWEAPONEX_Runeblade_Explosion_Chance)
		THEN
			CharacterApplyStatus(_Target, LLWEAPONEX_RUNEBLADE_EXPLODE, 0, 0, _Source)
		ENDIF
	ENDIF	
	
	IF "c1"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_TAR)
	THEN
		IF "c1"
			IsLessThen(_Ran, %LLWEAPONEX_Runeblade_Tar_Chance)
		THEN
			CharacterApplyStatus(_Target, LLWEAPONEX_RUNEBLADE_TARRED, 2, 0, _Source)
		ENDIF
	ENDIF
	
	IF "c1&c2"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_POISON)
		CharacterIsEnemy(_Target, _Source)
	THEN
		IF "c1"
			IsLessThen(_Ran, %LLWEAPONEX_Runeblade_BloodDisease_Chance)
		THEN
			CharacterApplyStatus(_Target, INFECTIOUS_DISEASED, 0, 0, _Source)
		ENDIF
	ENDIF	
	
	IF "c1"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_PLUS)
	THEN
		StatusText(_Source, "Increasing combo")
		
		IF "!c1"
			GetVar(_IntVar, _Source, "LLWEAPONEX_BloodPlusAttacks")
		THEN
			Set(_IntVar, 0)
		ENDIF
		
		Add(_IntVar, 1)
		IF "c1|c2"
			IsEqual(_IntVar, 2)
			IsGreaterThen(_IntVar, 2)
		THEN
			SetVar(_Source, "LLWEAPONEX_BloodPlusAttacks", INT:0)
			CharacterAddToInventory(_Source, "WPN_LLWEAPONEX_Throwing_BloodBall", 1)
			StatusText(_Source, "Added Blood Ball?")
		ELSE
			SetVar(_Source, "LLWEAPONEX_BloodPlusAttacks", _IntVar)
		ENDIF
	ENDIF
	
	IF "c1"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_EARTH)
	THEN
		IF "c1|c2|c3"
			IsTagged(_Target, "UNDEAD")
			IsTagged(_Target, "UNDEAD_BEAST")
			CharacterHasTalent(_Target, Zombie)
		THEN
			CharacterApplyStatus(_Target, LLWEAPONEX_UNDEAD_BONUS_DAMAGE, 0, 0, _Source)
			IF "c1"
				IsLessThen(_Ran, %LLWEAPONEX_Runeblade_BloodEarth_Chance_Undead)
			THEN
				CharacterApplyStatus(_Target, ENTANGLED, 1, 0, _Source)
			ENDIF
		ELIF "c1"
			IsLessThen(_Ran, %LLWEAPONEX_Runeblade_BloodEarth_Chance)
		THEN
			CharacterApplyStatus(_Target, ENTANGLED, 1, 0, _Source)
		ENDIF
	ENDIF
	
	IF "c1"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_AIR)
	THEN
		CharacterApplyStatus(_Source, LLWEAPONEX_RUNEBLADE_BLOOD_AIR_REGEN_AURA, 1, 0, _Source)
	ENDIF
	
	IF "c1&!c2"
		CharacterHasStatus(_Source, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_FIRE)
		CharacterHasStatus(_Source, LLWEAPONEX_PREVENT_DOUBLE_HITS)
	THEN
		CharacterApplyStatus(_Target, LLWEAPONEX_RUNEBLADE_BLOOD_FIRE_PROC, 0, 0, _Source)
		CharacterApplyStatus(_Source, LLWEAPONEX_PREVENT_DOUBLE_HITS, 1, 0, _Source)
	ENDIF
ENDIF

EVENT LLWEAPONEX_Runeblade_BloodStorm_RemoveAura_Start
VARS
	CHARACTER:_Character
ON
	OnCharacterStatusApplied(_Character, LLWEAPONEX_RUNEBLADE_BLOOD_AIR_REGEN_AURA)
ACTIONS
	SetVar(_Character, "LeaderLib_Timer_CompleteEvent", STRING:"LLWEAPONEX_Events_RemoveBloodAirRegenAura")
	SetVar(_Character, "LeaderLib_Timer_Delay", INT:500)
	CharacterEvent(_Character, "LeaderLib_Commands_StartObjectTimer")
	
EVENT LLWEAPONEX_Runeblade_BloodStorm_RemoveAura_End
VARS
	CHARACTER:_Character
ON
	OnCharacterEvent(_Character, "LLWEAPONEX_Events_RemoveBloodAirRegenAura")
ACTIONS
	CharacterRemoveStatus(_Character, LLWEAPONEX_RUNEBLADE_BLOOD_AIR_REGEN_AURA)	
	
EVENT LLWEAPONEX_Runeblade_Dust_Cooldown
VARS
	CHARACTER:_Character
ON
	OnTurnEnded(_Character, _)
	OnCharacterStatusRemoved(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_DUST)
	OnDie(_Character, _, _, _)
ACTIONS
IF "c1"
	CharacterHasStatus(_Character, LLWEAPONEX_RUNEBLADE_DUST_COOLDOWN)
THEN
	CharacterRemoveStatus(_Character, LLWEAPONEX_RUNEBLADE_DUST_COOLDOWN)
ENDIF

EVENT LLWEAPONEX_Runeblade_Gas_Cooldown
VARS
	CHARACTER:_Character
ON
	OnTurnEnded(_Character, _)
	OnCharacterStatusRemoved(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_GAS)
	OnDie(_Character, _, _, _)
ACTIONS
IF "c1"
	CharacterHasStatus(_Character, LLWEAPONEX_RUNEBLADE_GAS_COOLDOWN)
THEN
	CharacterRemoveStatus(_Character, LLWEAPONEX_RUNEBLADE_GAS_COOLDOWN)
ENDIF

EVENT LLWEAPONEX_Runeblade_Contamination_Removal
VARS
	CHARACTER:_Target
ON
	OnCharacterStatusRemoved(_Target, POISONED)
ACTIONS
IF "c1"
	CharacterHasStatus(_Target, LLWEAPONEX_RUNEBLADE_CONTAMINATION_SPREAD)
THEN
	CharacterRemoveStatus(_Target, LLWEAPONEX_RUNEBLADE_CONTAMINATION_SPREAD)
ENDIF

EVENT LLWEAPONEX_Runeblade_Contamination_Spread
VARS
	CHARACTER:_Target
	CHARACTER:_CheckSource
	CHARACTER:_RuneSource
	INT:_Turns
ON
	OnCharacterStatusApplied(_Target, LLWEAPONEX_RUNEBLADE_CONTAMINATION_CHECK)
ACTIONS
IF "c1&c2&c3"
	CharacterGetStatusSourceCharacter(_Target, LLWEAPONEX_RUNEBLADE_CONTAMINATION_CHECK, _CheckSource)
	CharacterGetStatusSourceCharacter(_CheckSource, LLWEAPONEX_RUNEBLADE_CONTAMINATION_SPREAD, _RuneSource)
	CharacterIsEnemy(_Target, _RuneSource)
THEN
IF "c1&c2"
	GetStatusTurns(_CheckSource, POISONED, _Turns)
	IsGreaterThen(_Turns, 1)
THEN
ELSE
	Set(_Turns, 1)
ENDIF
	IF "!c1"
		CharacterHasStatus(_Target, POISONED)
	THEN
		CharacterApplyStatus(_Target, POISONED, _Turns, 0, _RuneSource)
	ELIF "!c1"
		CharacterHasStatus(_Target, LLWEAPONEX_RUNEBLADE_CONTAMINATION_SPREAD)
	THEN
		CharacterApplyStatus(_Target, LLWEAPONEX_RUNEBLADE_CONTAMINATION_SPREAD, 1, 0, _RuneSource)
	ENDIF
ENDIF

/*
EVENT LLWEAPONEX_Runeblade_Heatburst_Removal
VARS
	CHARACTER:_Target
ON
	OnCharacterStatusRemoved(_Target, BURNING)
ACTIONS
IF "c1"
	CharacterHasStatus(_Target, LLWEAPONEX_RUNEBLADE_HEATBURST_SPREAD)
THEN
	CharacterRemoveStatus(_Target, LLWEAPONEX_RUNEBLADE_HEATBURST_SPREAD)
ENDIF
*/
EVENT LLWEAPONEX_Runeblade_Heatburst_Spread
VARS
	CHARACTER:_Target
	CHARACTER:_CheckSource
	CHARACTER:_RuneSource
	INT:_Turns
ON
	OnCharacterStatusApplied(_Target, LLWEAPONEX_RUNEBLADE_HEATBURST_CHECK)
ACTIONS
IF "c1&c2&c3"
	CharacterGetStatusSourceCharacter(_Target, LLWEAPONEX_RUNEBLADE_HEATBURST_CHECK, _CheckSource)
	CharacterGetStatusSourceCharacter(_CheckSource, LLWEAPONEX_RUNEBLADE_HEATBURST_SPREAD, _RuneSource)
	CharacterIsEnemy(_Target, _RuneSource)
THEN
IF "c1&c2"
	GetStatusTurns(_CheckSource, BURNING, _Turns)
	IsGreaterThen(_Turns, 1)
THEN
	//Add(_Turns, 1)
	//CharacterApplyStatus(_CheckSource, BURNING, _Turns, 1, _RuneSource)
ELSE
	Set(_Turns, 1)
ENDIF
	IF "!c1"
		CharacterHasStatus(_Target, BURNING)
	THEN
		CharacterPlayEffect(_Target, "LLWEAPONEX_FX_Status_Heatburst_Check_01", "Dummy_BodyFX")
		SetFlag(_Target, "LLWEAPONEX_Runeblade_PlayHeatBurstCheckSound")
		CharacterApplyStatus(_Target, BURNING, _Turns, 0, _RuneSource)
	ELIF "!c1"
		CharacterHasStatus(_Target, LLWEAPONEX_RUNEBLADE_HEATBURST_SPREAD)
	THEN
		CharacterApplyStatus(_Target, LLWEAPONEX_RUNEBLADE_HEATBURST_SPREAD, 1, 0, _RuneSource)
	ENDIF
ENDIF

EVENT LLWEAPONEX_Runeblade_SoulBurn_Proc
VARS
	CHARACTER:_Target
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	INT:_Turns
	INT:_TurnsLeft
ON
	FetchCharacterApplyStatusData(_Target, LLWEAPONEX_RUNEBLADE_BLOOD_FIRE_PROC)
ACTIONS
	Set(_Result, null)
	Set(_Turns, 1)
	CharacterEvent(_Target, "LLWEAPONEX_Commands_StopSoulBurnTick")
IF "c1&c2"
	CharacterHasStatus(_Target, LLWEAPONEX_SOUL_BURN1)
	GetStatusTurns(_Target, LLWEAPONEX_SOUL_BURN1, _TurnsLeft)
THEN
	Add(_Turns, _TurnsLeft)
	Set(_Result, LLWEAPONEX_SOUL_BURN2)
	ListAdd(_RemoveList, LLWEAPONEX_SOUL_BURN1)
ELIF "c1&c2"
	CharacterHasStatus(_Target, LLWEAPONEX_SOUL_BURN2)
	GetStatusTurns(_Target, LLWEAPONEX_SOUL_BURN2, _TurnsLeft)
THEN
	Add(_Turns, _TurnsLeft)
	Set(_Result, LLWEAPONEX_SOUL_BURN3)
	ListAdd(_RemoveList, LLWEAPONEX_SOUL_BURN2)
ELIF "c1&c2"
	CharacterHasStatus(_Target, LLWEAPONEX_SOUL_BURN3)
	GetStatusTurns(_Target, LLWEAPONEX_SOUL_BURN3, _TurnsLeft)
THEN
	Add(_Turns, _TurnsLeft)
	Set(_Result, LLWEAPONEX_SOUL_BURN4)
	ListAdd(_RemoveList, LLWEAPONEX_SOUL_BURN3)
ELIF "c1"
	CharacterHasStatus(_Target, LLWEAPONEX_SOUL_BURN4)
THEN
	IF "c1"
		GetStatusTurns(_Target, LLWEAPONEX_SOUL_BURN4, _TurnsLeft)
	THEN
		Add(_Turns, _TurnsLeft)
		Clamp(_Turns, 1, 5)
	ELSE
		Set(_Turns, 1)
	ENDIF
	
	Set(_Result, LLWEAPONEX_SOUL_BURN5)
	ListAdd(_RemoveList, LLWEAPONEX_SOUL_BURN4)
ELIF "!c1"
	CharacterHasStatus(_Target, LLWEAPONEX_SOUL_BURN5)
THEN
	Set(_Result, LLWEAPONEX_SOUL_BURN1)
	Set(_Turns, 1)
ENDIF
IF "!c1"
	IsEqual(_Result, null)
THEN
	CharacterEvent(_Target, "LLWEAPONEX_Commands_StartSoulBurnTick")
ENDIF

RETURN(_RemoveList, _Result, _Turns)
	
//Regress the status
EVENT LLWEAPONEX_Runeblade_SoulBurn_Tick
VARS
	CHARACTER:_Target
	CHARACTER:_Source
	STATUS:_Result
	INT:_Turns
	INT:_TurnsLeft
ON
	OnCharacterStatusRemoved(_Target, LLWEAPONEX_SOUL_BURN_TICK)
ACTIONS
IF "!c1"
	HasFlag(_Target, "LLWEAPONEX_SkipSoulBurnTick")
THEN
	Set(_Result, null)
	Set(_Turns, null)
	IF "c1&c2&c3"
		CharacterHasStatus(_Target, LLWEAPONEX_SOUL_BURN2)
		GetStatusTurns(_Target, LLWEAPONEX_SOUL_BURN2, _TurnsLeft)
		CharacterGetStatusSourceCharacter(_Target, LLWEAPONEX_SOUL_BURN2, _Source)
	THEN
		Set(_Turns, _TurnsLeft)
		Set(_Result, LLWEAPONEX_SOUL_BURN1)
	ELIF "c1&c2&c3"
		CharacterHasStatus(_Target, LLWEAPONEX_SOUL_BURN3)
		GetStatusTurns(_Target, LLWEAPONEX_SOUL_BURN3, _TurnsLeft)
		CharacterGetStatusSourceCharacter(_Target, LLWEAPONEX_SOUL_BURN3, _Source)
	THEN
		Set(_Turns, _TurnsLeft)
		Set(_Result, LLWEAPONEX_SOUL_BURN2)
	ELIF "c1&c2&c3"
		CharacterHasStatus(_Target, LLWEAPONEX_SOUL_BURN4)
		GetStatusTurns(_Target, LLWEAPONEX_SOUL_BURN4, _TurnsLeft)
		CharacterGetStatusSourceCharacter(_Target, LLWEAPONEX_SOUL_BURN4, _Source)
	THEN
		Set(_Turns, _TurnsLeft)
		Set(_Result, LLWEAPONEX_SOUL_BURN3)
	ELIF "c1&c2&c3"
		CharacterHasStatus(_Target, LLWEAPONEX_SOUL_BURN5)
		GetStatusTurns(_Target, LLWEAPONEX_SOUL_BURN5, _TurnsLeft)
		CharacterGetStatusSourceCharacter(_Target, LLWEAPONEX_SOUL_BURN5, _Source)
	THEN
		Set(_Turns, _TurnsLeft)
		Set(_Result, LLWEAPONEX_SOUL_BURN4)
	ENDIF
	IF "!c1&!c2&!c3"
		IsEqual(_Result, null)
		IsEqual(_Turns, null)
		IsEqual(_Source, null)
	THEN
		CharacterApplyStatus(_Target, _Result, _Turns, 1, _Source)
		CharacterEvent(_Target, "LLWEAPONEX_Commands_StartSoulBurnTick")
	ENDIF
ELSE
	//StatusText(_Target, "LLWEAPONEX_SkipSoulBurnTick = true")
ENDIF

EVENT LLWEAPONEX_Runeblade_SoulBurn_Reset
VARS
	CHARACTER:_Character
ON
	OnCharacterStatusRemoved(_Character, LLWEAPONEX_SOUL_BURN1)
	OnDie(_Character, _, _, _)
ACTIONS
IF "c1"
	HasFlag(_Character, "LLWEAPONEX_SkipSoulBurnTick")
THEN
	ClearFlag(_Character, "LLWEAPONEX_SkipSoulBurnTick")
ENDIF

EVENT LLWEAPONEX_Runeblade_Unequipped
VARS
	CHARACTER:_Player
	ITEM:_Runeblade
	LIST<STATUS>:_RemoveList
	INT:_Index
	INT:_Size
	STATUS:_RemoveStatus
ON
	OnItemUnequipped(_Player, _Runeblade)
ACTIONS
IF "c1"
	IsTagged(_Runeblade, "LLWEAPONEX_Runeblade")
THEN
	IF "c1"
		IsTagged(_Runeblade, "LLWEAPONEX_Runeblade_Air")
	THEN
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_THUNDERBOLT)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_CONDUCTION)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_DUST)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_GAS)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_HEATBURST)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_AIR)
	ENDIF
	
	IF "c1"
		IsTagged(_Runeblade, "LLWEAPONEX_Runeblade_Earth")
	THEN
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_QUAKE)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_DUST)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_TAR)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_LAVA)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_AVALANCHE)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_EARTH)
	ENDIF
	
	IF "c1"
		IsTagged(_Runeblade, "LLWEAPONEX_Runeblade_Fire")
	THEN
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_INFERNO)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_EXPLOSIVE)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_LAVA)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_HEATBURST)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_SEARING)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_FIRE)
	ENDIF
	
	IF "c1"
		IsTagged(_Runeblade, "LLWEAPONEX_Runeblade_Poison")
	THEN
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_VENOM)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_EXPLOSIVE)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_CONTAMINATION)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_GAS)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_TAR)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_POISON)
	ENDIF
	
	IF "c1"
		IsTagged(_Runeblade, "LLWEAPONEX_Runeblade_Water")
	THEN
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_ICE)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_AVALANCHE)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_CONDUCTION)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_CONTAMINATION)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_SEARING)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_WATER)
	ENDIF
	
	IF "c1"
		IsTagged(_Runeblade, "LLWEAPONEX_Runeblade_Chaos")
	THEN
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_PLUS)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_POISON)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_EARTH)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_FIRE)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_AIR)
		ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_WATER)
	ENDIF
	
	IF "c1"
		ListGetSize(_RemoveList, _Size)
	THEN
		Set(_Index, 1)
		WHILE "!c1"
			IsGreaterThen(_Index, _Size)
		DO
			IF "c1&c2"
				ListGet(_RemoveList, _Index, _RemoveStatus)
				CharacterHasStatus(_Player, _RemoveStatus)
			THEN
				CharacterRemoveStatus(_Player, _RemoveStatus)
			ENDIF
		Add(_Index, 1)
		ENDWHILE
	ENDIF
	
ENDIF

EVENT LLWEAPONEX_Runeblade_Combo_Air
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	INT:_Turns
	INT:_TurnsLeft
ON
	FetchCharacterApplyStatusData(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR)
ACTIONS
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR)
	Set(_Turns, null)
IF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_THUNDERBOLT)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_GAS)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_DUST)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_CONDUCTION)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_HEATBURST)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_AIR)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ENDIF
	RETURN(_RemoveList, _Result, _Turns)
	
EVENT LLWEAPONEX_Runeblade_Combo_Earth
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	INT:_Turns
	INT:_TurnsLeft
ON
	FetchCharacterApplyStatusData(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH)
ACTIONS
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH)
	Set(_Turns, null)
IF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_QUAKE)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_TAR)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_LAVA)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_AVALANCHE)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_DUST)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_EARTH)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ENDIF
	RETURN(_RemoveList, _Result, _Turns)

EVENT LLWEAPONEX_Runeblade_Combo_Fire
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	INT:_Turns
	INT:_TurnsLeft
ON
	FetchCharacterApplyStatusData(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE)
ACTIONS
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE)
	Set(_Turns, null)
IF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_INFERNO)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_EXPLOSIVE)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_LAVA)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_SEARING)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_HEATBURST)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_FIRE)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ENDIF
	RETURN(_RemoveList, _Result, _Turns)
	
EVENT LLWEAPONEX_Runeblade_Combo_Poison
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	INT:_Turns
	INT:_TurnsLeft
ON
	FetchCharacterApplyStatusData(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON)
ACTIONS
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON)
	Set(_Turns, null)
IF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_VENOM)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_EXPLOSIVE)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_TAR)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_CONTAMINATION)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_GAS)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_POISON)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ENDIF
	RETURN(_RemoveList, _Result, _Turns)
	
EVENT LLWEAPONEX_Runeblade_Combo_Water
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	INT:_Turns
	INT:_TurnsLeft
ON
	FetchCharacterApplyStatusData(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER)
ACTIONS
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER)
	Set(_Turns, null)
IF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_ICE)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_CONTAMINATION)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_AVALANCHE)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_SEARING)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_CONDUCTION)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_WATER)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ENDIF
	RETURN(_RemoveList, _Result, _Turns)

EVENT LLWEAPONEX_Runeblade_Combo_Blood
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	INT:_Turns
	INT:_TurnsLeft
ON
	FetchCharacterApplyStatusData(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD)
ACTIONS
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD)
	Set(_Turns, null)
IF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD, _TurnsLeft)
THEN
	SetVar(_Character, "LLWEAPONEX_BloodPlusAttacks", INT:0)
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_PLUS)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_POISON)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_EARTH)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_EARTH)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_FIRE)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_FIRE)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_AIR)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_AIR)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ELIF "c1"
	GetStatusTurns(_Character, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER, _TurnsLeft)
THEN
	Set(_Result, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD_WATER)
	ListClear(_RemoveList)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_BLOOD)
	ListAdd(_RemoveList, LLWEAPONEX_ACTIVATE_RUNEBLADE_WATER)
	Add(_TurnsLeft, %LLWEAPONEX_Runeblade_ComboRune_Turns)
	Set(_Turns, _TurnsLeft)
ENDIF
	RETURN(_RemoveList, _Result, _Turns)
