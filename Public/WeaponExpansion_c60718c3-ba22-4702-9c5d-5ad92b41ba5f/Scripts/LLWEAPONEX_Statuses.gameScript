INIT

EVENTS

EVENT LLWEAPONEX_FumbleRoll
VARS
	CHARACTER:_Attacker
	CHARACTER:_Source
	INT:_Ran
ON
	OnCharacterStartAttackObject(_, _, _, _Attacker)
ACTIONS
IF "c1&c2"
	CharacterHasStatus(_Attacker, LLWEAPONEX_CONCUSSION)
	CharacterGetStatusSourceCharacter(_Attacker, LLWEAPONEX_CONCUSSION, _Source)
THEN
	GetRandomBetween(_Ran, 0, 100)
	IF "c1"
		IsLessThen(_Ran, 10)
	THEN
		CharacterApplyStatus(_Attacker, LLWEAPONEX_FUMBLE, 0, 1, _Source)
	ENDIF
ENDIF

EVENT LLWEAPONEX_TrippingKnockdown
VARS
	CHARACTER:_Target
	CHARACTER:_Source
ON
	OnCharacterStatusAttempt(_Target, LLWEAPONEX_TRIPPING)
ACTIONS
IF "c1&c2"
	CharacterHasStatus(_Target, LLWEAPONEX_TRIPPING)
	CharacterGetStatusSourceCharacter(_Target, LLWEAPONEX_TRIPPING, _Source)
THEN
	CharacterApplyStatus(_Target, KNOCKED_DOWN, 1, 0, _Source)
	
ENDIF

EVENT LLWEAPONEX_DragonsBane_GuaranteedKnockdown
VARS
	CHARACTER:_Target
	CHARACTER:_Source
ON
	OnCharacterStatusApplied(_Target, LLWEAPONEX_DRAGONS_BANE)
ACTIONS
IF "!c1&c2"
	CharacterHasStatus(_Target, KNOCKED_DOWN)
	CharacterGetStatusSourceCharacter(_Target, LLWEAPONEX_DRAGONS_BANE, _Source)
THEN
	CharacterApplyStatus(_Target, KNOCKED_DOWN, 1, 1, _Source)
ENDIF

//If LLWEAPONEX_MAGIC_KNOCKDOWN_CHECK is applied, that means they have 0 magic armor and aren't immune to knockdown
EVENT LLWEAPONEX_MagicKnockdownCheck
VARS
	CHARACTER:_Target
	CHARACTER:_Source
	INT:_Turns
ON
	OnCharacterStatusApplied(_Target, LLWEAPONEX_MAGIC_KNOCKDOWN_CHECK)
ACTIONS
IF "!c1&c2&c3"
	CharacterHasStatus(_Target, KNOCKED_DOWN) // Don't force if they're already knocked down
	CharacterGetStatusSourceCharacter(_Target, LLWEAPONEX_MAGIC_KNOCKDOWN_CHECK, _Source)
	GetStatusTurns(_Target, LLWEAPONEX_MAGIC_KNOCKDOWN_CHECK, _Turns)
THEN
	CharacterApplyStatus(_Target, KNOCKED_DOWN, _Turns, 1, _Source)
ENDIF
	CharacterRemoveStatus(_Target, LLWEAPONEX_MAGIC_KNOCKDOWN_CHECK)

EVENT LLWEAPONEX_Tar_BurningBypass
VARS
	CHARACTER:_Character
	CHARACTER:_Source
	INT:_BurningTurns
ON
	OnCharacterStatusAttempt(_Character, BURNING)
ACTIONS
IF "c1&c2&c3"
	CharacterHasStatus(_Character, LLWEAPONEX_RUNEBLADE_TARRED)
	GetStatusTurns(_Character, BURNING, _BurningTurns)
	CharacterGetStatusSourceCharacter(_Character, BURNING, _Source)
THEN
	CharacterApplyStatus(_Character, BURNING, _BurningTurns, 1, _Source)
ENDIF

/*
EVENT LLWEAPONEX_Kevin_MiniExplosion
VARS
	CHARACTER:_Target
	CHARACTER:_Player
	FLOAT:_LevelF
	INT:_Level
ON
	OnCharacterStatusApplied(_Target, LLWEAPONEX_KEVIN_MINIEXPLOSION)
ACTIONS
IF "c1&c2"
	CharacterGetStatusSourceCharacter(_Target, LLWEAPONEX_KEVIN_MINIEXPLOSION, _Player)
	CharacterGetStat(_LevelF, _Player, Level)
THEN
	Cast(_Level, _LevelF)
	ExplodeAt(_Target, Projectile_LLWEAPONEX_Kevin_MiniExplosion, _Level, _Player)
ENDIF
*/