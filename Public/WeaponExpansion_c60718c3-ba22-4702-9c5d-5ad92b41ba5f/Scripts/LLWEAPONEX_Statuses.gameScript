INIT

EVENTS

EVENT LLWEAPONEX_Rapier_SuckerCombo1
VARS
	CHARACTER:_Character
	STATUS:_Result
	LIST<STATUS>:_RemoveList
	INT:_Turns
ON
	FetchCharacterApplyStatusData(_Character, LLWEAPONEX_RAPIER_MASTERY_SUCKERCOMBO1)
ACTIONS
	Set(_Result, null)
IF "c1"
	GetStatusTurns(_Character, KNOCKED_DOWN, _Turns)
THEN
	Clamp(_Turns, 1, _Turns)
	Add(_Turns, 1)
	Set(_Result, LLWEAPONEX_RAPIER_MASTERY_DELAYED_DAZED)
ENDIF
	RETURN(_RemoveList, _Result, _Turns)


EVENT LLWEAPONEX_Rapier_DelayedDaze_ApplyDazed
VARS
	CHARACTER:_Character
	CHARACTER:_Source
ON
	OnCharacterEvent(_Character, "LLWEAPONEX_Events_DelayDazedReady")
ACTIONS
IF "c1"
	CharacterGetStatusSourceCharacter(_Character, LLWEAPONEX_RAPIER_MASTERY_DELAYED_DAZED, _Source)
THEN
ELSE
	Set(_Source, _Character)
ENDIF
	CharacterRemoveStatus(_Character, LLWEAPONEX_RAPIER_MASTERY_DELAYED_DAZED, null, 0)
	CharacterApplyStatus(_Character, LLWEAPONEX_DIZZY, 2, 1, _Source)

EVENT LLWEAPONEX_Tripping_GuaranteedKnockdown
VARS
	CHARACTER:_Character
	STATUS:_Result
	LIST<STATUS>:_RemoveList
	INT:_Turns
ON
	FetchCharacterApplyStatusData(_Character, LLWEAPONEX_TRIPPING)
ACTIONS
	Set(_Result, LLWEAPONEX_TRIPPING)
IF "c1"
	CharacterHasStatus(_Target, LLWEAPONEX_TRIPPING)
THEN
	Set(_Turns, 1)
	Set(_Result, KNOCKED_DOWN)
	ListAdd(_RemoveList, LLWEAPONEX_TRIPPING)
ENDIF
	RETURN(_RemoveList, _Result, _Turns)

EVENT LLWEAPONEX_Tripping_Cleanse
VARS
	CHARACTER:_Target
	CHARACTER:_Source
ON
	OnCharacterStatusApplied(_Target, KNOCKED_DOWN)
	OnCharacterStatusApplied(_Target, FIRST_AID)
	OnCharacterStatusApplied(_Target, HEAL_SHARING)
	OnCharacterStatusApplied(_Target, FORTIFIED)
ACTIONS
IF "c1"
	CharacterHasStatus(_Target, LLWEAPONEX_TRIPPING)
THEN
	CharacterRemoveStatus(_Target, LLWEAPONEX_TRIPPING)
ENDIF

/*
EVENT LLWEAPONEX_Tar_BurningBypass
VARS
	CHARACTER:_Character
	CHARACTER:_Source
	INT:_BurningTurns
ON
	OnCharacterCharacterEvent(_Character, "LLWEAPONEX_Burning_ArmorBypass")
ACTIONS
IF "c1&c2"
	GetStatusTurns(_Character, LLWEAPONEX_TARRED, _BurningTurns)
THEN
	IF "c1"
		CharacterGetStatusSourceCharacter(_Character, BURNING, _Source)
	THEN
	
	ENDIF
	IF "c1"
		IsLessThen(_BurningTurns, 1)
	THEN
		Set(_BurningTurns, 1)
	ENDIF
	CharacterApplyStatus(_Character, BURNING, _BurningTurns, 1, _Source)
ENDIF
*/

EVENT LLWEAPONEX_DeathSentence_Block
VARS
	CHARACTER:_Character
ON
	OnCharacterStatusRemoved(_Character, LLWEAPONEX_DEATH_SENTENCE)
ACTIONS
IF "!c1"
	CharacterIsDead(_Character, 1)
THEN
	CharacterApplyStatus(_Character, LLWEAPONEX_DEATH_SENTENCE_BLOCKED, 4, 0)
ENDIF

EVENT LLWEAPONEX_Shocked_Block
VARS
	CHARACTER:_Character
	STATUS:_Result
	LIST<STATUS>:_RemoveList
	INT:_Turns
ON
	FetchCharacterApplyStatusData(_Character, LLWEAPONEX_RUNEBLADE_SHOCKED)
ACTIONS
	Set(_Result, SHOCKED)
IF "c1"
	CharacterHasStatus(_Target, LLWEAPONEX_SHOCKED_RESISTANCE_RUNEBLADE)
THEN
	Set(_Result, null)
ENDIF
	RETURN(_RemoveList, _Result, _Turns)

/*
EVENT LLWEAPONEX_Kevin_MiniExplosion
VARS
	CHARACTER:_Target
	CHARACTER:_Player
	FLOAT:_LevelF
	INT:_Level
ON
	OnCharacterStatusApplied(_Target, LLWEAPONEX_KEVIN_MINIEXPLOSION)
ACTIONS
IF "c1&c2"
	CharacterGetStatusSourceCharacter(_Target, LLWEAPONEX_KEVIN_MINIEXPLOSION, _Player)
	CharacterGetStat(_LevelF, _Player, Level)
THEN
	Cast(_Level, _LevelF)
	ExplodeAt(_Target, Projectile_LLWEAPONEX_Kevin_MiniExplosion, _Level, _Player)
ENDIF
*/

EVENT LLWEAPONEX_ShieldToss_Bonus
VARS
	CHARACTER:_Character
ON
	OnCharacterEvent(_Character, "LLWEAPONEX_ShieldToss_ApplyAuraBonus")
ACTIONS
	ExplodeAt(_Character, Projectile_LLWEAPONEX_ApplyShieldTossBonus, -1, _Character)

EVENT LLWEAPONEX_DeflectProjectiles_CountdownStart
VARS
	CHARACTER:_Character
ON
	OnEnteredCombat(_Character, _)
ACTIONS
IF "c1&!c2"
	CharacterHasStatus(_Character, LLWEAPONEX_DEFLECT_PROJECTILES_INNATE)
	CharacterHasStatus(_Character, LLWEAPONEX_DEFLECT_PROJECTILES_COUNTDOWN)
THEN
	CharacterApplyStatus(_Character, LLWEAPONEX_DEFLECT_PROJECTILES_COUNTDOWN, 4, 0, _Character)
ENDIF

EVENT LLWEAPONEX_DeflectProjectiles_CountdownCancel_LeftCombat
VARS
	CHARACTER:_Character
ON
	OnLeftCombat(_Character, _)
ACTIONS
IF "c1"
	CharacterHasStatus(_Character, LLWEAPONEX_DEFLECT_PROJECTILES_COUNTDOWN)
THEN
	CharacterRemoveStatus(_Character, LLWEAPONEX_DEFLECT_PROJECTILES_COUNTDOWN)
ENDIF

EVENT LLWEAPONEX_DeflectProjectiles_CountdownCancel_NotInCombat
VARS
	CHARACTER:_Character
	STATUS:_Result
	LIST<STATUS>:_RemoveList
ON
	FetchCharacterApplyStatusData(_Character, LLWEAPONEX_DEFLECT_PROJECTILES_COUNTDOWN)
ACTIONS
	Set(_Result, LLWEAPONEX_DEFLECT_PROJECTILES_COUNTDOWN)
IF "!c1|!c2"
	IsInCombat(_Character)
	CharacterHasStatus(_Character, LLWEAPONEX_DEFLECT_PROJECTILES_INNATE)
THEN
	Set(_Result, null)
	ListAdd(_RemoveList, LLWEAPONEX_DEFLECT_PROJECTILES)
	CombatLogText(_Character, "LLWEAPONEX_CombatLog_DeflectProjectilesCountdownFailed", 1, 1)
ENDIF
	RETURN(_RemoveList, _Result, null)
	
EVENT LLWEAPONEX_PoisonBurst_ApplyExplosion
VARS
	CHARACTER:_Target
	CHARACTER:_Source
	INT:_Turns
ON
	OnCharacterStatusApplied(_Target, LLWEAPONEX_POISONBURST_CHECK)
ACTIONS
IF "c1&c2"
	GetStatusTurns(_Target, POISONED, _Turns)
	CharacterGetStatusSourceCharacter(_Target, LLWEAPONEX_POISONBURST_CHECK, _Source)
THEN
	IF "c1|c2"
		IsGreaterThen(_Turns, 6)
		IsEqual(_Turns, 6)
	THEN
		CharacterApplyStatus(_Target, LLWEAPONEX_POISONBURST_EXPLODE_6, 0, 1, _Source)
	ELIF "c1"
		IsEqual(_Turns, 5)
	THEN
		CharacterApplyStatus(_Target, LLWEAPONEX_POISONBURST_EXPLODE_5, 0, 1, _Source)
	ELIF "c1"
		IsEqual(_Turns, 4)
	THEN
		CharacterApplyStatus(_Target, LLWEAPONEX_POISONBURST_EXPLODE_4, 0, 1, _Source)
	ELIF "c1"
		IsEqual(_Turns, 3)
	THEN
		CharacterApplyStatus(_Target, LLWEAPONEX_POISONBURST_EXPLODE_3, 0, 1, _Source)
	ELIF "c1"
		IsEqual(_Turns, 2)
	THEN
		CharacterApplyStatus(_Target, LLWEAPONEX_POISONBURST_EXPLODE_2, 0, 1, _Source)
	ELSE
		CharacterApplyStatus(_Target, LLWEAPONEX_POISONBURST_EXPLODE_1, 0, 1, _Source)
	ENDIF
ENDIF


EVENT LLWEAPONEX_SoulBurn_Proc
VARS
	CHARACTER:_Target
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	INT:_Turns
	INT:_TurnsLeft
ON
	FetchCharacterApplyStatusData(_Target, LLWEAPONEX_SOUL_BURN_PROC)
ACTIONS
	Set(_Result, null)
	Set(_Turns, 1)
	CharacterEvent(_Target, "LLWEAPONEX_Commands_StopSoulBurnTick")
IF "c1"
	GetStatusTurns(_Target, LLWEAPONEX_SOUL_BURN1, _TurnsLeft)
THEN
	Add(_Turns, _TurnsLeft)
	Set(_Result, LLWEAPONEX_SOUL_BURN2)
	ListAdd(_RemoveList, LLWEAPONEX_SOUL_BURN1)
ELIF "c1"
	GetStatusTurns(_Target, LLWEAPONEX_SOUL_BURN2, _TurnsLeft)
THEN
	Add(_Turns, _TurnsLeft)
	Set(_Result, LLWEAPONEX_SOUL_BURN3)
	ListAdd(_RemoveList, LLWEAPONEX_SOUL_BURN2)
ELIF "c1"
	GetStatusTurns(_Target, LLWEAPONEX_SOUL_BURN3, _TurnsLeft)
THEN
	Add(_Turns, _TurnsLeft)
	Set(_Result, LLWEAPONEX_SOUL_BURN4)
	ListAdd(_RemoveList, LLWEAPONEX_SOUL_BURN3)
ELIF "c1"
	GetStatusTurns(_Target, LLWEAPONEX_SOUL_BURN4, _TurnsLeft)
THEN
	IF "c1"
		IsGreaterThen(_TurnsLeft, 0)
	THEN
		Add(_Turns, _TurnsLeft)
		Clamp(_Turns, 1, 5)
	ELSE
		Set(_Turns, 1)
	ENDIF
	
	Set(_Result, LLWEAPONEX_SOUL_BURN5)
	ListAdd(_RemoveList, LLWEAPONEX_SOUL_BURN4)
ELIF "!c1"
	CharacterHasStatus(_Target, LLWEAPONEX_SOUL_BURN5)
THEN
	Set(_Result, LLWEAPONEX_SOUL_BURN1)
	Set(_Turns, 1)
ENDIF
IF "!c1"
	IsEqual(_Result, null)
THEN
	CharacterEvent(_Target, "LLWEAPONEX_Commands_StartSoulBurnTick")
ENDIF

RETURN(_RemoveList, _Result, _Turns)
	
//Regress the status
EVENT LLWEAPONEX_SoulBurn_Tick
VARS
	CHARACTER:_Target
	CHARACTER:_Source
	STATUS:_Result
	INT:_Turns
	INT:_TurnsLeft
ON
	OnCharacterStatusRemoved(_Target, LLWEAPONEX_SOUL_BURN_TICK)
ACTIONS
IF "!c1"
	HasFlag(_Target, "LLWEAPONEX_SkipSoulBurnTick")
THEN
	Set(_Result, null)
	Set(_Turns, null)
	IF "c1&c2&c3"
		CharacterHasStatus(_Target, LLWEAPONEX_SOUL_BURN2)
		GetStatusTurns(_Target, LLWEAPONEX_SOUL_BURN2, _TurnsLeft)
		CharacterGetStatusSourceCharacter(_Target, LLWEAPONEX_SOUL_BURN2, _Source)
	THEN
		Set(_Turns, _TurnsLeft)
		Set(_Result, LLWEAPONEX_SOUL_BURN1)
	ELIF "c1&c2&c3"
		CharacterHasStatus(_Target, LLWEAPONEX_SOUL_BURN3)
		GetStatusTurns(_Target, LLWEAPONEX_SOUL_BURN3, _TurnsLeft)
		CharacterGetStatusSourceCharacter(_Target, LLWEAPONEX_SOUL_BURN3, _Source)
	THEN
		Set(_Turns, _TurnsLeft)
		Set(_Result, LLWEAPONEX_SOUL_BURN2)
	ELIF "c1&c2&c3"
		CharacterHasStatus(_Target, LLWEAPONEX_SOUL_BURN4)
		GetStatusTurns(_Target, LLWEAPONEX_SOUL_BURN4, _TurnsLeft)
		CharacterGetStatusSourceCharacter(_Target, LLWEAPONEX_SOUL_BURN4, _Source)
	THEN
		Set(_Turns, _TurnsLeft)
		Set(_Result, LLWEAPONEX_SOUL_BURN3)
	ELIF "c1&c2&c3"
		CharacterHasStatus(_Target, LLWEAPONEX_SOUL_BURN5)
		GetStatusTurns(_Target, LLWEAPONEX_SOUL_BURN5, _TurnsLeft)
		CharacterGetStatusSourceCharacter(_Target, LLWEAPONEX_SOUL_BURN5, _Source)
	THEN
		Set(_Turns, _TurnsLeft)
		Set(_Result, LLWEAPONEX_SOUL_BURN4)
	ENDIF
	IF "!c1&!c2&!c3"
		IsEqual(_Result, null)
		IsEqual(_Turns, null)
		IsEqual(_Source, null)
	THEN
		CharacterApplyStatus(_Target, _Result, _Turns, 1, _Source)
		CharacterEvent(_Target, "LLWEAPONEX_Commands_StartSoulBurnTick")
	ENDIF
ELSE
	//StatusText(_Target, "LLWEAPONEX_SkipSoulBurnTick = true")
ENDIF

EVENT LLWEAPONEX_SoulBurn_Reset
VARS
	CHARACTER:_Character
ON
	OnCharacterStatusRemoved(_Character, LLWEAPONEX_SOUL_BURN1)
	OnDie(_Character, _, _, _)
ACTIONS
IF "c1"
	HasFlag(_Character, "LLWEAPONEX_SkipSoulBurnTick")
THEN
	ClearFlag(_Character, "LLWEAPONEX_SkipSoulBurnTick")
ENDIF