INIT

EVENTS

EVENT LLWEAPONEX_DualShields_SetLevel
VARS
	ITEM:_Shield
	FLOAT:_LevelF
	INT:_Level
	FIXEDSTRING:_Rarity
	STRING:_Str
ON
	OnItemEvent(_Shield, "LLWEAPONEX_Commands_SetDualShieldLevel")
ACTIONS
IF "c1"
	ItemGetStat(_LevelF, _Shield, Level)
THEN
	Cast(_Level, _LevelF)
	SetVar(_Shield, "LeaderLib_ItemLevel", _Level)
	ItemEvent(_Shield, "LLWEAPONEX_Commands_LevelUpCombatShield")
ENDIF
IF "!c1&c2"
	GetVar(_Rarity, _Shield, "LLWEAPONEX_Rarity")
	ItemGetItemType(_Shield, _Rarity)
THEN
	SetVar(_Shield, "LLWEAPONEX_Rarity", _Rarity)
	Print(_Str, "[LLWEAPONEX:DualShields:ItemGetItemType] Dual Shields rarity is [1]", _Rarity)
	SetVar(_Shield, "LeaderLog_Message", _Str)
	ItemEvent(_Shield, "LeaderLog_Commands_Log")
	ItemEvent(_Shield, "LLWEAPONEX_DualShields_RaritySet")
ENDIF

EVENT LLWEAPONEX_DualShields_GetCombatShield
VARS
	ITEM:_Shield
	ITEM:_CombatShield
ON
	OnItemEvent(_Shield, "LLWEAPONEX_DualShields_FindCombatShield")
ACTIONS
IF "c1"
	ItemGetFromInventory(_CombatShield, _Shield, "", "LLWEAPONEX_CombatShield")
THEN
	SetVar(_Shield, "LLWEAPONEX_CombatShield", _CombatShield)
	ItemEvent(_Shield, "LLWEAPONEX_DualShields_CombatShieldFound")
ELSE
	ItemEvent(_Shield, "LLWEAPONEX_DualShields_CombatShieldNotFound")
ENDIF

EVENT LLWEAPONEX_Blunderbuss_Explode_Position
VARS
	CHARACTER:_Character
	FLOAT3:_Pos
	FLOAT:_LevelF
	INT:_Level
ON
	OnCharacterEvent(_Character, "LLWEAPONEX_Blunderbuss_ExplodeAtPosition")
ACTIONS
IF "c1&c2&!c3"
	CharacterGetStat(_LevelF, _Character, Level)
	GetVar(_Pos, _Character, "LLWEAPONEX_Blunderbuss_AttackPosition")
	IsEqual(_Pos, null)
THEN
	Cast(_Level, _LevelF)
	ExplodeAt(_Pos, Projectile_LLWEAPONEX_Blunderbuss_Shot_Explode, _Level, _Character)
ENDIF

EVENT LLWEAPONEX_Blunderbuss_Explode_Character
VARS
	CHARACTER:_Character
	CHARACTER:_Target
	FLOAT:_LevelF
	INT:_Level
ON
	OnCharacterCharacterEvent(_Character, _Target, "LLWEAPONEX_Blunderbuss_ExplodeProjectile")
ACTIONS
	Set(_Level, -1)
IF "c1"
	CharacterGetStat(_LevelF, _Character, Level)
THEN
	Cast(_Level, _LevelF)
ENDIF
	ExplodeAt(_Target, Projectile_LLWEAPONEX_Blunderbuss_Shot_Explode, _Level, _Character)

EVENT LLWEAPONEX_Blunderbuss_Explode_Item
VARS
	CHARACTER:_Character
	ITEM:_Target
	FLOAT:_LevelF
	INT:_Level
ON
	OnCharacterItemEvent(_Character, _Target, "LLWEAPONEX_Blunderbuss_ExplodeProjectile")
ACTIONS
	Set(_Level, -1)
IF "c1"
	CharacterGetStat(_LevelF, _Character, Level)
THEN
	Cast(_Level, _LevelF)
ENDIF
	ExplodeAt(_Target, Projectile_LLWEAPONEX_Blunderbuss_Shot_Explode, _Level, _Character)

EVENT LLWEAPONEX_MagicMissile_BonusMissiles
VARS
	CHARACTER:_Source
	CHARACTER:_TargetChar
	ITEM:_TargetItem
	FLOAT:_LevelF
	INT:_Level
	FLOAT3:_Dir
	INT:_Missile
	SKILL:_MissileSkill
ON
	OnCharacterCharacterEvent(_Source, _TargetChar, "LLWEAPONEX_MagicMissile_FireBonusMissile")
	OnCharacterItemEvent(_Source, _TargetItem, "LLWEAPONEX_MagicMissile_FireBonusMissile")
ACTIONS
	Set(_Level, -1)
	Set(_Missile, 1)
IF "c1"
	CharacterGetStat(_LevelF, _Source, Level)
THEN
	Cast(_Level, _LevelF)
ENDIF
	GetForwardDirection(_Source, _Dir)
	Add(_Dir, {0.0;4.0;0.0})
IF "c1"
	GetVar(_Missile, _Source, "LLWEAPONEX_MagicMissile_Missile1")
THEN
	IF "!c1"
		IsEqual(_TargetChar, null)
	THEN
		ShootLocalProjectileAt(Projectile_LLWEAPONEX_Status_MagicMissile_Bonus1, _Source, _Dir, _TargetChar, _Level, _Source)
	ELIF "!c1"
		IsEqual(_TargetItem, null)
	THEN
		ShootLocalProjectileAt(Projectile_LLWEAPONEX_Status_MagicMissile_Bonus1, _Source, _Dir, _TargetItem, _Level, _Source)
	ENDIF
	SetVar(_Source, "LLWEAPONEX_MagicMissile_Missile1", INT:null)
ENDIF
IF "c1"
	GetVar(_Missile, _Source, "LLWEAPONEX_MagicMissile_Missile2")
THEN
	IF "!c1"
		IsEqual(_TargetChar, null)
	THEN
		ShootLocalProjectileAt(Projectile_LLWEAPONEX_Status_MagicMissile_Bonus2, _Source, _Dir, _TargetChar, _Level, _Source)
	ELIF "!c1"
		IsEqual(_TargetItem, null)
	THEN
		ShootLocalProjectileAt(Projectile_LLWEAPONEX_Status_MagicMissile_Bonus2, _Source, _Dir, _TargetItem, _Level, _Source)
	ENDIF
	SetVar(_Source, "LLWEAPONEX_MagicMissile_Missile2", INT:null)
ENDIF
IF "c1"
	GetVar(_Missile, _Source, "LLWEAPONEX_MagicMissile_Missile3")
THEN
	IF "!c1"
		IsEqual(_TargetChar, null)
	THEN
		ShootLocalProjectileAt(Projectile_LLWEAPONEX_Status_MagicMissile_Bonus1, _Source, _Dir, _TargetChar, _Level, _Source)
	ELIF "!c1"
		IsEqual(_TargetItem, null)
	THEN
		ShootLocalProjectileAt(Projectile_LLWEAPONEX_Status_MagicMissile_Bonus1, _Source, _Dir, _TargetItem, _Level, _Source)
	ENDIF
	SetVar(_Source, "LLWEAPONEX_MagicMissile_Missile3", INT:null)
ENDIF

EVENT LLWEAPONEX_SoulHarvester_DamageBonus
VARS
	CHARACTER:_Target
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	INT:_Turns
	INT:_TurnsLeft
ON
	FetchCharacterApplyStatusData(_Target, LLWEAPONEX_SOULHARVEST_DAMAGE_BONUS_APPLY)
ACTIONS
	Set(_Result, null)
	Set(_Turns, -1)
IF "c1"
	CharacterHasStatus(_Target, LLWEAPONEX_SOULHARVEST_DAMAGE_BONUS1)
THEN
	Set(_Result, LLWEAPONEX_SOULHARVEST_DAMAGE_BONUS2)
	ListAdd(_RemoveList, LLWEAPONEX_SOULHARVEST_DAMAGE_BONUS1)
ELIF "c1"
	CharacterHasStatus(_Target, LLWEAPONEX_SOULHARVEST_DAMAGE_BONUS2)
THEN
	Set(_Result, LLWEAPONEX_SOULHARVEST_DAMAGE_BONUS3)
	ListAdd(_RemoveList, LLWEAPONEX_SOULHARVEST_DAMAGE_BONUS2)
ELIF "c1"
	CharacterHasStatus(_Target, LLWEAPONEX_SOULHARVEST_DAMAGE_BONUS3)
THEN
	Set(_Result, LLWEAPONEX_SOULHARVEST_DAMAGE_BONUS4)
	ListAdd(_RemoveList, LLWEAPONEX_SOULHARVEST_DAMAGE_BONUS3)
ELIF "c1"
	CharacterHasStatus(_Target, LLWEAPONEX_SOULHARVEST_DAMAGE_BONUS4)
THEN
	Set(_Result, LLWEAPONEX_SOULHARVEST_DAMAGE_BONUS5)
	ListAdd(_RemoveList, LLWEAPONEX_SOULHARVEST_DAMAGE_BONUS4)
ELIF "!c1"
	CharacterHasStatus(_Target, LLWEAPONEX_SOULHARVEST_DAMAGE_BONUS5)
THEN
	Set(_Result, LLWEAPONEX_SOULHARVEST_DAMAGE_BONUS1)
ENDIF
IF "!c1"
	IsEqual(_Result, null)
THEN
	CharacterPlayEffect(_Target, "LLWEAPONEX_FX_Status_SoulHarvest_Impact_01", "Dummy_OverheadFX")
ENDIF
	RETURN(_RemoveList, _Result, _Turns)
	
EVENT LLWEAPONEX_AnvilMace_CreateTimerName
VARS
	CHARACTER:_Char
	FLOAT3:_Pos
	STRING:_TimerName
	FLOAT:_x
	FLOAT:_y
	FLOAT:_z
	//FIXEDSTRING:_Debug
ON
	OnCharacterEvent(_Char, "LLWEAPONEX_AnvilMace_CreateTimerName")
ACTIONS
IF "c1&!c2&c3&c4&c5"
	GetVar(_Pos, _Char, "LLWEAPONEX_AnvilMace_AttackPosition")
	IsEqual(_Pos, null)
	GetX(_Pos, _x)
	GetY(_Pos, _y)
	GetZ(_Pos, _z)
THEN
	//Print(_TimerName, "LLWEAPONEX_Timers_AnvilMaceImpact_[1][2][3]", _x, _y, _z)
	Print(_TimerName, "LLWEAPONEX_Timers_AnvilMaceImpact_[1]", _Pos)
	SetVar(_Char, "LLWEAPONEX_AnvilMace_TimerName", _TimerName)
	CharacterEvent(_Char, "LLWEAPONEX_AnvilMace_TimerNameCreated")
	//Cast(_Debug, _TimerName)
	//StatusText(_Char, _Debug)
ENDIF	

EVENT LLWEAPONEX_AnvilMace_Explode_Position
VARS
	CHARACTER:_Char
	FLOAT3:_Pos
	FLOAT:_LevelF
	INT:_Level
ON
	OnCharacterEvent(_Char, "LLWEAPONEX_AnvilMace_ExplodeAtPosition")
ACTIONS
IF "c1&c2&!c3"
	CharacterGetStat(_LevelF, _Char, Level)
	GetVar(_Pos, _Char, "LLWEAPONEX_AnvilMace_AttackPosition")
	IsEqual(_Pos, null)
THEN
	Cast(_Level, _LevelF)
	ExplodeAt(_Pos, Projectile_LLWEAPONEX_AnvilMace_GroundImpact, _Level, _Char)
	//ShootWorldProjectile(Projectile_LLWEAPONEX_AnvilMace_GroundImpact, _Char, _Pos, {0;-1.0;0}, _Level)
ENDIF

EVENT LLWEAPONEX_BattleBook_SpellScroll_Explode_Position
VARS
	CHARACTER:_Char
	FLOAT3:_Pos
	FLOAT:_LevelF
	INT:_Level
	SKILL:_Projectile
	FIXEDSTRING:_Material
ON
	OnCharacterEvent(_Char, "LLWEAPONEX_Battlebooks_SpellScroll_ExplodeSpellAtPosition")
ACTIONS
IF "c1&c2&!c3&c4&!c5"
	CharacterGetStat(_LevelF, _Char, Level)
	GetVar(_Pos, _Char, "LLWEAPONEX_Battlebooks_SpellScroll_AttackPosition")
	IsEqual(_Pos, null)
	GetVar(_Projectile, _Char, "LLWEAPONEX_Battlebooks_SpellScroll_Projectile")
	IsEqual(_Projectile, null)
THEN
	Cast(_Level, _LevelF)
	ExplodeAt(_Pos, _Projectile, _Level, _Char)
	CharacterEvent(_Char, "LLWEAPONEX_Battlebooks_SpellScroll_SpellExplodedAtPosition")
ENDIF
/*
IF "c1"
	GetVar(_Material, _Char, "LLWEAPONEX_Battlebooks_SpellScroll_MaterialOverride")
THEN
	SetMaterial(_Char, _Material, -1, 0, 0, 0, 0, 0, 1)
ENDIF
*/