INIT
	INT:%LLWEAPONEX_KevinRechargeTime = 1
	FLOAT3:%LLWEAPONEX_ProjectileOffset = {0;2;0}
EVENTS

EVENT LLWEAPONEX_ReduceKevinEnergy
VARS
	CHARACTER:_Player
	ITEM:_Kevin
	INT:_Current
	INT:_Max
ON
	OnCharacterStatusAttempt(_Player, LLWEAPONEX_KEVIN_RETURNED)
ACTIONS
	SetVar(_Player, "LeaderLib_Timer_CancelByEventEvent", STRING:"LLWEAPONEX_Timers_KevinReturnFailsafe")
	CharacterEvent(_Player, "LeaderLib_Commands_CancelObjectTimer")
	
IF "!c1&c2&c3&c4"
	HasFlag(_Player, "LLWEAPONEX_Kevin_IgnoreEnergy")
	ItemGetFromInventory(_Kevin, _Player, "", "LLWEAPONEX_KevinThePetRock", 0)
	GetVar(_Current, _Kevin, "LLWEAPONEX_Kevin_CurrentEnergy")
	GetVar(_Max, _Kevin, "LLWEAPONEX_Kevin_MaxEnergy")
THEN
	IF "c1"
		IsGreaterThen(_Current, 0)
	THEN
		Subtract(_Current, 1)
		SetVar(_Kevin, "LLWEAPONEX_Kevin_CurrentEnergy", _Current)
	ENDIF
	IF "c1|c2"
		IsLessThen(_Current, 0)
		IsEqual(_Current, 0)
	THEN
		Set(_Current, INT:0)
		SetVar(_Kevin, "LLWEAPONEX_Kevin_CurrentEnergy", _Current)
		Multiply(_Max, %LLWEAPONEX_KevinRechargeTime)
		CharacterApplyStatus(_Player, LLWEAPONEX_KEVIN_EXAUSTED_INFO, _Max, 1)
		//CharacterApplyStatus(_Player, LLWEAPONEX_KEVIN_EXAUSTED_INFO, 1, 1)
		CharacterRemoveStatus(_Player, LLWEAPONEX_KEVIN_RECHARGE)
		CharacterItemEvent(_Player, _Kevin, "LLWEAPONEX_KevinIsExausted")
	ELIF "!c1"
		CharacterHasStatus(_Player, LLWEAPONEX_KEVIN_RECHARGE)
	THEN
		CharacterApplyStatus(_Player, LLWEAPONEX_KEVIN_RECHARGE, %LLWEAPONEX_KevinRechargeTime)
	ENDIF
	CharacterItemEvent(_Player, _Kevin, "LLWEAPONEX_ReducedKevinEnergy")
ENDIF

EVENT LLWEAPONEX_Kevin_Recharge
VARS
	CHARACTER:_Player
	ITEM:_Kevin
	INT:_Current
	INT:_Max
ON
	OnCharacterStatusRemoved(_Player, LLWEAPONEX_KEVIN_RECHARGE)
ACTIONS
IF "!c1&!c2&c3"
	HasFlag(_Player, "LLWEAPONEX_KevinIsMoving")
	CharacterHasStatus(_Player, LLWEAPONEX_KEVIN_EXAUSTED_INFO)
	ItemGetFromInventory(_Kevin, _Player, "", "LLWEAPONEX_KevinThePetRock", 0)
THEN
	IF "c1&c2"
		GetVar(_Current, _Kevin, "LLWEAPONEX_Kevin_CurrentEnergy")
		GetVar(_Max, _Kevin, "LLWEAPONEX_Kevin_MaxEnergy")
	THEN
		Add(_Current, 1)
		SetVar(_Kevin, "LLWEAPONEX_Kevin_CurrentEnergy", _Current)
		IF "c1&c2"
			IsGreaterThen(_Current, _Max)
			IsEqual(_Current, _Max)
		THEN
			Set(_Current, _Max)
			SetVar(_Kevin, "LLWEAPONEX_Kevin_CurrentEnergy", _Current)
		ENDIF
		IF "c1"
			IsLessThen(_Current, _Max)
		THEN
			CharacterApplyStatus(_Player, LLWEAPONEX_KEVIN_RECHARGE, %LLWEAPONEX_KevinRechargeTime)
		ENDIF
	ENDIF
	CharacterItemEvent(_Player, _Kevin, "LLWEAPONEX_RechargeComplete")
ENDIF

EVENT LLWEAPONEX_Kevin_Exausted_Recharged
VARS
	CHARACTER:_Player
	ITEM:_Kevin
	INT:_Current
	INT:_Max
ON
	OnCharacterStatusRemoved(_Player, LLWEAPONEX_KEVIN_EXAUSTED_INFO)
ACTIONS
IF "!c1&c2"
	HasFlag(_Player, "LLWEAPONEX_KevinIsMoving")
	ItemGetFromInventory(_Kevin, _Player, "", "LLWEAPONEX_KevinThePetRock", 0)
THEN
	IF "c1&c2"
		GetVar(_Current, _Kevin, "LLWEAPONEX_Kevin_CurrentEnergy")
		GetVar(_Max, _Kevin, "LLWEAPONEX_Kevin_MaxEnergy")
	THEN
		Set(_Current, _Max)
		SetVar(_Kevin, "LLWEAPONEX_Kevin_CurrentEnergy", _Current)
	ENDIF
	CharacterItemEvent(_Player, _Kevin, "LLWEAPONEX_KevinIsRestored")
ENDIF

EVENT LLWEAPONEX_ReturnKevin
VARS
	CHARACTER:_Target
	CHARACTER:_Player
	FLOAT3:_Pos
	FLOAT3:_AddPos
	FLOAT:_PosY
ON
	OnCharacterCharacterEvent(_Player, _Target, "LLWEAPONEX_Events_ReturnKevin")
ACTIONS
/*
IF "c1&c2"
	GetPosition(_Target, _Pos)
	GetY(_Pos, _PosY)
THEN
	Add(_PosY, 2.0)
	SetY(_Pos, _PosY)
	ShootWorldProjectileAt(Projectile_LLWEAPONEX_Throw_Rock_Kevin_Effect, _Target, _Pos, _Player, 1)
ENDIF
*/
	SetVar(_Player, "LeaderLib_Timer_CompleteEvent", STRING:"LLWEAPONEX_Timers_KevinReturnFailsafe")
	SetVar(_Player, "LeaderLib_Timer_Delay", INT:1250)
	CharacterEvent(_Player, "LeaderLib_Commands_StartObjectTimer")
	ShootLocalProjectileAt(Projectile_LLWEAPONEX_Throw_Rock_Kevin_Effect, _Target, %LLWEAPONEX_ProjectileOffset, _Player, 1, _Player)
	
EVENT LLWEAPONEX_ReturnProjectile
VARS
	CHARACTER:_Caster
	ITEM:_OriginItem
	CHARACTER:_OriginCharacter
	FLOAT3:_Pos
	FLOAT3:_Offset
	STRING:_SkillStr
	SKILL:_Skill
	FLOAT:_LevelF
	INT:_Level
ON
	OnCharacterItemEvent(_Caster, _OriginItem, "LLWEAPONEX_Events_ShootReturnSkill")
	OnCharacterCharacterEvent(_Caster, _OriginCharacter, "LLWEAPONEX_Events_ShootReturnSkill")
ACTIONS
IF "c1&c2"
	GetVar(_SkillStr, _Caster, "LLWEAPONEX_ReturnSkill")
	CharacterGetStat(_LevelF, _Caster, Level)
THEN
	Cast(_Level, _LevelF)
	//Workaround for lack of a STRING->SKILL Cast
	IF "c1"
		IsEqual(_SkillStr, "Projectile_LLWEAPONEX_ShieldToss_Returned")
	THEN
		Set(_Skill, Projectile_LLWEAPONEX_ShieldToss_Returned)
	ENDIF
	IF "!c1"
		IsEqual(_OriginCharacter, null)
	THEN
		IF "c1&c2&!c3"
			IsEqual(_OriginCharacter, _Caster)
			GetVar(_Pos, _Caster, "LLWEAPONEX_ReturnSkillFallbackPosition")
			IsEqual(_Pos, null)
		THEN
			SetVar(_Caster, "LLWEAPONEX_ReturnSkillFallbackPosition", FLOAT3:null)
			Add(_Pos, {0.0;0.20;0.0})
			ShootWorldProjectileAt(_Skill, CHARACTER:null, _Pos, _Caster, _Level)
		ELIF "!c1"
			IsEqual(_OriginCharacter, _Caster)
		THEN
			ShootLocalProjectileAt(_Skill, _OriginCharacter, %LLWEAPONEX_ProjectileOffset, _Caster, _Level, _Caster)
		ENDIF
	ELIF "!c1"
		IsEqual(_OriginItem, null)
	THEN
		ShootLocalProjectileAt(_Skill, _OriginItem, %LLWEAPONEX_ProjectileOffset, _Caster, _Level, _Caster)
	ENDIF
ENDIF

EVENT LLWEAPONEX_Throwing_BalrinAxeBonusDamage
VARS
	CHARACTER:_Character
	CHARACTER:_Source
	FLOAT:_LevelF
	INT:_Level
ON
	OnCharacterStatusApplied(_Character, LLWEAPONEX_BALRINAXE_DEBUFF)
ACTIONS
IF "c1"
	CharacterGetStatusSourceCharacter(_Character, LLWEAPONEX_BALRINAXE_DEBUFF, _Source)
THEN
	IF "c1"
		CharacterGetStat(_LevelF, _Source, Level)
	THEN
		Cast(_Level, _LevelF)
	ENDIF
	ExplodeAt(_Character, Projectile_LLWEAPONEX_Status_BalrinDebuff_Damage, _Level, _Source)
ENDIF

EVENT LLWEAPONEX_Throwing_TossCharacter
VARS
    CHARACTER:_Source
	CHARACTER:_TargetChar
	
	FLOAT:_LevelF
	INT:_Level	
	FLOAT:_StrengthF
	//INT:_Strength
	
	FLOAT:_StrengthDistMult
	FLOAT:_Weight
	
    FLOAT3:_Dir
    FLOAT3:_Forward
    FLOAT3:_Offset
    FLOAT3:_Pos
	
	FLOAT3:_DebugDir
	FLOAT3:_DebugPos
	STRING:_Str
ON
    OnCharacterCharacterEvent(_Source, _TargetChar, "LLWEAPONEX_Throwing_TossObject")
ACTIONS
	Set(_StrengthF, 10.0)
	Set(_LevelF, 1.0)
	Set(_Weight, 0.0)
	Set(_TossSkill, 0.0)

	IF "c1|c2|c3"
		CharacterGetStat(_LevelF, _Source, Level)
		CharacterGetStat(_StrengthF, _Source, Strength)
		GetPosition(_TargetChar, _Pos)
	THEN
		Cast(_Level, _LevelF)
		//Cast(_Strength, _StrengthF)
	ENDIF
	IF "c1"
		CharacterGetStat(_Weight, _Source, Weight)
	THEN
		IF "c1"
			IsGreaterThen(_Weight, 500.0)
		THEN
	ENDIF
	
	Set(_Offset, {0;1.0;0})
	
	GetDirection(_Source, _TargetChar, _Dir)
	
	Set(_StrengthDistMult, _StrengthF)
	Divide(_StrengthDistMult, 4)
	Clamp(_StrengthDistMult, 2.0, 10.0)
	
	GetForwardDirection(_Source, _Forward)
	Multiply(_Forward, _StrengthDistMult)
	Add(_Pos, _Forward)
	
	//Make sure the toss position is valid
	IF "c1"
		FindPosition(_Pos, _TargetChar, 0, 0, 0.0, _StrengthDistMult, -1, _TargetChar, -1, -1, -1, -1, null, 0, _Pos)
		//FindValidPosition(_Pos, _StrengthDistMult, _TargetChar)
	THEN
		ShootLocalProjectileAt(Projectile_LLWEAPONEX_Tossed, _TargetChar, _Offset, _Pos, _Level, _TargetChar)
	ELSE
		//Outside of AI grid/etc, don't launch
		StatusText(_TargetChar, "<font color='#FF0000'>Toss Failed!</font>")
	ENDIF
	
	IF "c1"
		GetPosition(_Source, _DebugPos)
	THEN
	ENDIF
	GetForwardDirection(_Source, _DebugDir)
	Print(_Str, "[LLWEAPONEX:Debug] Launching target to position [1] from [2]. Source Dir: [3] StrDistMult: [4] Str: [5].", _Pos, _DebugPos, _DebugDir, _StrengthDistMult, _StrengthF)
	SetVar(_Source, "LeaderLog_Message", _Str)
	CharacterEvent(_Source, "LeaderLog_Commands_Log")
	
EVENT LLWEAPONEX_Throwing_TossItem
VARS
    CHARACTER:_Source
    ITEM:_TargetItem
	
	FLOAT:_LevelF
	INT:_Level
	
    FLOAT3:_Dir
    FLOAT3:_Forward
    FLOAT3:_Offset
    FLOAT3:_Pos
	FLOAT:_Dist
	
	FLOAT3:_DebugDir
	FLOAT3:_DebugPos
	STRING:_Str
ON
    OnCharacterItemEvent(_Source, _TargetItem, "LLWEAPONEX_Throwing_TossObject")
ACTIONS
	IF "c1"
		CharacterGetStat(_LevelF, _Source, Level)
	THEN
		Cast(_Level, _LevelF)
	ENDIF
	IF "c1"
		GetPosition(_TargetItem, _Pos)
	THEN
		GetDirection(_Source, _TargetItem, _Dir, _Dist)
	ENDIF
	Set(_Offset, {0;1;0})
	Add(_Dist, 2)
	Multiply(_Dist, 4)
	GetForwardDirection(_Source, _Forward)
	Multiply(_Forward, _Dist)
	Add(_Pos, _Forward)
	
	ShootLocalProjectileAt(Projectile_LLWEAPONEX_Tossed, _TargetItem, _Offset, _Pos, _Level, _TargetItem)
	
	IF "c1"
		GetPosition(_Source, _DebugPos)
	THEN
	ENDIF
	GetForwardDirection(_Source, _DebugDir)
	Print(_Str, "[LLWEAPONEX:Debug] Launching target to position [1] from [2]. Source Dir: [3] Dist: [4].", _Pos, _DebugPos, _DebugDir, _Dist)
	SetVar(_Source, "LeaderLog_Message", _Str)
	CharacterEvent(_Source, "LeaderLog_Commands_Log")

EVENT LLWEAPONEX_Throwing_TossLanded_Char
VARS
    CHARACTER:_Source
	CHARACTER:_TargetChar
	FLOAT:_Weight
	SKILL:_TossSkill
	FLOAT:_LevelF
	INT:_Level	
ON
    OnCharacterCharacterEvent(_Source, _TargetChar, "LLWEAPONEX_Throwing_TossObject_Landed")
ACTIONS
	Set(_Weight, 0.0)
	Set(_LevelF, 1.0)
	IF "c1|c2"
		CharacterGetStat(_Weight, _TargetChar, Weight)
		CharacterGetStat(_LevelF, _Source, Level)
	THEN
	ENDIF
	Cast(_Level, _LevelF)
	IF "c1"
		IsGreaterThen(_Weight, 500.0)
	THEN
		Set(_TossSkill, Projectile_LLWEAPONEX_Status_Tossed_Damage_Heavy)
	ELIF "c1"
		IsGreaterThen(_Weight, 250.0)
	THEN
		Set(_TossSkill, Projectile_LLWEAPONEX_Status_Tossed_Damage_Medium)
	ELSE
		Set(_TossSkill, Projectile_LLWEAPONEX_Status_Tossed_Damage_Light)
	ENDIF

	ExplodeAt(_TargetChar, _TossSkill, _Level, _Source)

	Print(_Str, "[LLWEAPONEX:LLWEAPONEX_Throwing_TossObject_Landed] Character weight is ([1]), exploding skill is ([2]).", _Weight, _TossSkill)
	SetVar(_Source, "LeaderLog_Message", _Str)
	CharacterEvent(_Source, "LeaderLog_Commands_Log")

EVENT LLWEAPONEX_Throwing_TossLanded_Item
VARS
    CHARACTER:_Source
	ITEM:_TargetItem
	FLOAT:_Weight
	SKILL:_TossSkill
	FLOAT:_LevelF
	INT:_Level	
ON
    OnCharacterItemEvent(_Source, _TargetItem, "LLWEAPONEX_Throwing_TossObject_Landed")
ACTIONS
	Set(_Weight, 0.0)
	Set(_LevelF, 1.0)
	IF "c1|c2"
		ItemGetStat(_Weight, _TargetItem, Weight)
		CharacterGetStat(_LevelF, _Source, Level)
	THEN
	ENDIF
	Cast(_Level, _LevelF)
	IF "c1"
		IsGreaterThen(_Weight, 500.0)
	THEN
		Set(_TossSkill, Projectile_LLWEAPONEX_Status_Tossed_Damage_Heavy)
	ELIF "c1"
		IsGreaterThen(_Weight, 250.0)
	THEN
		Set(_TossSkill, Projectile_LLWEAPONEX_Status_Tossed_Damage_Medium)
	ELSE
		Set(_TossSkill, Projectile_LLWEAPONEX_Status_Tossed_Damage_Light)
	ENDIF

	ExplodeAt(_TargetItem, _TossSkill, _Level, _Source)

	Print(_Str, "[LLWEAPONEX:LLWEAPONEX_Throwing_TossObject_Landed] Item weight is ([1]), exploding skill is ([2]).", _Weight, _TossSkill)
	SetVar(_Source, "LeaderLog_Message", _Str)
	CharacterEvent(_Source, "LeaderLog_Commands_Log")