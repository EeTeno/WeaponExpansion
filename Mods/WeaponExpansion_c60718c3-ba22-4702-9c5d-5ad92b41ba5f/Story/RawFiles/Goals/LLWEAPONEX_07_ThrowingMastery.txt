Version 1
SubGoalCombiner SGC_AND
INITSECTION

LLWEAPONEX_ThrowingMastery_InitSettings();
KBSECTION
//REGION SETTINGS
PROC
LLWEAPONEX_ThrowingMastery_InitSettings()
THEN
//Throwing
DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_ThrowingAbility", "<font color='#40E0D0'>Throwing Ability</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_ThrowingAbility", 0, "<font color='#FFEAEA'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_ThrowingAbility", 1, "<font color='#FF9D9D'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_ThrowingAbility", 2, "<font color='#F56CA3'>Journeyman</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_ThrowingAbility", 3, "<font color='#F56C8C'>Expert</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_ThrowingAbility", 4, "<font color='#FF3376'>Master</font>");

LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_ThrowingAbility", "LLWEAPONEX_WM_ThrowingAbility_Exp", "LLWEAPONEX_WM_ThrowingAbility_Level");

DB_LLWEAPONEX_WeaponMastery_SkillProgression("LLWEAPONEX_ThrowingAbility", 1, "ThrowWeapon", "Any");
DB_LLWEAPONEX_WeaponMastery_Skills("LLWEAPONEX_ThrowingAbility", "ThrowWeapon", "Projectile_LLWEAPONEX_ThrowWeapon");
//END_REGION

//REGION GAIN_MASTERY
/*
IF
CharacterUsedSkill(_Player, _Skill, _, _)
AND
DB_LLWEAPONEX_ThrowingMastery_ThrowingSkills(_Group, _Skll)
AND
DB_IsPlayer(_Player)
THEN
LLWEAPONEX_WeaponMastery_AddExperience(_Player, "LLWEAPONEX_Throwing", 50);
*/
PROC
LLWEAPONEX_WeaponMastery_MasteryInitialized((CHARACTERGUID)_Player, "LLWEAPONEX_ThrowingAbility", (INTEGER)_Level)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryVariables("LLWEAPONEX_ThrowingAbility", _CurrentXPVar, _LevelVar, _EnabledFlag)
THEN
DB_LLWEAPONEX_WeaponMastery_PlayerData_PermanentMasteries(_Player, "LLWEAPONEX_ThrowingAbility", _EnabledFlag);
//END_REGION

//REGION THROWING_SKILL_USE_LISTEN
QRY
LLWEAPONEX_ThrowingMastery_QRY_ItemIsThrowingItem((ITEMGUID)_Item)
AND
IsTagged(_Item, "GRENADES", _x1)
AND
IsTagged(_Item, "LLWEAPONEX_Throwing", _x2)
AND
IntegerSum(_x1, _x2, _IsThrowing)
AND
_IsThrowing > 0
THEN
DB_NOOP(1);

PROC
ProcProcessUseOfItem((CHARACTERGUID)_Player, (ITEMGUID)_Item, (INTEGER)_RequestID)
AND
NOT DB_CustomUseItemResponse(_Player, _Item, 0)
AND
DB_IsPlayer(_Player)
AND
LLWEAPONEX_ThrowingMastery_QRY_ItemIsThrowingItem(_Item)
THEN
DB_LLWEAPONEX_ThrowingMastery_Temp_ListenForSkill(_Player, _Item);

IF
CharacterUsedSkillOnTarget(_Player, _Target, _Skill, _, _)
AND
DB_LLWEAPONEX_ThrowingMastery_Temp_ListenForSkill(_Player, _Item)
THEN
LLWEAPONEX_ThrowingMastery_OnThrowingSkillUsedOnTarget(_Player, _Target, _Item, _Skill);

PROC
LLWEAPONEX_ThrowingMastery_OnThrowingSkillUsedOnTarget((CHARACTERGUID)_Player, (GUIDSTRING)_Tardet, (ITEMGUID)_Item, (STRING)_Skill)
THEN
DB_NOOP(1);

IF
SkillCast(_Player, _Skill, _, _)
AND
DB_LLWEAPONEX_ThrowingMastery_Temp_ListenForSkill(_Player, _Item)
THEN
NOT DB_LLWEAPONEX_ThrowingMastery_Temp_ListenForSkill(_Player, _Item);
LLWEAPONEX_ThrowingMastery_AddExperience(_Player);
LLWEAPONEX_ThrowingMastery_OnThrowingItemUsed(_Player, _Item, _Skill);

PROC
LLWEAPONEX_ThrowingMastery_OnThrowingItemUsed((CHARACTERGUID)_Player, (ITEMGUID)_Item, (STRING)_Skill)
THEN
DB_NOOP(1);

//Cancelled Throwing
IF
CharacterStoppedUsingItem(_Player, _Item)
AND
DB_LLWEAPONEX_ThrowingMastery_Temp_ListenForSkill(_Player, _Item)
THEN
NOT DB_LLWEAPONEX_ThrowingMastery_Temp_ListenForSkill(_Player, _Item);
//END_REGION

//REGION ADD_XP
QRY
LLWEAPONEX_ThrowingMastery_QRY_GetThrowingExperienceValue((CHARACTERGUID)_Player)
AND
DB_LLWEAPONEX_WeaponMastery_PlayerData_Experience(_Player, _WeaponType, 0, _Experience)
THEN
DB_LLWEAPONEX_ThrowingMastery_Temp_ExperienceValue(_Player, 2);

QRY
LLWEAPONEX_ThrowingMastery_QRY_GetThrowingExperienceValue((CHARACTERGUID)_Player)
AND
NOT DB_LLWEAPONEX_ThrowingMastery_Temp_ExperienceValue(_Player, _)
THEN
DB_LLWEAPONEX_ThrowingMastery_Temp_ExperienceValue(_Player, 1);

PROC
LLWEAPONEX_ThrowingMastery_AddExperience((CHARACTERGUID)_Player)
AND
LLWEAPONEX_WeaponMastery_QRY_BelowMaxLevel(_Player, "LLWEAPONEX_ThrowingAbility")
AND
LLWEAPONEX_ThrowingMastery_QRY_GetThrowingExperienceValue(_Player)
AND
DB_LLWEAPONEX_ThrowingMastery_Temp_ExperienceValue(_Player, _Val)
THEN
NOT DB_LLWEAPONEX_ThrowingMastery_Temp_ExperienceValue(_Player, _Val);
LLWEAPONEX_WeaponMastery_AddExperienceForWeaponType(_Player, "LLWEAPONEX_ThrowingAbility", _Val);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LLWEAPONEX_00_PostCC"