Version 1
SubGoalCombiner SGC_AND
INITSECTION
LLWEAPONEX_WeaponMastery_InitSettings();
KBSECTION

//REGION REGISTER
PROC
LLWEAPONEX_WeaponMastery_AddMastery((STRING)_WeaponType, (STRING)_CurrentXPVar, (STRING)_LevelVar)
AND
StringConcatenate(_WeaponType, "_Enabled", _EnabledFlag)
THEN
LLWEAPONEX_WeaponMastery_AddMastery(_WeaponType, _CurrentXPVar, _LevelVar, _EnabledFlag);

PROC
LLWEAPONEX_WeaponMastery_AddMastery((STRING)_WeaponType, (STRING)_CurrentXPVar, (STRING)_LevelVar, (STRING)_EnabledFlag)
THEN
DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _LevelVar, _EnabledFlag);

//Auto-generate "mastery level unlocked" tags for skillbooks and mastery skills.
PROC
LLWEAPONEX_WeaponMastery_AddMastery((STRING)_WeaponType, (STRING)_CurrentXPVar, (STRING)_LevelVar, (STRING)_EnabledFlag)
THEN
LLWEAPONEX_WeaponMastery_Internal_AddMasteryTag(_WeaponType, 1);
LLWEAPONEX_WeaponMastery_Internal_AddMasteryTag(_WeaponType, 2);
LLWEAPONEX_WeaponMastery_Internal_AddMasteryTag(_WeaponType, 3);

PROC
LLWEAPONEX_WeaponMastery_Internal_AddMasteryTag((STRING)_WeaponType, (INTEGER)_Level)
AND
NOT DB_LLWEAPONEX_WeaponMastery_MasteryLevelTags(_WeaponType, _Level, _)
AND
IntegertoString(_Level, _LevelStr)
AND
StringConcatenate(_WeaponType, "_Mastery", _Str)
AND
StringConcatenate(_Str, _LevelStr, _UnlockedMasteryLevelTag)
THEN
DB_LLWEAPONEX_WeaponMastery_MasteryLevelTags(_WeaponType, _Level, _UnlockedMasteryLevelTag);
LeaderLog_Log("DEBUG", "[LLWEAPONEX_01_WeaponMastery:AddMastery] Created mastery level tag. ",_WeaponType,"  ",_UnlockedMasteryLevelTag);
//END_REGION

//REGION SETTINGS

PROC
LLWEAPONEX_WeaponMastery_InitSettings()
THEN
//DB_LLWEAPONEX_WeaponMastery_BonusStatus(_Level, _Status)
DB_LLWEAPONEX_WeaponMastery_BonusStatus(1, "LLWEAPONEX_MASTERYBONUS1");
DB_LLWEAPONEX_WeaponMastery_BonusStatus(2, "LLWEAPONEX_MASTERYBONUS2");
DB_LLWEAPONEX_WeaponMastery_BonusStatus(3, "LLWEAPONEX_MASTERYBONUS3");
DB_LLWEAPONEX_WeaponMastery_BonusStatus(4, "LLWEAPONEX_MASTERYBONUS4");

PROC
LLWEAPONEX_WeaponMastery_InitSettings()
THEN
DB_LLWEAPONEX_WeaponMastery_MasteryCap(3);

DB_LLWEAPONEX_WeaponMastery_ActCaps("TUT_Tutorial_A", 1);
DB_LLWEAPONEX_WeaponMastery_ActCaps("FJ_FortJoy_Main", 1);
DB_LLWEAPONEX_WeaponMastery_ActCaps("LV_HoE_Main", 1);
DB_LLWEAPONEX_WeaponMastery_ActCaps("RC_Main", 1);
DB_LLWEAPONEX_WeaponMastery_ActCaps("CoS_Main", 2);
DB_LLWEAPONEX_WeaponMastery_ActCaps("Arx_Main", 3);
DB_LLWEAPONEX_WeaponMastery_ActCaps("Arx_Endgame", 3);
LLWEAPONEX_WeaponMastery_Internal_InitMasteries();


QRY
LLWEAPONEX_WeaponMastery_QRY_Internal_UseDefaultActCap((STRING)_Region)
AND
DB_LLWEAPONEX_WeaponMastery_ActCaps(_Region, 1)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_Internal_UseDefaultActCap((STRING)_Region)
AND
NOT DB_LLWEAPONEX_WeaponMastery_ActCaps(_Region, _)
THEN
DB_NOOP(1);

PROC
LLWEAPONEX_WeaponMastery_InitSettings()
AND
NOT DB_GlobalFlag("LLWEAPONEX_WeaponMastery_InitializedMaxExperience")
AND
DB_CurrentLevel(_Region)
THEN
LLWEAPONEX_WeaponMastery_InitMaxExperience(_Region);
GlobalSetFlag("LLWEAPONEX_WeaponMastery_InitializedMaxExperience");

PROC
LLWEAPONEX_WeaponMastery_InitMaxExperience((STRING)_Region)
AND
LLWEAPONEX_WeaponMastery_QRY_Internal_UseDefaultActCap(_Region) // Either this Region is 1, or not in the DB
THEN
SysClear("DB_LLWEAPONEX_WeaponMastery_MaxExperience", 2);
//Current Level, Total "Hits" to Next Level
DB_LLWEAPONEX_WeaponMastery_MaxExperience(0, 20);
DB_LLWEAPONEX_WeaponMastery_MaxExperience(1, 80);
DB_LLWEAPONEX_WeaponMastery_MaxExperience(2, 320);
DB_LLWEAPONEX_WeaponMastery_MaxExperience(3, 600);

//Act 3 start
PROC
LLWEAPONEX_WeaponMastery_InitMaxExperience((STRING)_Region)
AND
NOT LLWEAPONEX_WeaponMastery_QRY_Internal_UseDefaultActCap(_Region)
AND
DB_LLWEAPONEX_WeaponMastery_ActCaps(_Region, 2)
THEN
SysClear("DB_LLWEAPONEX_WeaponMastery_MaxExperience", 2);
DB_LLWEAPONEX_WeaponMastery_MaxExperience(0, 20);
DB_LLWEAPONEX_WeaponMastery_MaxExperience(1, 50);
DB_LLWEAPONEX_WeaponMastery_MaxExperience(2, 250);
DB_LLWEAPONEX_WeaponMastery_MaxExperience(3, 400);

//Act 4 start
PROC
LLWEAPONEX_WeaponMastery_InitMaxExperience((STRING)_Region)
AND
NOT LLWEAPONEX_WeaponMastery_QRY_Internal_UseDefaultActCap(_Region)
AND
DB_LLWEAPONEX_WeaponMastery_ActCaps(_Region, 3)
THEN
SysClear("DB_LLWEAPONEX_WeaponMastery_MaxExperience", 2);
DB_LLWEAPONEX_WeaponMastery_MaxExperience(0, 10);
DB_LLWEAPONEX_WeaponMastery_MaxExperience(1, 20);
DB_LLWEAPONEX_WeaponMastery_MaxExperience(2, 60);
DB_LLWEAPONEX_WeaponMastery_MaxExperience(3, 100);

//Max possible level attainable by players
//DB_LLWEAPONEX_WeaponMastery_Softcap(2);

PROC
LLWEAPONEX_WeaponMastery_Internal_InitMasteries()
THEN
DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_Banner", "<font color='#00FF7F'>Banner Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Banner", 0, "<font color='#FDFFEA'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Banner", 1, "<font color='#DDFFB3'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Banner", 2, "<font color='#94E963'>Journeyman Bannerman</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Banner", 3, "<font color='#52D43A'>Expert Bannerkeeper</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Banner", 4, "<font color='#28FF00'>Banner Lord</font>");

LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_Banner", "LLWEAPONEX_WM_Banner_Exp", "LLWEAPONEX_WM_Banner_Level");

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_DualShields", "<font color='#D9D9D9'>Dual Shields Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_DualShields", 0, "<font color='#FDFFEA'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_DualShields", 1, "<font color='#FFDA9E'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_DualShields", 2, "<font color='#FFC973'>Journeyman Dual Shieldsman</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_DualShields", 3, "<font color='#FFB94A'>Expert Dual Shieldsman</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_DualShields", 4, "<font color='#FF9E03'>Shieldmaster Lord</font>");

//DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_DualShields", 1, "Cover", "Any");
//DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_DualShields", 2, "ShieldPrison", "Any");
//DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_DualShields", 3, "IronMaiden", "Any");
DB_LLWEAPONEX_WeaponMastery_Skills("LLWEAPONEX_DualShields", "Cover", "Target_LLWEAPONEX_ShieldCover");
DB_LLWEAPONEX_WeaponMastery_Skills("LLWEAPONEX_DualShields", "ShieldPrison", "Target_LLWEAPONEX_ShieldPrison");
DB_LLWEAPONEX_WeaponMastery_Skills("LLWEAPONEX_DualShields", "IronMaiden", "Target_LLWEAPONEX_IronMaiden");

//DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _LevelVar, _EnabledFlag)
LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_DualShields", "LLWEAPONEX_WM_DualShields_Exp", "LLWEAPONEX_WM_DualShields_Level");

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_Firearm", "<font color='#FD8826'>Firearm Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Firearm", 0, "<font color='#FDC89B'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Firearm", 1, "<font color='#FBBC7F'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Firearm", 2, "<font color='#F5A36C'>Journeyman Firearm Enthusiast</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Firearm", 3, "<font color='#F49C4E'>Expert Firearm Lunatic</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Firearm", 4, "<font color='#FF9D33'>Master of Firearms, Destruction Supreme</font>");

LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_Firearm", "LLWEAPONEX_WM_Firearm_Exp", "LLWEAPONEX_WM_Firearm_Level");

//DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_Firearm", 1, "ElementalBullets", "Any");
//DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_Firearm", 2, "Blunderbuss_Cannonball", "Any");
DB_LLWEAPONEX_WeaponMastery_SkillRequirements("LLWEAPONEX_Firearm", "Blunderbuss_Cannonball", "LLWEAPONEX_BlunderbussEquipped", "Flag");
DB_LLWEAPONEX_WeaponMastery_Skills("LLWEAPONEX_Firearm", "ElementalBullets", "Target_LLWEAPONEX_ElementalBullets");
DB_LLWEAPONEX_WeaponMastery_Skills("LLWEAPONEX_Firearm", "Blunderbuss_Cannonball", "Zone_LLWEAPONEX_Blunderbuss_Cannonball");
//DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_Firearm", 1, "Blunderbuss_LaunchDud", "Any");
//DB_LLWEAPONEX_WeaponMastery_SkillRequirements("LLWEAPONEX_Firearm", "Blunderbuss_LaunchDud", "LLWEAPONEX_BlunderbussEquipped", "Flag");
//DB_LLWEAPONEX_WeaponMastery_Skills("LLWEAPONEX_Firearm", "Blunderbuss_LaunchDud", "Projectile_LLWEAPONEX_Blunderbuss_LaunchDud");

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_Greatbow", "<font color='#00FF7F'>Greatbow Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Greatbow", 0, "<font color='#FDFFEA'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Greatbow", 1, "<font color='#DDFFB3'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Greatbow", 2, "<font color='#94E963'>Journeyman Slayer</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Greatbow", 3, "<font color='#52D43A'>Expert Great Slayer</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Greatbow", 4, "<font color='#28FF00'>Master Dragon Slayer</font>");

//DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _LevelVar, _EnabledFlag)
LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_Greatbow", "LLWEAPONEX_WM_Greatbow_Exp", "LLWEAPONEX_WM_Greatbow_Level");
//Which skill are unlocked at specific mastery levels
//DB_LLWEAPONEX_WeaponMastery_Progression(_WeaponType, _Level, _SkillID, _Type)
//DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_Greatbow", 0, "PiercingShot", "Any");
//DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_Greatbow", 1, "KnockbackShot", "Any");
//DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_Greatbow", 2, "FutureBarrage", "Any");

DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "PiercingShot", "DWARF",   1, "Projectile_LLWEAPONEX_Greatbow_PiercingShot_Dwarf_Female");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "PiercingShot", "DWARF",   0, "Projectile_LLWEAPONEX_Greatbow_PiercingShot_Dwarf_Male");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "PiercingShot", "ELF",     1, "Projectile_LLWEAPONEX_Greatbow_PiercingShot_Elf_Female");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "PiercingShot", "ELF",     0, "Projectile_LLWEAPONEX_Greatbow_PiercingShot_Elf_Male");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "PiercingShot", "HUMAN",   1, "Projectile_LLWEAPONEX_Greatbow_PiercingShot_Human_Female");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "PiercingShot", "HUMAN",   0, "Projectile_LLWEAPONEX_Greatbow_PiercingShot_Human_Male");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "PiercingShot", "LIZARD",  1, "Projectile_LLWEAPONEX_Greatbow_PiercingShot_Lizard_Female");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "PiercingShot", "LIZARD",  0, "Projectile_LLWEAPONEX_Greatbow_PiercingShot_Lizard_Male");

DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "KnockbackShot", "DWARF",   1, "Projectile_LLWEAPONEX_Greatbow_Knockback_Dwarf_Female");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "KnockbackShot", "DWARF",   0, "Projectile_LLWEAPONEX_Greatbow_Knockback_Dwarf_Male");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "KnockbackShot", "ELF",     1, "Projectile_LLWEAPONEX_Greatbow_Knockback_Elf_Female");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "KnockbackShot", "ELF",     0, "Projectile_LLWEAPONEX_Greatbow_Knockback_Elf_Male");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "KnockbackShot", "HUMAN",   1, "Projectile_LLWEAPONEX_Greatbow_Knockback_Human_Female");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "KnockbackShot", "HUMAN",   0, "Projectile_LLWEAPONEX_Greatbow_Knockback_Human_Male");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "KnockbackShot", "LIZARD",  1, "Projectile_LLWEAPONEX_Greatbow_Knockback_Lizard_Female");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "KnockbackShot", "LIZARD",  0, "Projectile_LLWEAPONEX_Greatbow_Knockback_Lizard_Male");

DB_LLWEAPONEX_WeaponMastery_Skills("LLWEAPONEX_Greatbow", "FutureBarrage", "Target_LLWEAPONEX_Greatbow_FutureBarrage");

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_HandCrossbow", "<font color='#FF33FF'>Hand Crossbow Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_HandCrossbow", 0, "<font color='#FDFFEA'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_HandCrossbow", 1, "<font color='#FFDA9E'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_HandCrossbow", 2, "<font color='#FFC973'>Journeyman Spy</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_HandCrossbow", 3, "<font color='#FFB94A'>Expert Spy</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_HandCrossbow", 4, "<font color='#FF9E03'>Spymaster, Elite Assassin</font>");

//DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _LevelVar, _EnabledFlag)
LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_HandCrossbow", "LLWEAPONEX_HandCrossbow_Exp", "LLWEAPONEX_HandCrossbow_Level");
DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_HandCrossbow", 0, "Reload", "Any");
//DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_HandCrossbow", 1, "Assassinate", "Any");
DB_LLWEAPONEX_WeaponMastery_Skills("LLWEAPONEX_HandCrossbow", "Reload", "Shout_LLWEAPONEX_HandCrossbow_Reload");
DB_LLWEAPONEX_WeaponMastery_Skills("LLWEAPONEX_HandCrossbow", "Assassinate", "Projectile_LLWEAPONEX_HandCrossbow_Assassinate");

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_Katana", "<font color='#FF2D2D'>Katana Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Katana", 0, "<font color='#FFEAEA'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Katana", 1, "<font color='#FF9D9D'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Katana", 2, "<font color='#F56C6C'>Journeyman Blademaster</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Katana", 3, "<font color='#F44E4E'>Expert Blademaster</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Katana", 4, "<font color='#FF3333'>Legendary Blademaster</font>");

LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_Katana", "LLWEAPONEX_WM_Katana_Exp", "LLWEAPONEX_WM_Katana_Level");

//DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_Katana", 1, "Iaido", "Any");
DB_LLWEAPONEX_WeaponMastery_Skills("LLWEAPONEX_Katana", "Iaido", "Rush_LLWEAPONEX_Katana_Iaido");
DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_Katana", 1, "Combo", "Tag");
DB_LLWEAPONEX_WeaponMastery_Flags("LLWEAPONEX_Katana", "Combo", "LLWEAPONEX_Katana_ComboEnabled", "Tag");
//DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_Katana", 1, "Finisher", "Tag");
//DB_LLWEAPONEX_WeaponMastery_Flags("LLWEAPONEX_Katana", "Finisher", "LLWEAPONEX_Katana_FinisherEnabled", "Tag");

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_Quarterstaff", "<font color='#FD8826'>Quarterstaff Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Quarterstaff", 0, "<font color='#FDC89B'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Quarterstaff", 1, "<font color='#FBBC7F'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Quarterstaff", 2, "<font color='#F5A36C'>Journeyman Staff Monk</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Quarterstaff", 3, "<font color='#F49C4E'>Expert Staff Monk</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Quarterstaff", 4, "<font color='#FF9D33'>Master Monk of Staves</font>");

LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_Quarterstaff", "LLWEAPONEX_WM_Quarterstaff_Exp", "LLWEAPONEX_WM_Quarterstaff_Level");

//DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_Quarterstaff", 1, "LegSweep", "Any");
DB_LLWEAPONEX_WeaponMastery_Skills("LLWEAPONEX_Quarterstaff", "LegSweep", "Shout_LLWEAPONEX_LegSweep");

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_Rapier", "<font color='#F8FF2D'>Rapier Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Rapier", 0, "<font color='#FEFFEA'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Rapier", 1, "<font color='#FFF59D'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Rapier", 2, "<font color='#F5F06C'>Journeyman Fencer</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Rapier", 3, "<font color='#F5E06C'>Expert Fencer</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Rapier", 4, "<font color='#FFE933'>Master Fencer</font>");

LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_Rapier", "LLWEAPONEX_WM_Rapier_Exp", "LLWEAPONEX_WM_Rapier_Level");

//DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_Rapier", 1, "DuelistStance", "Any"); // Added when the offhand is empty
DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_Rapier", 2, "SuckerCombo", "Tag"); // Added when Sucker Punch is used
//DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_Rapier", 3, "FlickerStrike", "Any");

//DB_LLWEAPONEX_WeaponMastery_Skills("LLWEAPONEX_Rapier", "DuelistStance", "Shout_LLWEAPONEX_Rapier_DuelistStance");
DB_LLWEAPONEX_WeaponMastery_Flags("LLWEAPONEX_Rapier", "SuckerCombo", "LLWEAPONEX_Rapier_SuckerComboEnabled", "Tag");
//DB_LLWEAPONEX_WeaponMastery_Skills("LLWEAPONEX_Rapier", "FlickerStrike", "MultiStrike_LLWEAPONEX_Rapier_FlickerStrike");

//Statuses applied by mastery skills that should be removed when the mastery is inactive
DB_LLWEAPONEX_WeaponMastery_MasteryOnlyStatuses("LLWEAPONEX_Rapier", "DuelistStance", "LLWEAPONEX_RAPIER_MASTERY_STANCE_DUELIST");
DB_LLWEAPONEX_WeaponMastery_MasteryOnlyStatuses("LLWEAPONEX_Rapier", "SuckerCombo", "LLWEAPONEX_WS_RAPIER_SUCKERCOMBO1");
DB_LLWEAPONEX_WeaponMastery_MasteryOnlyStatuses("LLWEAPONEX_Rapier", "SuckerCombo", "LLWEAPONEX_WS_RAPIER_SUCKERCOMBO2");

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_Runeblade", "<font color='#40E0D0'>Runeblade Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Runeblade", 0, "<font color='#EAFFFE'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Runeblade", 1, "<font color='#9DFCFF'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Runeblade", 2, "<font color='#6CE3F5'>Journeyman Runekeeper</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Runeblade", 3, "<font color='#6CF5E9'>Expert Runekeeper</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Runeblade", 4, "<font color='#33FFB8'>Runemaster</font>");

LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_Runeblade", "LLWEAPONEX_WM_Runeblade_Exp", "LLWEAPONEX_WM_Runeblade_Level");

//DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_Runeblade", 1, "RunicReverb", "Any");
DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_Runeblade", 1, "PoisonBurst", "Status");

DB_LLWEAPONEX_WeaponMastery_Skills("LLWEAPONEX_Runeblade", "RunicReverb", "Shout_LLWEAPONEX_Runeblade_RunicReverb");
DB_LLWEAPONEX_WeaponMastery_Skills("LLWEAPONEX_Runeblade", "PoisonBurst", "Target_LLWEAPONEX_Runeblade_PoisonBurst");

DB_LLWEAPONEX_WeaponMastery_StatusUnlocking("LLWEAPONEX_Runeblade", "PoisonBurst", "LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON",          "LLWEAPONEX_RUNEBLADE_MASTERY_POISON");
DB_LLWEAPONEX_WeaponMastery_StatusUnlocking("LLWEAPONEX_Runeblade", "PoisonBurst", "LLWEAPONEX_ACTIVATE_RUNEBLADE_CONTAMINATION",   "LLWEAPONEX_RUNEBLADE_MASTERY_POISON");
DB_LLWEAPONEX_WeaponMastery_StatusUnlocking("LLWEAPONEX_Runeblade", "PoisonBurst", "LLWEAPONEX_ACTIVATE_RUNEBLADE_VENOM",           "LLWEAPONEX_RUNEBLADE_MASTERY_POISON");

DB_LLWEAPONEX_WeaponMastery_MasteryOnlyStatuses("LLWEAPONEX_Runeblade", "PoisonBurst", "LLWEAPONEX_RUNEBLADE_MASTERY_POISON");

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_ThrowingAbility", "<font color='#40E0D0'>Throwing Ability</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_ThrowingAbility", 0, "<font color='#FFEAEA'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_ThrowingAbility", 1, "<font color='#FF9D9D'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_ThrowingAbility", 2, "<font color='#F56CA3'>Journeyman Thrower</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_ThrowingAbility", 3, "<font color='#F56C8C'>Expert Thrower</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_ThrowingAbility", 4, "<font color='#FF3376'>Master Thrower</font>");

LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_ThrowingAbility", "LLWEAPONEX_WM_ThrowingAbility_Exp", "LLWEAPONEX_WM_ThrowingAbility_Level");

//DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_ThrowingAbility", 1, "ThrowWeapon", "Any");
DB_LLWEAPONEX_WeaponMastery_Skills("LLWEAPONEX_ThrowingAbility", "ThrowWeapon", "Projectile_LLWEAPONEX_ThrowWeapon");

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_Unarmed", "<font color='#40E0D0'>Unarmed Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Unarmed", 0, "<font color='#EAFFFE'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Unarmed", 1, "<font color='#9DFCFF'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Unarmed", 2, "<font color='#6CE3F5'>Scrapper</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Unarmed", 3, "<font color='#6CF5E9'>Elite Brawler</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Unarmed", 4, "<font color='#33FFB8'>Drunken Master, Legendary Pugilist</font>");

LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_Unarmed", "LLWEAPONEX_WM_Unarmed_Exp", "LLWEAPONEX_WM_Unarmed_Level");
//END_REGION

//REGION VANILLA_WEAPON_TYPES
PROC
LLWEAPONEX_WeaponMastery_Internal_InitMasteries()
THEN

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_Axe", "<font color='#F5785A'>Axe Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Axe", 0, "<font color='#FDFFEA'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Axe", 1, "<font color='#FFAAAA'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Axe", 2, "<font color='#D46A6A'>Journeyman Axefighter</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Axe", 3, "<font color='#DD3939'>Expert Axefighter</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Axe", 4, "<font color='#FF1515'>Warmaster, Axe of Legend</font>");

LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_Axe", "LLWEAPONEX_WM_Axe_Exp", "LLWEAPONEX_WM_Axe_Level");

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_Blunt", "<font color='#FFE7AA'>Blunt Weapons Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Blunt", 0, "<font color='#FDFFEA'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Blunt", 1, "<font color='#FFE7AA'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Blunt", 2, "<font color='#D4B76A'>Journeyman Smasher</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Blunt", 3, "<font color='#AA8B39'>Expert Smasher</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Blunt", 4, "<font color='#A57C5B'>Master of Smashing</font>");

LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_Blunt", "LLWEAPONEX_WM_Blunt_Exp", "LLWEAPONEX_WM_Blunt_Level");

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_Bow", "<font color='#72EE34'>Bow Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Bow", 0, "<font color='#FDFFEA'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Bow", 1, "<font color='#CAEA9C'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Bow", 2, "<font color='#9BC362'>Journeyman Archer</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Bow", 3, "<font color='#AAFF14'>Expert Archer</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Bow", 4, "<font color='#4DFF14'>Eagle Eye, Master Archer</font>");

LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_Bow", "LLWEAPONEX_WM_Bow_Exp", "LLWEAPONEX_WM_Bow_Level");

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_Crossbow", "<font color='#81E500'>Crossbow Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Crossbow", 0, "<font color='#FDFFEA'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Crossbow", 1, "<font color='#B5D48D'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Crossbow", 2, "<font color='#A6D569'>Journeyman Crossbowman</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Crossbow", 3, "<font color='#95D83F'>Expert Crossbowman</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Crossbow", 4, "<font color='#88E213'>Master Marksman of Crossbows</font>");

LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_Crossbow", "LLWEAPONEX_WM_Crossbow_Exp", "LLWEAPONEX_WM_Crossbow_Level");

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_Dagger", "<font color='#5b40ff'>Dagger Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Dagger", 0, "<font color='#FDFFEA'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Dagger", 1, "<font color='#cdbcf0'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Dagger", 2, "<font color='#a17ee8'>Journeyman Thief</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Dagger", 3, "<font color='#8756eb'>Expert Rogue</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Dagger", 4, "<font color='#6827EC'>Master Shadowdancer</font>");

LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_Dagger", "LLWEAPONEX_WM_Dagger_Exp", "LLWEAPONEX_WM_Dagger_Level");

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_Spear", "<font color='#ffcf29'>Spear Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Spear", 0, "<font color='#FDFFEA'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Spear", 1, "<font color='#fff2c6'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Spear", 2, "<font color='#ffe899'>Journeyman Spearman</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Spear", 3, "<font color='#ffe178'>Expert Spearman</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Spear", 4, "<font color='#ffc154'>Spearmaster</font>");

LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_Spear", "LLWEAPONEX_WM_Spear_Exp", "LLWEAPONEX_WM_Spear_Level");

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_Staff", "<font color='#2effe9'>Arcane Staff Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Staff", 0, "<font color='#FDFFEA'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Staff", 1, "<font color='#d1f8ff'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Staff", 2, "<font color='#9bf0ff'>Journeyman Staff Acolyte</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Staff", 3, "<font color='#77e9fe'>Expert Staffmeister</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Staff", 4, "<font color='#5edbff'>Sage of Staves</font>");

LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_Staff", "LLWEAPONEX_WM_Staff_Exp", "LLWEAPONEX_WM_Staff_Level");

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_Sword", "<font color='#ff3e2a'>Sword Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Sword", 0, "<font color='#FDFFEA'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Sword", 1, "<font color='#ffac99'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Sword", 2, "<font color='#ff9178'>Journeyman Swordsman</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Sword", 3, "<font color='#ff7251'>Expert Swordsman</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Sword", 4, "<font color='#ff662a'>Sword Dancer, Legendary Swordmaster</font>");

LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_Sword", "LLWEAPONEX_WM_Sword_Exp", "LLWEAPONEX_WM_Sword_Level");

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_Wand", "<font color='#b658ff'>Wand Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Wand", 0, "<font color='#FDFFEA'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Wand", 1, "<font color='#d8bafd'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Wand", 2, "<font color='#c596fe'>Journeyman of Wands</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Wand", 3, "<font color='#b274ff'>Expert of Wands</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Wand", 4, "<font color='#d258ff'>Master Wandweaver</font>");

LLWEAPONEX_WeaponMastery_AddMastery("LLWEAPONEX_Wand", "LLWEAPONEX_WM_Wand_Exp", "LLWEAPONEX_WM_Wand_Level");
//END_REGION

//REGION UPDATES
PROC
LeaderUpdater_ModUpdated("WeaponExpansion", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 0,9,8,0)
THEN
SysClear("DB_LLWEAPONEX_WeaponMastery_SkillProgression", 4);
LLWEAPONEX_WeaponMastery_InitSettings();

PROC
LeaderUpdater_ModUpdated("WeaponExpansion", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 0,9,4,10)
THEN
SysClear("DB_LLWEAPONEX_WeaponMastery_MaxExperience", 2);
DB_LLWEAPONEX_WeaponMastery_MasteryCap(3);
DB_LLWEAPONEX_WeaponMastery_MaxExperience(0, 20);
DB_LLWEAPONEX_WeaponMastery_MaxExperience(1, 40);
DB_LLWEAPONEX_WeaponMastery_MaxExperience(2, 50);
DB_LLWEAPONEX_WeaponMastery_MaxExperience(3, 125);

PROC
LeaderUpdater_ModUpdated("WeaponExpansion", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 0,9,4,8)
AND
DB_IsPlayer(_Player)
AND
IsTagged(_Player, "LLWEAPONEX_Katana_FinisherEnabled", 1)
THEN
ClearTag(_Player, "LLWEAPONEX_Katana_FinisherEnabled");
LeaderLib_Tags_ClearPreservedTag(_Player, "LLWEAPONEX_Katana_FinisherEnabled");

PROC
LeaderUpdater_ModUpdated("WeaponExpansion", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 0,9,4,8)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_Katana", 1, "Finisher", "Tag");
NOT DB_LLWEAPONEX_WeaponMastery_Flags("LLWEAPONEX_Katana", "Finisher", "LLWEAPONEX_Katana_FinisherEnabled", "Tag");
LLWEAPONEX_WeaponMastery_InitSettings();

PROC
LeaderUpdater_ModUpdated("WeaponExpansion", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 0,9,4,2)
THEN
LLWEAPONEX_WeaponMastery_InitSettings();

PROC
LeaderUpdater_ModUpdated("WeaponExpansion", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 0,9,4,2)
AND
DB_IsPlayer(_Player)
AND
IsTagged(_Player, "LLWEAPONEX_MasteryActive", 1)
THEN
ObjectSetFlag(_Player, "LLWEAPONEX_MasteryActive", 0);

PROC
LeaderUpdater_ModUpdated("WeaponExpansion", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 0,9,4,0)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryVariables((STRING)_WeaponType, (STRING)_CurrentXPVar, (STRING)_MaxXPVar, (STRING)_LevelVar, (STRING)_EnabledFlag)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _MaxXPVar, _LevelVar, _EnabledFlag);
DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _LevelVar, _EnabledFlag);

PROC
LeaderUpdater_ModUpdated("WeaponExpansion", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 0,9,4,0)
AND
DB_IsPlayer(_Player)
THEN
LLWEAPONEX_WeaponMastery_Internal_StoreMasteryProgression(_Player);

PROC
LeaderUpdater_ModUpdated("WeaponExpansion", "LaughingLeader", (STRING)_PastVersion, "0.9.2.0")
THEN
NOT DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_Rapier", 1, "DuelistStance", "Custom");
DB_LLWEAPONEX_WeaponMastery_Progression("LLWEAPONEX_Rapier", 1, "DuelistStance", "Any");
//END_REGION

//REGION TEXT_EVENTS
IF
TextEventSet("llweap_masterall")
THEN
LLWEAPONEX_WeaponMastery_Debug_CheatMastery();

PROC
LLWEAPONEX_WeaponMastery_Debug_CheatMastery()
AND
DB_IsPlayer(_Player)
THEN
LLWEAPONEX_WeaponMastery_Debug_CheatMastery(_Player);

PROC
LLWEAPONEX_WeaponMastery_Debug_CheatMastery((CHARACTERGUID)_Player)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _LevelVar, _EnabledFlag)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX_01_WeaponMastery:Debug:CheatMastery] Maxing out [",_WeaponType,"] mastery.");
LLWEAPONEX_WeaponMastery_InitMasteryVariables(_Player, _WeaponType, 4, 1);
LLWEAPONEX_WeaponMastery_SetProgressionFlags(_Player, _WeaponType, 0, 4);
LLWEAPONEX_WeaponMastery_OnMasteryLeveledUp(_Player, _WeaponType, 4);
LLWEAPONEX_WeaponMastery_ShowLevelUpText(_Player, _WeaponType, 4, 0);

IF
TextEventSet("llweap_unlockallskills")
AND
DB_IsPlayer(_Player)
AND
DB_LLWEAPONEX_WeaponMastery_Progression(_WeaponType, _Level, _SkillID, _Type)
AND
NOT DB_LLWEAPONEX_WeaponMastery_Learned(_Player, _WeaponType, _SkillID)
THEN
DB_LLWEAPONEX_WeaponMastery_Learned(_Player, _WeaponType, _SkillID);
LLWEAPONEX_WeaponMastery_OnSkillLearned(_Player, _WeaponType, _SkillID);
//END_REGION

//REGION QUERIES
QRY
LLWEAPONEX_WeaponMastery_QRY_HasActiveMastery((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_ActiveMasteries(_Player, _Item, _WeaponType, _EnabledFlag)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_HasActiveMastery((CHARACTERGUID)_Player, (STRING)_WeaponType, (ITEMGUID)_IgnoreItem)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_ActiveMasteries(_Player, _Item, _WeaponType, _EnabledFlag)
AND
_Item != _IgnoreItem
AND
LeaderLib_Helper_QRY_WeaponIsEquipped(_Player, _Item)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_HasActiveMastery((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_PlayerData_PermanentMasteries(_Player, _WeaponType, _EnabledFlag)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_HasAnyActiveMastery((CHARACTERGUID)_Player)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_ActiveMasteries(_Player, _Item, _WeaponType, _EnabledFlag)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_HasAnyActiveMastery((CHARACTERGUID)_Player)
AND
DB_LLWEAPONEX_WeaponMastery_PlayerData_PermanentMasteries(_Player, _WeaponType, _EnabledFlag)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_HasActiveSkills((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveSkills(_Player, _WeaponType, _SkillID, _Skill)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_HasActiveSkills((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Player, _WeaponType, _SkillID, _Skill)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_HasLearnedSkills((CHARACTERGUID)_Player)
AND
DB_LLWEAPONEX_WeaponMastery_Learned(_Player, _WeaponType, _SkillID)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_BelowMaxLevel((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
NOT DB_LLWEAPONEX_WeaponMastery_PlayerData_Experience(_Player, _WeaponType, _, _)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_BelowMaxLevel((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryCap(_Cap)
AND
DB_LLWEAPONEX_WeaponMastery_PlayerData_Experience(_Player, _WeaponType, _CurrentLevel, _Experience)
AND
_CurrentLevel < _Cap
THEN
DB_NOOP(1);

//LeaderLog_LogIntWithString("DEBUG", "[LLWEAPONEX:WeaponMastery:QRY_BelowMaxLevel] Weapon Mastery [",_WeaponType,"] Level [", _CurrentLevel, "/",_Cap,"].");

QRY
LLWEAPONEX_WeaponMastery_QRY_IsRacialSkill((STRING)_WeaponType, (STRING)_SkillID)
AND
DB_LLWEAPONEX_WeaponMastery_RacialSkills(_WeaponType, _SkillID, _RaceTag, _IsFemale, _Skill)
THEN
DB_NOOP(1);
//END_REGION

//REGION RACIAL_SKILLS
IF
CharacterLearnedSkill(_Char, "Projectile_LLWEAPONEX_Greatbow_PiercingShot_Base")
AND
CharacterGetRace(_Char, 1, _Race)
AND
DB_LeaderLib_RaceTags(_Race, _RaceTag, _BaseRaceTag)
THEN
DB_LLWEAPONEX_WeaponMastery_Learned(_Char, "LLWEAPONEX_Greatbow", "PiercingShot");
CharacterRemoveSkill(_Char, "Projectile_LLWEAPONEX_Greatbow_PiercingShot_Base");
LLWEAPONEX_WeaponMastery_UnlockSkillForRace(_Char, "LLWEAPONEX_Greatbow", "PiercingShot", _BaseRaceTag);

IF
CharacterLearnedSkill(_Char, "Projectile_LLWEAPONEX_Greatbow_Knockback_Base")
AND
CharacterGetRace(_Char, 1, _Race)
AND
DB_LeaderLib_RaceTags(_Race, _RaceTag, _BaseRaceTag)
THEN
DB_LLWEAPONEX_WeaponMastery_Learned(_Char, "LLWEAPONEX_Greatbow", "KnockbackShot");
CharacterRemoveSkill(_Char, "Projectile_LLWEAPONEX_Greatbow_Knockback_Base");
LLWEAPONEX_WeaponMastery_UnlockSkillForRace(_Char, "LLWEAPONEX_Greatbow", "KnockbackShot", _BaseRaceTag);
//END_REGION

//REGION SKILL_UNLOCKING
QRY
LLWEAPONEX_WeaponMastery_QRY_SkillRequirementsMet((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID)
AND
NOT DB_LLWEAPONEX_WeaponMastery_SkillRequirements(_WeaponType, _SkillID, _, _)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_SkillRequirementsMet((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID)
AND
DB_LLWEAPONEX_WeaponMastery_SkillRequirements(_WeaponType, _SkillID, _Flag, "Flag")
AND
ObjectGetFlag(_Player, _Flag, 1)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_SkillRequirementsMet((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID)
AND
DB_LLWEAPONEX_WeaponMastery_SkillRequirements(_WeaponType, _SkillID, _Flag, "Tag")
AND
IsTagged(_Player, _Flag, 1)
THEN
DB_NOOP(1);

PROC
LLWEAPONEX_WeaponMastery_OnSkillLearned((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID)
AND
DB_LLWEAPONEX_WeaponMastery_Progression(_WeaponType, _Level, _SkillID, _Type)
THEN
LLWEAPONEX_WeaponMastery_OnSkillLearned(_Player, _WeaponType, _SkillID, _Type);

PROC
LLWEAPONEX_WeaponMastery_OnSkillLearned((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID, (STRING)_Type)
AND
LLWEAPONEX_WeaponMastery_QRY_HasActiveMastery(_Player, _WeaponType)
AND
LLWEAPONEX_WeaponMastery_QRY_SkillRequirementsMet(_Player, _WeaponType, _SkillID)
THEN
LLWEAPONEX_WeaponMastery_BlockUnlockingSkill(_Player, _WeaponType, _SkillID);
LLWEAPONEX_WeaponMastery_Internal_AddSkillType(_Player, _WeaponType, _SkillID, _Type);

/*
PROC
LLWEAPONEX_WeaponMastery_OnSkillLearned((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID, (STRING)_Type)
AND
NOT LLWEAPONEX_WeaponMastery_QRY_HasActiveMastery(_Player, _WeaponType)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:OnSkillLearned] Weapon Mastery [",_WeaponType,"] is not active. SkillID [",_SkillID,"] Type [",_Type,"].");
*/

PROC
LLWEAPONEX_WeaponMastery_BlockUnlockingSkill((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID)
THEN
DB_NOOP(1);

PROC
LLWEAPONEX_WeaponMastery_Internal_AddSkillType((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID, "Any")
AND
NOT DB_LLWEAPONEX_WeaponMastery_BlockUnlockingSkill(_Player, _WeaponType, _SkillID)
AND
NOT LLWEAPONEX_WeaponMastery_QRY_IsRacialSkill(_WeaponType, _SkillID)
THEN
LLWEAPONEX_WeaponMastery_UnlockSkill(_Player, _WeaponType, _SkillID);

PROC
LLWEAPONEX_WeaponMastery_Internal_AddSkillType((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID, "Any")
AND
NOT DB_LLWEAPONEX_WeaponMastery_BlockUnlockingSkill(_Player, _WeaponType, _SkillID)
AND
LLWEAPONEX_WeaponMastery_QRY_IsRacialSkill(_WeaponType, _SkillID)
AND
CharacterGetRace(_Player, 1, _Race)
AND
DB_LeaderLib_RaceTags(_Race, _RaceTag, _BaseRaceTag)
THEN
LLWEAPONEX_WeaponMastery_UnlockSkillForRace(_Player, _WeaponType, _SkillID, _BaseRaceTag);

PROC
LLWEAPONEX_WeaponMastery_Internal_AddSkillType((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID, "Tag")
AND
NOT DB_LLWEAPONEX_WeaponMastery_BlockUnlockingSkill(_Player, _WeaponType, _SkillID)
AND
DB_LLWEAPONEX_WeaponMastery_Flags(_WeaponType, _SkillID, _Tag, "Tag")
THEN
LeaderLib_Tags_PreserveTag(_Player, _Tag);
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:Internal:AddSkillType] Adding tag [",_Tag,"] for Weapon Mastery [",_WeaponType,"] and SkillID [",_SkillID,"].");

PROC
LLWEAPONEX_WeaponMastery_Internal_AddSkillType((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID, "Flag")
AND
NOT DB_LLWEAPONEX_WeaponMastery_BlockUnlockingSkill(_Player, _WeaponType, _SkillID)
AND
DB_LLWEAPONEX_WeaponMastery_Flags(_WeaponType, _SkillID, _Flag, "Flag")
THEN
ObjectSetFlag(_Player, _Flag, 0);
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:Internal:AddSkillType] Adding flag [",_Flag,"] for Weapon Mastery [",_WeaponType,"] and SkillID [",_SkillID,"].");

PROC
LLWEAPONEX_WeaponMastery_Internal_AddSkillType((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID, (STRING)_Type)
AND
DB_LLWEAPONEX_WeaponMastery_BlockUnlockingSkill(_Player, _WeaponType, _SkillID)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_BlockUnlockingSkill(_Player, _WeaponType, _SkillID);

PROC
LLWEAPONEX_WeaponMastery_UnlockSkill((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID)
AND
NOT DB_LLWEAPONEX_WeaponMastery_ActiveSkills(_Player, _WeaponType, _SkillID, _)
AND
DB_LLWEAPONEX_WeaponMastery_Skills(_WeaponType, _SkillID, _Skill)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:UnlockSkill] Unlocking skill [",_SkillID,"](",_Skill,") for weapon type [",_WeaponType,"].");
CharacterAddSkill(_Player, _Skill, 0);
DB_LLWEAPONEX_WeaponMastery_ActiveSkills(_Player, _WeaponType, _SkillID, _Skill);

PROC
LLWEAPONEX_WeaponMastery_UnlockSkillForRace((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID, (STRING)_RaceTag)
AND
IsTagged(_Player, "FEMALE", _IsFemale)
AND
DB_LLWEAPONEX_WeaponMastery_RacialSkills(_WeaponType, _SkillID, _RaceTag, _IsFemale, _Skill)
AND
NOT DB_LLWEAPONEX_WeaponMastery_Temp_SkillResolved(_Player, _WeaponType, _SkillID)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:UnlockSkillForRace] Unlocking skill [",_SkillID,"](",_Skill,") for weapon type [",_WeaponType,"].");
DB_LLWEAPONEX_WeaponMastery_Temp_SkillResolved(_Player, _WeaponType, _SkillID);
CharacterAddSkill(_Player, _Skill, 0);
DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Player, _WeaponType, _SkillID, _Skill);

PROC
LLWEAPONEX_WeaponMastery_UnlockSkillForRace((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID, (STRING)_RaceTag)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_SkillResolved(_Player, _WeaponType, _SkillID)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_Temp_SkillResolved(_Player, _WeaponType, _SkillID);
//END_REGION

//REGION WEAPON_MASTERY_INITIAL_LEVEL
QRY
LLWEAPONEX_WeaponMastery_QRY_MasteryLevelSet((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_PlayerData_Experience(_Player, _WeaponType, _Level, _Experience)
THEN
DB_NOOP(1);

PROC
LLWEAPONEX_WeaponMastery_OnMasteryActivated((CHARACTERGUID)_Player, (STRING)_WeaponType)
THEN
LLWEAPONEX_WeaponMastery_InitMasteryVariables(_Player, _WeaponType, 0);

PROC
LLWEAPONEX_WeaponMastery_InitMasteryVariables((CHARACTERGUID)_Player, (STRING)_WeaponType)
THEN
LLWEAPONEX_WeaponMastery_InitMasteryVariables(_Player, _WeaponType, 0);

PROC
LLWEAPONEX_WeaponMastery_InitMasteryVariables((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_Level)
AND
NOT LLWEAPONEX_WeaponMastery_QRY_MasteryLevelSet(_Player, _WeaponType)
THEN
LLWEAPONEX_WeaponMastery_StoreExperienceForLevel(_Player, _WeaponType, _Level, 0);
LLWEAPONEX_WeaponMastery_MasteryInitialized(_Player, _WeaponType, _Level);

//Force
PROC
LLWEAPONEX_WeaponMastery_InitMasteryVariables((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_Level, 1)
THEN
LLWEAPONEX_WeaponMastery_StoreExperienceForLevel(_Player, _WeaponType, _Level, 0);
LLWEAPONEX_WeaponMastery_MasteryInitialized(_Player, _WeaponType, _Level);

PROC
LLWEAPONEX_WeaponMastery_MasteryInitialized((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_Level)
AND
IntegertoString(_Level, _LevelStr)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:InitMasteryVariables] Weapon Mastery [",_WeaponType,"] was set to level [",_LevelStr,"] for character.");
//END_REGION

//REGION EQUIPPING
PROC
LLWEAPONEX_OnWeaponTypeEquipped((CHARACTERGUID)_Player, (ITEMGUID)_Item, (STRING)_WeaponType, 1)
AND
DB_IsPlayer(_Player)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _LevelVar, _EnabledFlag)
THEN
DB_LLWEAPONEX_WeaponMastery_Temp_ActiveMasteries(_Player, _Item, _WeaponType, _EnabledFlag);
ObjectSetFlag(_Player, _EnabledFlag, 0);
ObjectSetFlag(_Player, "LLWEAPONEX_MasteryActive", 0);
LeaderLib_Tags_PreserveTag(_Player, "LLWEAPONEX_MasteryActive");
LeaderLib_Tags_PreserveTag(_Player, _EnabledFlag);
ApplyStatus(_Player, "LLWEAPONEX_REFRESH_UI", 0.0); // Refresh skill requirements
LLWEAPONEX_WeaponMastery_OnMasteryActivated(_Player, _WeaponType);
LeaderLog_Log("DEBUG", "[LLWEAPONEX_01_WeaponMastery:OnWeaponEquipped] Weapon Mastery [",_WeaponType,"] is now active. Set tag [",_EnabledFlag,"].");

PROC
LLWEAPONEX_WeaponMastery_OnMasteryActivated((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
NOT DB_GlobalFlag("LLWEAPONEX_MasterySystemActive")
THEN
LeaderLib_ToggleScripts_EnableScript("LLWEAPONEX_MasterySystemActive", "WeaponExpansion");

PROC
LLWEAPONEX_WeaponMastery_OnMasteryDeactivated((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
NOT DB_LLWEAPONEX_WeaponMastery_Temp_ActiveMasteries(_Player, _, _, _)
THEN
ObjectClearFlag(_Player, "LLWEAPONEX_MasteryActive");
LeaderLib_Tags_ClearPreservedTag(_Player, "LLWEAPONEX_MasteryActive");

PROC
LLWEAPONEX_WeaponMastery_OnMasteryDeactivated((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
NOT DB_LLWEAPONEX_WeaponMastery_Temp_ActiveMasteries(_,_,_,_)
THEN
LeaderLib_ToggleScripts_DisableScriptAfterDelay("LLWEAPONEX_MasterySystemActive", "WeaponExpansion", 500);
//END_REGION

//REGION PRESET_APPLIED
PROC
LeaderLib_PresetMenu_BlockSkillCopying((CHARACTERGUID)_Player, (STRING)_Preset, (STRING)_Skill, (INTEGER)_ChangingRace)
AND
DB_LLWEAPONEX_WeaponMastery_RacialSkills(_WeaponType, _SkillID, _RaceTag, _IsFemale, _Skill)
THEN
DB_LeaderLib_PresetMenu_Temp_BlockSkill(_Player, _Skill);

PROC
LeaderLib_PresetMenu_BlockSkillCopying((CHARACTERGUID)_Player, (STRING)_Preset, (STRING)_Skill, (INTEGER)_ChangingRace)
AND
DB_LLWEAPONEX_WeaponMastery_Skills(_WeaponType, _SkillID, _Skill)
THEN
DB_LeaderLib_PresetMenu_Temp_BlockSkill(_Player, _Skill);
//END_REGION

//REGION UNEQUIP_REMOVAL_EVENT
//Delay removal in case the same weapon type is being equipped
PROC
LLWEAPONEX_OnWeaponTypeUnEquipped((CHARACTERGUID)_Character, (ITEMGUID)_Item, (STRING)_WeaponType, 1)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_ActiveMasteries(_Player, _Item, _WeaponType, _EnabledFlag)
THEN
DB_LLWEAPONEX_WeaponMastery_Temp_DeactivatedMasteries(_Player, _Item, _WeaponType);
ProcObjectTimerCancel(_Player, "LLWEAPONEX_Timers_MasteryDeactivated");
ProcObjectTimer(_Player, "LLWEAPONEX_Timers_MasteryDeactivated", 250);
LLWEAPONEX_WeaponMastery_OnWeaponUnEquipped(_Player, _Item, _WeaponType);

PROC
LLWEAPONEX_WeaponMastery_OnWeaponUnEquipped((CHARACTERGUID)_Character, (ITEMGUID)_Item, (STRING)_WeaponType)
THEN
DB_NOOP(1);

PROC
LLWEAPONEX_OnWeaponTypeEquipped((CHARACTERGUID)_Player, (ITEMGUID)_Item, (STRING)_WeaponType, 1)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_DeactivatedMasteries(_Player, _Item, _WeaponType)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_Temp_DeactivatedMasteries(_Player, _Item, _WeaponType);
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:OnWeaponEquipped] Weapon Mastery [",_WeaponType,"] was activated. Removing from [DB_LLWEAPONEX_WeaponMastery_Temp_DeactivatedMasteries].");

//Default weapon skills
PROC
LLWEAPONEX_WeaponMastery_OnMasteryActivated((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_Progression(_WeaponType, 0, _SkillID, "Any")
AND
DB_LLWEAPONEX_WeaponMastery_Skills(_WeaponType, _SkillID, _Skill)
AND
NOT DB_LLWEAPONEX_WeaponMastery_Learned(_Player, _Skill, _SkillID)
THEN
DB_LLWEAPONEX_WeaponMastery_Learned(_Player, _WeaponType, _SkillID);

PROC
LLWEAPONEX_WeaponMastery_OnMasteryActivated((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_Learned(_Player, _WeaponType, _SkillID)
THEN
LLWEAPONEX_WeaponMastery_OnSkillLearned(_Player, _WeaponType, _SkillID);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Player, "LLWEAPONEX_Timers_MasteryDeactivated")
AND
DB_LLWEAPONEX_WeaponMastery_Temp_DeactivatedMasteries(_Player, _Item, _WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_ActiveMasteries(_Player, _Item, _WeaponType, _EnabledFlag)
AND
NOT LLWEAPONEX_WeaponMastery_QRY_HasActiveMastery(_Player, _WeaponType, _Item)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_Temp_ActiveMasteries(_Player, _Item, _WeaponType, _EnabledFlag);
NOT DB_LLWEAPONEX_WeaponMastery_Temp_DeactivatedMasteries(_Player, _Item, _WeaponType);
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:LLWEAPONEX_Timers_MasteryDeactivated] Weapon Mastery [",_WeaponType,"] was deactivated.");
ObjectClearFlag(_Player, _EnabledFlag);
LeaderLib_Tags_ClearPreservedTag(_Player, _EnabledFlag);
LLWEAPONEX_WeaponMastery_OnMasteryDeactivated(_Player, _WeaponType);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Player, "LLWEAPONEX_Timers_MasteryDeactivated")
AND
DB_LLWEAPONEX_WeaponMastery_Temp_DeactivatedMasteries(_Player, _Item, _WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_ActiveMasteries(_Player, _Item, _WeaponType, _EnabledFlag)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_Temp_ActiveMasteries(_Player, _Item, _WeaponType, _EnabledFlag);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Player, "LLWEAPONEX_Timers_MasteryDeactivated")
AND
DB_LLWEAPONEX_WeaponMastery_Temp_DeactivatedMasteries(_Player, _Item, _WeaponType)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_Temp_DeactivatedMasteries(_Player, _Item, _WeaponType);
//END_REGION

//REGION RESURRECTION_REAPPLY
/*
IF
CharacterStatusRemoved(_Player, "RESURRECT", _)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveSkills(_Player, _WeaponType, _SkillID, _Status)
THEN
ApplyStatus(_Player, _Status, -1.0, 1, _Player);

IF
CharacterStatusRemoved(_Player, "RESURRECT", _)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Player, _WeaponType, _SkillID, _Skill)
THEN
ApplyStatus(_Player, _Status, -1.0, 1, _Player);
*/
//END_REGION

//REGION RACE_CHANGED_EVENTS
QRY
LLWEAPONEX_QRY_HasRacialSkills((CHARACTERGUID)_Char)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Char, _WeaponType, _SkillID, _Skill)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_QRY_HasRacialSkills((CHARACTERGUID)_Char)
AND
DB_LLWEAPONEX_WeaponMastery_RacialSkills(_WeaponType, _SkillID, _RaceTag, _IsFemale, _Skill)
AND
CharacterHasSkill(_Char, _Skill, 1)
THEN
DB_NOOP(1);

PROC
LLWEAPONEX_WeaponMastery_OnRaceChanged((CHARACTERGUID)_Char, (STRING)_Race)
AND
DB_LeaderLib_RaceTags(_Race, _RaceTag, _BaseRaceTag)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Char, _WeaponType, _SkillID, _Skill)
THEN
CharacterRemoveSkill(_Char, _Skill);
NOT DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Char, _WeaponType, _SkillID, _Skill);
LLWEAPONEX_WeaponMastery_UnlockSkillForRace(_Char, _WeaponType, _SkillID, _BaseRaceTag);

//What race are we now?
PROC
LLWEAPONEX_WeaponMastery_OnRaceChanged((CHARACTERGUID)_Char, (STRING)_Race)
AND
NOT DB_LeaderLib_RaceTags(_Race, _, _)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Char, _WeaponType, _SkillID, _Skill)
AND
DB_LeaderLib_RaceTags(_OtherRace, _RaceTag, _BaseRaceTag)
AND
IsTagged(_Char, _BaseRaceTag, 1)
AND
CharacterHasSkill(_Char, _Skill, 1)
THEN
CharacterRemoveSkill(_Char, _Skill);
NOT DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Char, _WeaponType, _SkillID, _Skill);
LLWEAPONEX_WeaponMastery_UnlockSkillForRace(_Char, _WeaponType, _SkillID, _BaseRaceTag);

//Players
PROC
LLWEAPONEX_WeaponMastery_OnRaceReverted((CHARACTERGUID)_Char, 1)
AND
CharacterGetRace(_Char, 0, _Race)
AND
DB_LeaderLib_RaceTags(_Race, _RaceTag, _BaseRaceTag)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Char, _WeaponType, _SkillID, _Skill)
THEN
CharacterRemoveSkill(_Char, _Skill);
NOT DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Char, _WeaponType, _SkillID, _Skill);
LLWEAPONEX_WeaponMastery_UnlockSkillForRace(_Char, _WeaponType, _SkillID, _BaseRaceTag);

//NPCss
PROC
LLWEAPONEX_WeaponMastery_OnRaceReverted((CHARACTERGUID)_Char, 0)
AND
DB_LeaderLib_RaceTags(_Race, _RaceTag, _BaseRaceTag)
AND
IsTagged(_Char, _BaseRaceTag, 1)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Char, _WeaponType, _SkillID, _Skill)
THEN
CharacterRemoveSkill(_Char, _Skill);
NOT DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Char, _WeaponType, _SkillID, _Skill);
LLWEAPONEX_WeaponMastery_UnlockSkillForRace(_Char, _WeaponType, _SkillID, _BaseRaceTag);

PROC
LLWEAPONEX_WeaponMastery_OnTransformed((CHARACTERGUID)_Char, (GUIDSTRING)_Template)
AND
NOT DB_LLWEAPONEX_WeaponMastery_Temp_TransformResolved(_Char)
AND
GetTemplate(_Char, _RaceTemplate)
AND
DB_LeaderLib_RaceTemplates(_RaceTag, _IsUndead, _IsFemale, _RaceTemplate)
AND
DB_LeaderLib_RaceTags(_Race, _RaceTag, _BaseRaceTag)
THEN
DB_LLWEAPONEX_WeaponMastery_Temp_TransformResolved(_Char);
LLWEAPONEX_WeaponMastery_OnRaceChanged(_Char, _Race);

PROC
LLWEAPONEX_WeaponMastery_OnTransformed((CHARACTERGUID)_Char, (GUIDSTRING)_Template)
AND
NOT DB_LLWEAPONEX_WeaponMastery_Temp_TransformResolved(_Char)
AND
String(_Template, _CheckTemplate)
AND
DB_LeaderLib_RaceTemplates(_RaceTag, _IsUndead, _IsFemale, _CheckTemplate)
AND
DB_LeaderLib_RaceTags(_Race, _RaceTag, _BaseRaceTag)
THEN
DB_LLWEAPONEX_WeaponMastery_Temp_TransformResolved(_Char);
LLWEAPONEX_WeaponMastery_OnRaceChanged(_Char, _Race);

PROC
LLWEAPONEX_WeaponMastery_OnTransformed((CHARACTERGUID)_Char, (GUIDSTRING)_Template)
AND
NOT DB_LLWEAPONEX_WeaponMastery_Temp_TransformResolved(_Char)
AND
CharacterGetRace(_Char, 0, _Race)
THEN
DB_LLWEAPONEX_WeaponMastery_Temp_TransformResolved(_Char);
LLWEAPONEX_WeaponMastery_OnRaceChanged(_Char, _Race);

PROC
LLWEAPONEX_WeaponMastery_OnTransformed((CHARACTERGUID)_Char, (GUIDSTRING)_Template)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_TransformResolved(_Char)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_Temp_TransformResolved(_Char);
//END_REGION

//REGION SKILL_REMOVAL
PROC
LLWEAPONEX_WeaponMastery_RemoveSkill((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveSkills(_Player, _WeaponType, _SkillID, _Skill)
THEN
CharacterRemoveSkill(_Player, _Skill);
NOT DB_LLWEAPONEX_WeaponMastery_ActiveSkills(_Player, _WeaponType, _SkillID, _Skill);

PROC
LLWEAPONEX_WeaponMastery_RemoveSkill((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID)
THEN
LLWEAPONEX_WeaponMastery_RemoveAppliedSkillStatuses(_Player, _WeaponType, _SkillID);

PROC
LLWEAPONEX_WeaponMastery_OnMasteryDeactivated((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_Skills(_WeaponType, _SkillID, _Skill)
THEN
LLWEAPONEX_WeaponMastery_RemoveAppliedSkillStatuses(_Player, _WeaponType, _SkillID);

PROC
LLWEAPONEX_WeaponMastery_OnMasteryDeactivated((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveSkills(_Player, _WeaponType, _SkillID, _Skill)
THEN
CharacterRemoveSkill(_Player, _Skill);
NOT DB_LLWEAPONEX_WeaponMastery_ActiveSkills(_Player, _WeaponType, _SkillID, _Skill);

/*
PROC
LLWEAPONEX_WeaponMastery_OnMasteryDeactivated((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveSkills(_Player, _WeaponType, _SkillID, _Skill)
THEN
CharacterRemoveSkill(_Player, _Skill);
LLWEAPONEX_WeaponMastery_RemoveAppliedSkillStatuses(_Player, _WeaponType, _SkillID);
NOT DB_LLWEAPONEX_WeaponMastery_ActiveSkills(_Player, _WeaponType, _SkillID, _Skill);

PROC
LLWEAPONEX_WeaponMastery_OnMasteryDeactivated((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Player, _WeaponType, _SkillID, _Skill)
THEN
CharacterRemoveSkill(_Player, _Skill);
LLWEAPONEX_WeaponMastery_RemoveAppliedSkillStatuses(_Player, _WeaponType, _SkillID);
NOT DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Player, _WeaponType, _SkillID, _Skill);
*/

PROC
LLWEAPONEX_WeaponMastery_OnMasteryDeactivated((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_Flags(_WeaponType, _SkillID, _Tag, "Tag")
THEN
LeaderLib_Tags_ClearPreservedTag(_Player, _Tag);

PROC
LLWEAPONEX_WeaponMastery_OnMasteryDeactivated((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_Flags(_WeaponType, _SkillID, _Flag, "Flag")
THEN
ObjectClearFlag(_Player, _Flag, 0);

//Statuses applied by mastery skills
PROC
LLWEAPONEX_WeaponMastery_RemoveAppliedSkillStatuses((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryOnlyStatuses(_WeaponType, _SkillID, _Status)
THEN
RemoveStatus(_Player, _Status);
//END_REGION

//REGION WEAPON_MASTERY_EXPERIENCE

//Basic attack & weapon skill gains
IF
CharacterStatusAttempt(_Target, "LLWEAPONEX_WEAPONMASTERY_EXPERIENCE", (CHARACTERGUID)_Player)
AND
DB_IsPlayer(_Player)
AND
ObjectGetFlag(_Player, "LLWEAPONEX_DisableWeaponMasteryExperience", 0)
THEN
LLWEAPONEX_WeaponMastery_AddExperienceToActiveMasteries(_Player, 1, _Target);

/*
To reduce tooltip description lengths, the Runeblade apply status works as a mastery experience status
Additionally, Runeblades gain less experience since it's standard to dual-wield them.
*/
IF
CharacterStatusAttempt(_Target, "LLWEAPONEX_RUNEBLADE_APPLY_STATUS", (CHARACTERGUID)_Player)
AND
DB_IsPlayer(_Player)
AND
ObjectGetFlag(_Player, "LLWEAPONEX_DisableWeaponMasteryExperience", 0)
THEN
LLWEAPONEX_WeaponMastery_AddExperienceToActiveMasteries(_Player, 1, _Target);

//ArmCannon == Runic Cannon, a.k.a. rune weapon with fleeting ranged advantages
IF
CharacterStatusAttempt(_Target, "LLWEAPONEX_ARMCANNON_HIT", (CHARACTERGUID)_Player)
AND
DB_IsPlayer(_Player)
AND
ObjectGetFlag(_Player, "LLWEAPONEX_DisableWeaponMasteryExperience", 0)
THEN
LLWEAPONEX_WeaponMastery_AddExperienceToActiveMasteries(_Player, 1, _Target);

PROC
LLWEAPONEX_WeaponMastery_AddExperienceToActiveMasteries((CHARACTERGUID)_Player, (INTEGER)_Gain)
THEN
LLWEAPONEX_WeaponMastery_AddExperienceToActiveMasteries(_Player, _Gain, NULL_00000000-0000-0000-0000-000000000000);

PROC
LLWEAPONEX_WeaponMastery_AddExperienceToActiveMasteries((CHARACTERGUID)_Player, (INTEGER)_Gain, (GUIDSTRING)_Target)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _LevelVar, _EnabledFlag)
AND
LLWEAPONEX_QRY_WeaponTypeMasteryEnabled(_Player, _WeaponType)
AND
LLWEAPONEX_WeaponMastery_QRY_BelowMaxLevel(_Player, _WeaponType)
THEN
LLWEAPONEX_WeaponMastery_AddExperienceForWeaponType(_Player, _WeaponType, _Gain, _Target);

PROC
LLWEAPONEX_WeaponMastery_AddExperienceForWeaponType((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_Gain, (GUIDSTRING)_Target)
AND
NOT DB_LLWEAPONEX_WeaponMastery_PlayerData_Experience(_Player, _WeaponType, _, _)
THEN
LLWEAPONEX_WeaponMastery_InitMasteryVariables(_Player, _WeaponType);

PROC
LLWEAPONEX_WeaponMastery_AddExperienceForWeaponType((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_Gain, (GUIDSTRING)_Target)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _LevelVar, _EnabledFlag)
AND
DB_LLWEAPONEX_WeaponMastery_PlayerData_Experience(_Player, _WeaponType, _Level, _Experience)
AND
DB_LLWEAPONEX_WeaponMastery_MaxExperience(_Level, _Max)
AND
IntegerSum(_Experience, _Gain, _NextCurrent)
AND
NOT LLWEAPONEX_WeaponMastery_QRY_Internal_LeveledUp(_Player, _WeaponType, _Level, _NextCurrent, _Max)
THEN
LLWEAPONEX_WeaponMastery_StoreExperience(_Player, _WeaponType, _NextCurrent);
LLWEAPONEX_WeaponMastery_OnExperienceAdded(_Player, _WeaponType, _NextCurrent, _Max);

PROC
LLWEAPONEX_WeaponMastery_OnExperienceAdded((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_Current, (INTEGER)_Max)
AND
IntegertoString(_Current, _CurrentStr)
AND
IntegertoString(_Max, _MaxStr)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:OnExperienceAdded] Weapon Mastery [",_WeaponType,"] experience: [", _CurrentStr, "/",_MaxStr,"].");

PROC
LLWEAPONEX_WeaponMastery_StoreExperience((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_Experience)
AND
NOT DB_LLWEAPONEX_WeaponMastery_PlayerData_Experience(_Player, _WeaponType, _, _)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _LevelVar, _EnabledFlag)
AND
GetVarInteger(_Player, _LevelVar, _Level)
THEN
DB_LLWEAPONEX_WeaponMastery_PlayerData_Experience(_Player, _WeaponType, _Level, _Experience);

PROC
LLWEAPONEX_WeaponMastery_StoreExperience((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_Experience)
AND
DB_LLWEAPONEX_WeaponMastery_PlayerData_Experience(_Player, _WeaponType, _Level, _Lastxperience)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_PlayerData_Experience(_Player, _WeaponType, _Level, _Lastxperience);
DB_LLWEAPONEX_WeaponMastery_PlayerData_Experience(_Player, _WeaponType, _Level, _Experience);
LLWEAPONEX_WeaponMastery_StoreExperienceInVars(_Player, _WeaponType, _Level, _Experience);

PROC
LLWEAPONEX_WeaponMastery_StoreExperienceForLevel((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_Level, (INTEGER)_Experience)
AND
DB_LLWEAPONEX_WeaponMastery_PlayerData_Experience(_Player, _WeaponType, _LastLevel, _Lastxperience)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_PlayerData_Experience(_Player, _WeaponType, _LastLevel, _Lastxperience);

PROC
LLWEAPONEX_WeaponMastery_StoreExperienceForLevel((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_Level, (INTEGER)_Experience)
THEN
DB_LLWEAPONEX_WeaponMastery_PlayerData_Experience(_Player, _WeaponType, _Level, _Experience);
LLWEAPONEX_WeaponMastery_StoreExperienceInVars(_Player, _WeaponType, _Level, _Experience);

PROC
LLWEAPONEX_WeaponMastery_StoreExperienceInVars((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_Level, (INTEGER)_Experience)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _LevelVar, _EnabledFlag)
THEN
SetVarInteger(_Player, _CurrentXPVar, _Experience);
SetVarInteger(_Player, _LevelVar, _Level);

PROC
LLWEAPONEX_WeaponMastery_Internal_StoreMasteryProgression((CHARACTERGUID)_Player)
AND
NOT DB_LLWEAPONEX_WeaponMastery_PlayerData_Experience(_Player, _, _, _)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _LevelVar, _EnabledFlag)
AND
GetVarInteger(_Player, _LevelVar, _Level)
AND
GetVarInteger(_Player, _CurrentXPVar, _Experience)
AND
IntegerMax(0, _Level, _LevelClamped)
AND
IntegerMax(0, _Experience, _ExperienceClamped)
THEN
DB_LLWEAPONEX_WeaponMastery_PlayerData_Experience(_Player, _WeaponType, _LevelClamped, _ExperienceClamped);
//END_REGION

//REGION PARTY_WIDE_EXPERIENCE
PROC
LLWEAPONEX_WeaponMastery_AddPartyExperience((CHARACTERGUID)_PartyMember, (CHARACTERGUID)_Enemy)
AND
NOT DB_LLWEAPONEX_WeaponMastery_Temp_IteratingParty(_,_Enemy)
THEN
DB_LLWEAPONEX_WeaponMastery_Temp_IteratingParty(_PartyMember, _Enemy);
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:CharacterDying] Enemy died. Adding mastery experience to all party members.");
IterateParty(_PartyMember, "LLWEAPONEX_WeaponMastery_AddPartyExperience");
ProcObjectTimerCancel(_Enemy, "LLWEAPONEX_Timers_WeaponMastery_ClearPartyIteratorDB");
ProcObjectTimer(_Enemy, "LLWEAPONEX_Timers_WeaponMastery_ClearPartyIteratorDB", 50);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Enemy, "LLWEAPONEX_Timers_WeaponMastery_ClearPartyIteratorDB")
AND
DB_LLWEAPONEX_WeaponMastery_Temp_IteratingParty(_PartyMember, _Enemy)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_Temp_IteratingParty(_PartyMember, _Enemy);

/*
PROC
LLWEAPONEX_WeaponMastery_Internal_JustGainedExperienceFromWeaponAttack((CHARACTERGUID)_Player, (CHARACTERGUID)_Target)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_ListenForSkillDamage(_Player, _WeaponType)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_Temp_ListenForSkillDamage(_Player, _WeaponType);
*/

/*
PROC
Proc_ObjectLeftCombat(_Enemy, _CombatID)
AND
CharacterIsDead((CHARACTERGUID)_Enemy, 1)
AND
CombatGetInvolvedPlayer(_CombatID, 1, _Player)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:Proc_ObjectLeftCombat] Enemy died. Adding mastery experience to all party members.");
IterateParty(_Player, "LLWEAPONEX_WeaponMastery_AddPartyExperience");
*/

IF
StoryEvent((CHARACTERGUID)_Player, "LLWEAPONEX_WeaponMastery_AddPartyExperience")
AND
NOT QRY_IsSummonOrPartyFollower(_Player)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_IteratingParty(_PartyMember, _Enemy)
AND
CharacterIsInPartyWith(_Player, _PartyMember, 1)
AND
IsBoss(_Enemy, _IsBoss)
AND
IntegerProduct(_IsBoss, 2, _BossMult) // 2x exp for bosses
AND
IntegerSum(2, _BossMult, _AddExp)
THEN
LeaderLog_LogInt("DEBUG", "[LLWEAPONEX_01_WeaponMastery:LLWEAPONEX_WeaponMastery_AddPartyExperience] Adding [",_AddExp,"] party mastery experience to player.");
LLWEAPONEX_WeaponMastery_AddExperienceToActiveMasteries(_Player, _AddExp, _Enemy);
//END_REGION

//REGION EXPERIENCE_LISTENING_RESET
PROC
LLWEAPONEX_WeaponMastery_TS_RemoveListenEntries()
AND
DB_LLWEAPONEX_WeaponMastery_Temp_ListenForSkillDamage((CHARACTERGUID)_Player, (STRING)_WeaponType)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_Temp_ListenForSkillDamage(_Player, _WeaponType);
//END_REGION

//REGION LEVEL_UP
QRY
LLWEAPONEX_WeaponMastery_QRY_Internal_LeveledUp((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_Level, (INTEGER)_NextExperience, (INTEGER)_Max)
AND
_NextExperience >= _Max
AND
IntegerSum(_Level, 1, _NextMasteryLevel)
AND
IntegertoString(_NextMasteryLevel, _NextMasteryLevelStr)
AND
CharacterIsControlled(_Player, _IsControlled)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:MasteryLevelUp] Weapon Mastery [",_WeaponType,"] leveled up to [",_NextMasteryLevelStr,"].");
LLWEAPONEX_WeaponMastery_StoreExperienceForLevel(_Player, _WeaponType, _NextMasteryLevel, 0);
LLWEAPONEX_WeaponMastery_ShowLevelUpText(_Player, _WeaponType, _NextMasteryLevel, _IsControlled);
LLWEAPONEX_WeaponMastery_OnMasteryLeveledUp(_Player, _WeaponType, _NextMasteryLevel);
LLWEAPONEX_WeaponMastery_SetProgressionFlags(_Player, _WeaponType, _Level, _NextMasteryLevel);

PROC
LLWEAPONEX_WeaponMastery_ShowLevelUpText((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_MasteryLevel, 1)
AND
IntegertoString(_MasteryLevel, _LevelStr)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryNames(_WeaponType, _MasteryName)
THEN
LeaderLog_LogTarget("NOTIFICATION", _Player, _MasteryName," <font color='#f7ba14'>increased to level</font> <font color='#00FF00'>",_LevelStr,"</font>");

PROC
LLWEAPONEX_WeaponMastery_ShowLevelUpText((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_MasteryLevel, 0)
AND
IntegertoString(_MasteryLevel, _LevelStr)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryNames(_WeaponType, _MasteryName)
THEN
LeaderLog_LogTarget("STATUS", _Player, _MasteryName," <font color='#f7ba14'>increased to level</font> <font color='#00FF00'>",_LevelStr,"</font>");

/*
PROC
LLWEAPONEX_WeaponMastery_OnMasteryLeveledUp((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_MasteryLevel)
AND
IntegertoString(_MasteryLevel, _LevelStr)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryNames(_WeaponType, _MasteryName)
AND
LeaderLog_QRY_Log("COMBINE", _MasteryName," <font color='#f7ba14'>increased to level</font> <font color='#FFFF00'>",_LevelStr,"</font>")
AND
DB_LeaderLog_Temp_CombinedString(_Str)
THEN
NOT DB_LeaderLog_Temp_CombinedString(_Str);
ShowNotification(_Player, _Str);
*/

PROC
LLWEAPONEX_WeaponMastery_OnMasteryLeveledUp((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_MasteryLevel)
AND
DB_LLWEAPONEX_WeaponMastery_Progression(_WeaponType, _Level, _SkillID, _Type)
AND
_MasteryLevel >= _Level
AND
NOT DB_LLWEAPONEX_WeaponMastery_Learned(_Player, _WeaponType, _SkillID)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:OnMasteryLeveledUp] Weapon Mastery [",_WeaponType,"] leveled up. Unlocking skill [",_SkillID,"].");
DB_LLWEAPONEX_WeaponMastery_Learned(_Player, _WeaponType, _SkillID);
LLWEAPONEX_WeaponMastery_OnSkillLearned(_Player, _WeaponType, _SkillID, _Type);

PROC
LLWEAPONEX_WeaponMastery_SetProgressionFlags((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_CurrentLevel, (INTEGER)_NextLevel)
AND
_NextLevel > 0
AND
IntegertoString(_NextLevel, _LevelStr)
AND
StringConcatenate(_WeaponType, "_Unlocked_Level", _Str1)
AND
StringConcatenate(_Str1, _LevelStr, _UnlockedFlag)
THEN
ObjectSetFlag(_Player, _UnlockedFlag, 0);
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:SetProgressionFlags] Unlocked flag [",_UnlockedFlag,"].");

//Unlock every previous flag
PROC
LLWEAPONEX_WeaponMastery_SetProgressionFlags((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_CurrentLevel, (INTEGER)_NextLevel)
AND
_NextLevel > 0
AND
IntegerSubtract(_NextLevel, _CurrentLevel, _Diff)
AND
_Diff > 1
AND
IntegerSubtract(_NextLevel, 1, _PreviousLevel)
AND
_PreviousLevel > 0
AND
IntegertoString(_PreviousLevel, _LevelStr)
AND
StringConcatenate(_WeaponType, "_Unlocked_Level", _Str1)
AND
StringConcatenate(_Str1, _LevelStr, _UnlockedFlag)
AND
ObjectGetFlag(_Player, _UnlockedFlag, 0)
THEN
ObjectSetFlag(_Player, _UnlockedFlag, 0);
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:SetProgressionFlags] Unlocking flag [",_UnlockedFlag,"] and all previous flags.");
LLWEAPONEX_WeaponMastery_Internal_UnlockPreviousProgressionFlags(_Player, _WeaponType, _PreviousLevel);

PROC
LLWEAPONEX_WeaponMastery_Internal_UnlockPreviousProgressionFlags((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_Level)
AND
_Level > 0
AND
IntegerSubtract(_Level, 1, _PreviousLevel)
AND
_PreviousLevel > 0
AND
IntegertoString(_PreviousLevel, _LevelStr)
AND
StringConcatenate(_WeaponType, "_Unlocked_Level", _Str1)
AND
StringConcatenate(_Str1, _LevelStr, _UnlockedFlag)
AND
ObjectGetFlag(_Player, _UnlockedFlag, 0)
THEN
ObjectSetFlag(_Player, _UnlockedFlag, 0);
//LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:UnlockPreviousProgressionFlags] Unlocked flag [",_UnlockedFlag,"].");
LLWEAPONEX_WeaponMastery_Internal_UnlockPreviousProgressionFlags(_Player, _WeaponType, _PreviousLevel);
//END_REGION

//REGION STATUS_UNLOCKING
/*
IF
CharacterStatusApplied(_Player, _Status, _)
AND
DB_LLWEAPONEX_WeaponMastery_StatusUnlocking(_WeaponType, _SkillID, _Status, _InfoStatus)
AND
DB_LLWEAPONEX_WeaponMastery_Learned(_Player, _WeaponType, _SkillID)
THEN
LLWEAPONEX_WeaponMastery_UnlockSkill(_Player, _WeaponType, _SkillID);

IF
CharacterStatusRemoved(_Player, _Status, _)
AND
DB_LLWEAPONEX_WeaponMastery_StatusUnlocking(_WeaponType, _SkillID, _Status, _InfoStatus)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveSkills(_Player, _WeaponType, _SkillID, _Skill)
THEN
LLWEAPONEX_WeaponMastery_RemoveSkill(_Player, _WeaponType, _SkillID);
*/

PROC
LLWEAPONEX_WeaponMastery_ApplyInfoStatus((CHARACTERGUID)_Player, (STRING)_Status, (STRING)_InfoStatus, 0)
AND
_InfoStatus != ""
AND
HasActiveStatus(_Player, _InfoStatus, 0)
AND
GetStatusTurns(_Player, _Status, _Turns)
AND
Real(_Turns, _TurnsR)
AND
RealProduct(_TurnsR, 6.0, _Duration)
THEN
ApplyStatus(_Player, _InfoStatus, _Duration, 1, _Player);

PROC
LLWEAPONEX_WeaponMastery_ApplyInfoStatus((CHARACTERGUID)_Player, (STRING)_Status, (STRING)_InfoStatus, 1)
AND
_InfoStatus != ""
AND
GetStatusTurns(_Player, _Status, _Turns)
AND
Real(_Turns, _TurnsR)
AND
RealProduct(_TurnsR, 6.0, _Duration)
THEN
ApplyStatus(_Player, _InfoStatus, _Duration, 1, _Player);

QRY
LLWEAPONEX_WeaponMastery_QRY_HasAnySkillUnlockStatus((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID)
AND
DB_LLWEAPONEX_WeaponMastery_StatusUnlocking(_WeaponType, _SkillID, _Status, _InfoStatus)
AND
HasActiveStatus(_Player, _Status, 1)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_RemoveInfoStatus((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID, (STRING)_InfoStatus)
THEN
LLWEAPONEX_WeaponMastery_RemoveInfoStatus(_Player, _WeaponType, _SkillID, _InfoStatus);

PROC
LLWEAPONEX_WeaponMastery_RemoveInfoStatus((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID, (STRING)_InfoStatus)
AND
_InfoStatus != ""
AND
NOT LLWEAPONEX_WeaponMastery_QRY_HasAnySkillUnlockStatus(_Player, _WeaponType, _SkillID)
THEN
RemoveStatus(_Player, _InfoStatus);
//END_REGION

//REGION BONUS_STATUS
PROC
LLWEAPONEX_WeaponMastery_ApplyBonusStatus((CHARACTERGUID)_Char)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_ActiveMasteries(_Char, _Item, _WeaponType, _EnabledFlag)
THEN
LLWEAPONEX_WeaponMastery_ApplyBonusStatus(_Char, _WeaponType);

PROC
LLWEAPONEX_WeaponMastery_ApplyBonusStatus((CHARACTERGUID)_Char, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_PlayerData_Experience(_Char, _WeaponType, _CurrentLevel, _Experience)
THEN
LLWEAPONEX_WeaponMastery_ApplyBonusStatus(_Char, _WeaponType, _CurrentLevel);

PROC
LLWEAPONEX_WeaponMastery_ApplyBonusStatus((CHARACTERGUID)_Char, (STRING)_WeaponType, (INTEGER)_CurrentLevel)
AND
DB_LLWEAPONEX_WeaponMastery_BonusStatus(_CurrentLevel, _Status)
AND
HasActiveStatus(_Char, _Status, 0)
THEN
ApplyStatus(_Char, _Status, -1.0, 1, _Char);

PROC
LLWEAPONEX_WeaponMastery_OnMasteryActivated((CHARACTERGUID)_Char, (STRING)_WeaponType)
THEN
LLWEAPONEX_WeaponMastery_ApplyBonusStatus(_Char, _WeaponType);

PROC
LLWEAPONEX_WeaponMastery_OnMasteryLeveledUp((CHARACTERGUID)_Char, (STRING)_WeaponType, (INTEGER)_MasteryLevel)
AND
LLWEAPONEX_WeaponMastery_QRY_HasActiveMastery(_Char, _WeaponType)
THEN
LLWEAPONEX_WeaponMastery_ApplyBonusStatus(_Char, _WeaponType, _MasteryLevel);

PROC
LLWEAPONEX_WeaponMastery_ClearBonusStatus((CHARACTERGUID)_Char)
AND
DB_LLWEAPONEX_WeaponMastery_BonusStatus(_Level, _Status)
THEN
RemoveStatus(_Char, _Status);

PROC
LLWEAPONEX_WeaponMastery_OnMasteryDeactivated((CHARACTERGUID)_Char, (STRING)_WeaponType)
THEN
LLWEAPONEX_WeaponMastery_ClearBonusStatus(_Char);
//END_REGION

//REGION MASTERY_LEVEL_UNLOCKED_TAGS
PROC
LLWEAPONEX_WeaponMastery_OnMasteryLeveledUp((CHARACTERGUID)_Char, (STRING)_WeaponType, (INTEGER)_MasteryLevel)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryLevelTags(_WeaponType, _Level, _UnlockedMasteryLevelTag)
AND
_Level <= _MasteryLevel
AND
IsTagged(_Char, _UnlockedMasteryLevelTag, 0)
THEN
LeaderLib_Tags_PreserveTag(_Char, _UnlockedMasteryLevelTag);
ApplyStatus(_Char, "LLWEAPONEX_REFRESH_UI", 0.0);
LeaderLog_Log("DEBUG", "[LLWEAPONEX_01_WeaponMastery:OnMasteryLeveledUp] Set tag [",_UnlockedMasteryLevelTag,"] on character for mastery [",_WeaponType,"].");
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LLWEAPONEX_00_PostCC"