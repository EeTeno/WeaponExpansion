Version 1
SubGoalCombiner SGC_AND
INITSECTION
LLWEAPONEX_WeaponMastery_InitSettings();
KBSECTION

//REGION SETTINGS

PROC
LLWEAPONEX_WeaponMastery_InitSettings()
THEN

DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_Greatbow", "<font color='#00FF7F'>Greatbow Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Greatbow", 0, "<font color='#FDFFEA'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Greatbow", 1, "<font color='#DDFFB3'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Greatbow", 2, "<font color='#94E963'>Journeyman Slayer</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Greatbow", 3, "<font color='#52D43A'>Expert Slayer</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Greatbow", 4, "<font color='#28FF00'>Master Dragon Slayer</font>");

//DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _MaxXPVar, _LevelVar)
DB_LLWEAPONEX_WeaponMastery_MasteryVariables("LLWEAPONEX_Greatbow", "LLWEAPONEX_WM_Greatbow_Exp", "LLWEAPONEX_WM_Greatbow_ExpMax", "LLWEAPONEX_WM_Greatbow_Level");
//Which skill are unlocked at specific mastery levels
//DB_LLWEAPONEX_WeaponMastery_SkillProgression(_WeaponType, _Level, _SkillID, _UnlockEvent)
DB_LLWEAPONEX_WeaponMastery_SkillProgression("LLWEAPONEX_Greatbow", 0, "PiercingShot", "Any");
DB_LLWEAPONEX_WeaponMastery_SkillProgression("LLWEAPONEX_Greatbow", 1, "KnockbackShot", "Any");

DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "PiercingShot", "DWARF",   1, "LLWEAPONEX_WS_GREATBOWS_PIERCINGSHOT_DWARF_FEMALE");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "PiercingShot", "DWARF",   0, "LLWEAPONEX_WS_GREATBOWS_PIERCINGSHOT_DWARF_MALE");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "PiercingShot", "ELF",     1, "LLWEAPONEX_WS_GREATBOWS_PIERCINGSHOT_ELF_FEMALE");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "PiercingShot", "ELF",     0, "LLWEAPONEX_WS_GREATBOWS_PIERCINGSHOT_ELF_MALE");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "PiercingShot", "HUMAN",   1, "LLWEAPONEX_WS_GREATBOWS_PIERCINGSHOT_HUMAN_FEMALE");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "PiercingShot", "HUMAN",   0, "LLWEAPONEX_WS_GREATBOWS_PIERCINGSHOT_HUMAN_MALE");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "PiercingShot", "LIZARD",  1, "LLWEAPONEX_WS_GREATBOWS_PIERCINGSHOT_LIZARD_FEMALE");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "PiercingShot", "LIZARD",  0, "LLWEAPONEX_WS_GREATBOWS_PIERCINGSHOT_LIZARD_MALE");

DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "KnockbackShot", "DWARF",   1, "LLWEAPONEX_WS_GREATBOWS_KNOCKBACK_DWARF_FEMALE");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "KnockbackShot", "DWARF",   0, "LLWEAPONEX_WS_GREATBOWS_KNOCKBACK_DWARF_MALE");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "KnockbackShot", "ELF",     1, "LLWEAPONEX_WS_GREATBOWS_KNOCKBACK_ELF_FEMALE");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "KnockbackShot", "ELF",     0, "LLWEAPONEX_WS_GREATBOWS_KNOCKBACK_ELF_MALE");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "KnockbackShot", "HUMAN",   1, "LLWEAPONEX_WS_GREATBOWS_KNOCKBACK_HUMAN_FEMALE");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "KnockbackShot", "HUMAN",   0, "LLWEAPONEX_WS_GREATBOWS_KNOCKBACK_HUMAN_MALE");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "KnockbackShot", "LIZARD",  1, "LLWEAPONEX_WS_GREATBOWS_KNOCKBACK_LIZARD_FEMALE");
DB_LLWEAPONEX_WeaponMastery_RacialSkills("LLWEAPONEX_Greatbow", "KnockbackShot", "LIZARD",  0, "LLWEAPONEX_WS_GREATBOWS_KNOCKBACK_LIZARD_MALE");

//Runeblades
DB_LLWEAPONEX_WeaponMastery_MasteryNames("LLWEAPONEX_Runeblade", "<font color='#2DF9FF'>Runeblade Mastery</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Runeblade", 0, "<font color='#FDFFEA'>Beginner</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Runeblade", 1, "<font color='#9DFCFF'>Novice</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Runeblade", 2, "<font color='#6CE3F5'>Journeyman Runekeeper</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Runeblade", 3, "<font color='#6CF5E9'>Expert Runekeeper</font>");
DB_LLWEAPONEX_WeaponMastery_RankNames("LLWEAPONEX_Runeblade", 4, "<font color='#33FFB8'>Master of Runes</font>");

DB_LLWEAPONEX_WeaponMastery_MasteryVariables("LLWEAPONEX_Runeblade", "LLWEAPONEX_WM_Runeblade_Exp", "LLWEAPONEX_WM_Runeblade_ExpMax", "LLWEAPONEX_WM_Runeblade_Level");

DB_LLWEAPONEX_WeaponMastery_SkillProgression("LLWEAPONEX_Runeblade", 1, "PoisonBurst", "STATUS");
DB_LLWEAPONEX_WeaponMastery_Skills("LLWEAPONEX_Runeblade", "PoisonBurst", "LLWEAPONEX_WS_RUNEBLADE_POISONBURST");
DB_LLWEAPONEX_WeaponMastery_StatusUnlocking("LLWEAPONEX_Runeblade", "PoisonBurst", "LLWEAPONEX_ACTIVATE_RUNEBLADE_POISON", "LLWEAPONEX_RUNEBLADE_MASTERY_POISON");
DB_LLWEAPONEX_WeaponMastery_StatusUnlocking("LLWEAPONEX_Runeblade", "PoisonBurst", "LLWEAPONEX_ACTIVATE_RUNEBLADE_CONTAMINATION", "LLWEAPONEX_RUNEBLADE_MASTERY_POISON");
DB_LLWEAPONEX_WeaponMastery_StatusUnlocking("LLWEAPONEX_Runeblade", "PoisonBurst", "LLWEAPONEX_ACTIVATE_RUNEBLADE_VENOM", "LLWEAPONEX_RUNEBLADE_MASTERY_POISON");
//END_REGION

//REGION QUERIES
QRY
LLWEAPONEX_IgnoreWeapon((ITEMGUID)_Weapon)
AND
IsTagged(_Weapon, "LLMIME_MIMICKED_WEAPON", 1)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_HasActiveMastery((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_ActiveMasteries(_Player, _Item, _WeaponType)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_HasActiveMastery((CHARACTERGUID)_Player, (STRING)_WeaponType, (ITEMGUID)_IgnoreItem)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_ActiveMasteries(_Player, _Item, _WeaponType)
AND
_Item != _IgnoreItem
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_HasActiveSkills((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Player, _WeaponType, _SkillID, _Status)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_HasLearnedSkills((CHARACTERGUID)_Player)
AND
DB_LLWEAPONEX_WeaponMastery_Learned(_Player, _WeaponType, _SkillID)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_BelowMaxLevel((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _MaxXPVar, _LevelVar)
AND
GetVarInteger(_Player, _LevelVar, _CurrentLevel)
AND
DB_LLWEAPONEX_WeaponMastery_SkillProgression(_WeaponType, _Level, _SkillID, _UnlockEvent)
AND
_CurrentLevel < _Level
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_BelowMaxLevel((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_LevelVar)
AND
GetVarInteger(_Player, _LevelVar, _CurrentLevel)
AND
DB_LLWEAPONEX_WeaponMastery_SkillProgression(_WeaponType, _Level, _SkillID, _UnlockEvent)
AND
_CurrentLevel < _Level
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_IsRacialSkill((STRING)_WeaponType, (STRING)_SkillID)
AND
DB_LLWEAPONEX_WeaponMastery_RacialSkills(_WeaponType, _SkillID, _RaceTag, _IsFemale, _Status)
THEN
DB_NOOP(1);
//END_REGION

//REGION SKILL_UNLOCKING
IF
TextEventSet("llweap_unlockallskills")
AND
DB_IsPlayer(_Player)
AND
DB_LLWEAPONEX_WeaponMastery_SkillProgression(_WeaponType, _Level, _SkillID, _UnlockEvent)
AND
NOT DB_LLWEAPONEX_WeaponMastery_Learned(_Player, _WeaponType, _SkillID)
THEN
DB_LLWEAPONEX_WeaponMastery_Learned(_Player, _WeaponType, _SkillID);
LLWEAPONEX_WeaponMastery_OnSkillLearned(_Player, _WeaponType, _SkillID);

PROC
LLWEAPONEX_WeaponMastery_OnSkillLearned((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID)
AND
DB_LLWEAPONEX_WeaponMastery_SkillProgression(_WeaponType, _Level, _SkillID, "Any")
AND
NOT LLWEAPONEX_WeaponMastery_QRY_IsRacialSkill(_WeaponType, _SkillID)
THEN
LLWEAPONEX_WeaponMastery_UnlockSkill(_Player, _WeaponType, _SkillID);

PROC
LLWEAPONEX_WeaponMastery_OnSkillLearned((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID)
AND
DB_LLWEAPONEX_WeaponMastery_SkillProgression(_WeaponType, _Level, _SkillID, "Any")
AND
LLWEAPONEX_WeaponMastery_QRY_IsRacialSkill(_WeaponType, _SkillID)
AND
CharacterGetRace(_Player, 1, _Race)
AND
DB_LeaderLib_RaceTags(_Race, _RaceTag)
THEN
LLWEAPONEX_WeaponMastery_UnlockSkillForRace(_Player, _WeaponType, _SkillID, _RaceTag);

PROC
LLWEAPONEX_WeaponMastery_UnlockSkill((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID)
AND
NOT DB_LLWEAPONEX_WeaponMastery_ActiveSkills(_Player, _WeaponType, _SkillID, _)
AND
DB_LLWEAPONEX_WeaponMastery_Skills(_WeaponType, _SkillID, _Status)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:UnlockSkill] Unlocking skill [",_SkillID,"](",_Status,") for weapon type [",_WeaponType,"].");
ApplyStatus(_Player, _Status, -1.0, 1, _Player);
DB_LLWEAPONEX_WeaponMastery_ActiveSkills(_Player, _WeaponType, _SkillID, _Status);

PROC
LLWEAPONEX_WeaponMastery_UnlockSkillForRace((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID, (STRING)_RaceTag)
AND
IsTagged(_Player, "FEMALE", _IsFemale)
AND
DB_LLWEAPONEX_WeaponMastery_RacialSkills(_WeaponType, _SkillID, _RaceTag, _IsFemale, _Status)
AND
NOT DB_LLWEAPONEX_WeaponMastery_Temp_SkillResolved(_Player, _WeaponType, _SkillID)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:UnlockSkillForRace] Unlocking skill [",_SkillID,"](",_Status,") for weapon type [",_WeaponType,"].");
DB_LLWEAPONEX_WeaponMastery_Temp_SkillResolved(_Player, _WeaponType, _SkillID);
//CharacterAddSkill(_Player, _Skill);
ApplyStatus(_Player, _Status, -1.0, 1, _Player);
DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Player, _WeaponType, _SkillID, _Status);

PROC
LLWEAPONEX_WeaponMastery_UnlockSkillForRace((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID, (STRING)_RaceTag)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_SkillResolved(_Player, _WeaponType, _SkillID)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_Temp_SkillResolved(_Player, _WeaponType, _SkillID);
//END_REGION

//REGION WEAPON_MASTERY_INITIAL_LEVEL
QRY
LLWEAPONEX_WeaponMastery_QRY_MasteryLevelSet((CHARACTERGUID)_Player, (STRING)_MasteryLevelVariable)
AND
GetVarInteger(_Player, _MasteryLevelVariable, _MasteryLevel)
AND
_MasteryLevel >= 0
THEN
DB_NOOP(1);

PROC
LLWEAPONEX_WeaponMastery_OnWeaponEquipped((CHARACTERGUID)_Player, (ITEMGUID)_Item, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _MaxXPVar, _LevelVar)
AND
NOT LLWEAPONEX_WeaponMastery_QRY_MasteryLevelSet(_Player, _LevelVar)
THEN
SetVarInteger(_Player, _CurrentXPVar, 0);
SetVarInteger(_Player, _MaxXPVar, 100);
SetVarInteger(_Player, _LevelVar, 0);
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:OnWeaponEquipped] Weapon Mastery [",_WeaponType,"] was set to level 0 for character.");
//END_REGION

//REGION EQUIPPING
//Mastery weapon equipped
IF
ItemEquipped(_Item, _Player)
AND
DB_IsPlayer(_Player)
AND
NOT LLWEAPONEX_IgnoreWeapon(_Item)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _MaxXPVar, _LevelVar)
AND
IsTagged(_Item, _WeaponType, 1)
THEN
LLWEAPONEX_WeaponMastery_OnWeaponEquipped(_Player, _Item, _WeaponType);

PROC
LLWEAPONEX_WeaponMastery_OnWeaponEquipped((CHARACTERGUID)_Player, (ITEMGUID)_Item, (STRING)_WeaponType)
THEN
DB_LLWEAPONEX_WeaponMastery_Temp_ActiveMasteries(_Player, _Item, _WeaponType);
LLWEAPONEX_WeaponMastery_OnMasteryActivated(_Player, _WeaponType);

PROC
LLWEAPONEX_WeaponMastery_OnMasteryActivated((CHARACTERGUID)_Player, (STRING)_WeaponType)
THEN
DB_NOOP(1);

PROC
LLWEAPONEX_WeaponMastery_OnMasteryDeactivated((CHARACTERGUID)_Player, (STRING)_WeaponType)
THEN
DB_NOOP(1);
//END_REGION

//REGION UNEQUIP_REMOVAL_EVENT
//Delay removal in case the same weapon type is being equipped
IF
ItemUnEquipped(_Item, _Player)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_ActiveMasteries(_Player, _Item, _WeaponType)
AND
NOT LLWEAPONEX_WeaponMastery_QRY_HasActiveMastery(_Player, _WeaponType, _Item)
AND
LLWEAPONEX_WeaponMastery_QRY_HasActiveSkills(_Player, _WeaponType)
THEN
DB_LLWEAPONEX_WeaponMastery_Temp_RemoveWeaponSkills(_Player, _WeaponType);
ProcObjectTimerCancel(_Player, "LLWEAPONEX_Timers_RemoveWeaponMasterySkills");
ProcObjectTimer(_Player, "LLWEAPONEX_Timers_RemoveWeaponMasterySkills", 500);

IF
ItemUnEquipped(_Item, _Player)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_ActiveMasteries(_Player, _Item, _WeaponType)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_Temp_ActiveMasteries(_Player, _Item, _WeaponType);
LLWEAPONEX_WeaponMastery_OnMasteryDeactivated(_Player, _WeaponType);

PROC
LLWEAPONEX_WeaponMastery_OnWeaponEquipped((CHARACTERGUID)_Player, (ITEMGUID)_Item, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_RemoveWeaponSkills(_Player, _WeaponType)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_Temp_RemoveWeaponSkills(_Player, _WeaponType);
ProcObjectTimerCancel(_Player, "LLWEAPONEX_Timers_RemoveWeaponMasterySkills");

PROC
LLWEAPONEX_WeaponMastery_OnWeaponEquipped((CHARACTERGUID)_Player, (ITEMGUID)_Item, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_Learned(_Player, _WeaponType, _SkillID)
THEN
LLWEAPONEX_WeaponMastery_OnSkillLearned(_Player, _WeaponType, _SkillID);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Player, "LLWEAPONEX_Timers_RemoveWeaponMasterySkills")
AND
DB_LLWEAPONEX_WeaponMastery_Temp_RemoveWeaponSkills(_Player, _WeaponType)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_Temp_RemoveWeaponSkills(_Player, _WeaponType);
LLWEAPONEX_WeaponMastery_RemoveSkills(_Player, _WeaponType);
//END_REGION

//REGION RESURRECTION_REAPPLY
IF
CharacterStatusRemoved(_Player, "RESURRECT", _)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveSkills(_Player, _WeaponType, _SkillID, _Status)
THEN
ApplyStatus(_Player, _Status, -1.0, 1, _Player);

IF
CharacterStatusRemoved(_Player, "RESURRECT", _)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Player, _WeaponType, _SkillID, _Status)
THEN
ApplyStatus(_Player, _Status, -1.0, 1, _Player);
//END_REGION

//REGION RACE_CHANGED_EVENTS
IF
CharacterPolymorphedInto(_Player, _Race)
AND
LLWEAPONEX_QRY_HasRacialSkills(_Player)
AND
DB_LeaderLib_RaceTags(_Race, _RaceTag)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Player, _WeaponType, _SkillID, _Status)
THEN
//CharacterRemoveSkill(_Player, _Skill);
RemoveStatus(_Player, _Status);
NOT DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Player, _WeaponType, _SkillID, _Status);
LLWEAPONEX_WeaponMastery_UnlockSkillForRace(_Player, _WeaponType, _SkillID, _RaceTag);

IF
ObjectTransformed(_Player, _Template)
AND
ObjectIsCharacter((CHARACTERGUID)_Player, 1)
AND
LLWEAPONEX_QRY_HasRacialSkills(_Player)
AND
GetTemplate(_Player, _RaceTemplate)
AND
DB_LeaderLib_RaceTemplates(_RaceTag, _IsUndead, _IsFemale, _RaceTemplate)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Player, _WeaponType, _SkillID, _Status)
THEN
//CharacterRemoveSkill(_Player, _Skill);
RemoveStatus(_Player, _Status);
NOT DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Player, _WeaponType, _SkillID, _Status);
LLWEAPONEX_WeaponMastery_UnlockSkillForRace(_Player, _WeaponType, _SkillID, _RaceTag);

IF
CharacterStoppedPolymorph(_Player)
AND
LLWEAPONEX_QRY_HasRacialSkills(_Player)
AND
CharacterGetRace(_Player, 0, _Race)
AND
DB_LeaderLib_RaceTags(_Race, _RaceTag)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Player, _WeaponType, _SkillID, _Status)
THEN
//CharacterRemoveSkill(_Player, _Skill);
RemoveStatus(_Player, _Status);
NOT DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Player, _WeaponType, _SkillID, _Status);
LLWEAPONEX_WeaponMastery_UnlockSkillForRace(_Player, _WeaponType, _SkillID, _RaceTag);

QRY
LLWEAPONEX_QRY_HasRacialSkills((CHARACTERGUID)_Player)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Player, _WeaponType, _SkillID, _Status)
THEN
DB_NOOP(1);
//END_REGION

//REGION SKILL_REMOVAL
PROC
LLWEAPONEX_WeaponMastery_RemoveSkill((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveSkills(_Player, _WeaponType, _SkillID, _Status)
THEN
RemoveStatus(_Player, _Status);
NOT DB_LLWEAPONEX_WeaponMastery_ActiveSkills(_Player, _WeaponType, _SkillID, _Status);

PROC
LLWEAPONEX_WeaponMastery_RemoveSkills((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveSkills(_Player, _WeaponType, _SkillID, _Status)
THEN
//CharacterRemoveSkill(_Player, _Skill);
RemoveStatus(_Player, _Status);
NOT DB_LLWEAPONEX_WeaponMastery_ActiveSkills(_Player, _WeaponType, _SkillID, _Status);

PROC
LLWEAPONEX_WeaponMastery_RemoveSkills((CHARACTERGUID)_Player, (STRING)_WeaponType)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Player, _WeaponType, _SkillID, _Status)
THEN
//CharacterRemoveSkill(_Player, _Skill);
RemoveStatus(_Player, _Status);
NOT DB_LLWEAPONEX_WeaponMastery_ActiveRacialSkills(_Player, _WeaponType, _SkillID, _Status);
//END_REGION

//REGION DEFAULT_WEAPON_SKILLS
//Default weapon skill
PROC
LLWEAPONEX_WeaponMastery_OnWeaponEquipped((CHARACTERGUID)_Player, (ITEMGUID)_Item, "LLWEAPONEX_Greatbow")
AND
NOT DB_LLWEAPONEX_WeaponMastery_Learned(_Player, "LLWEAPONEX_Greatbow", "PiercingShot")
THEN
DB_LLWEAPONEX_WeaponMastery_Learned(_Player, "LLWEAPONEX_Greatbow", "PiercingShot");
//END_REGION

//REGION WEAPON_MASTERY_EXPERIENCE

//Basic attack & weapon skill gains
IF
CharacterStatusAttempt(_Target, "LLWEAPONEX_WEAPONMASTERY_EXPERIENCE", (CHARACTERGUID)_Player)
AND
CharacterIsPlayer(_Player, 1)
AND
ObjectGetFlag(_Player, "LLWEAPONEX_DisableWeaponMasteryExperience", 0)
THEN
LLWEAPONEX_WeaponMastery_GainExperience(_Player, 100);
DB_LLWEAPONEX_WeaponMastery_JustGainedExperienceFromWeaponAttack(_Player, _Target);

/*
To reduce tooltip description lengths, the Runeblade apply status works as a mastery experience status
Additionally, Runeblades gain less experience since it's standard to dual-wield them.
*/
IF
CharacterStatusAttempt(_Target, "LLWEAPONEX_RUNEBLADE_APPLY_STATUS", (CHARACTERGUID)_Player)
AND
CharacterIsPlayer(_Player, 1)
AND
ObjectGetFlag(_Player, "LLWEAPONEX_DisableWeaponMasteryExperience", 0)
THEN
LLWEAPONEX_WeaponMastery_GainExperience(_Player, 50);
DB_LLWEAPONEX_WeaponMastery_JustGainedExperienceFromWeaponAttack(_Player, _Target);

IF
CharacterStatusRemoved(_Target, "HIT", _)
AND
DB_LLWEAPONEX_WeaponMastery_JustGainedExperienceFromWeaponAttack(_Player, _Target)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_JustGainedExperienceFromWeaponAttack(_Player, _Target);

PROC
LLWEAPONEX_WeaponMastery_GainExperience((CHARACTERGUID)_Player, (INTEGER)_BaseExperience)
AND
CharacterGetEquippedItem(_Player, "Weapon", _Item)
AND
IsTagged((ITEMGUID)_Item, "LLWEAPONEX_WeaponMasteryEnabled", 1)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _MaxXPVar, _LevelVar)
AND
IsTagged(_Item, _WeaponType, 1)
AND
LLWEAPONEX_WeaponMastery_QRY_BelowMaxLevel(_Player, _WeaponType, _LevelVar)
THEN
LLWEAPONEX_WeaponMastery_AddExperience(_Player, _Item, _WeaponType, _BaseExperience);

PROC
LLWEAPONEX_WeaponMastery_GainExperience((CHARACTERGUID)_Player, (INTEGER)_BaseExperience)
AND
CharacterGetEquippedItem(_Player, "Shield", _Item)
AND
IsTagged((ITEMGUID)_Item, "LLWEAPONEX_WeaponMasteryEnabled", 1)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _MaxXPVar, _LevelVar)
AND
IsTagged(_Item, _WeaponType, 1)
AND
LLWEAPONEX_WeaponMastery_QRY_BelowMaxLevel(_Player, _WeaponType, _LevelVar)
THEN
LLWEAPONEX_WeaponMastery_AddExperience(_Player, _Item, _WeaponType, _BaseExperience);

//Skill-based gains
IF
SkillCast(_Player, _Skill, _, _)
AND
CharacterIsPlayer(_Player, 1)
AND
DB_LLWEAPONEX_WeaponMastery_RacialSkills(_WeaponType, _SkillID, _RaceTag, _IsFemale, _Status)
AND
ObjectGetFlag(_Player, "LLWEAPONEX_DisableWeaponMasteryExperience", 0)
AND
LLWEAPONEX_WeaponMastery_QRY_BelowMaxLevel(_Player, _WeaponType)
THEN
DB_LLWEAPONEX_WeaponMastery_Temp_ListenForSkillDamage(_Player, _WeaponType);

//Cancel gaining experience from skillcasts if it's a weapon-based skill
IF
CharacterStatusApplied(_Target, "HIT", (CHARACTERGUID)_Player)
AND
DB_LLWEAPONEX_WeaponMastery_JustGainedExperienceFromWeaponAttack(_Player, _Target)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_ListenForSkillDamage(_Player, _WeaponType)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_Temp_ListenForSkillDamage(_Player, _WeaponType);

IF
CharacterStatusApplied(_Target, "HIT", (CHARACTERGUID)_Player)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_ListenForSkillDamage(_Player, _WeaponType)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_Temp_ListenForSkillDamage(_Player, _WeaponType);
LLWEAPONEX_WeaponMastery_GainExperienceWithType(_Player, _WeaponType, 175);

PROC
LLWEAPONEX_WeaponMastery_GainExperienceWithType((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_BaseExperience)
AND
CharacterGetEquippedItem(_Player, "Weapon", _Item)
AND
IsTagged(_Item, _WeaponType, 1)
AND
IsTagged((ITEMGUID)_Item, "LLWEAPONEX_WeaponMasteryEnabled", 1)
AND
IsTagged(_Item, "LLWEAPONEX_WeaponMasteryComplete", 0)
THEN
LLWEAPONEX_WeaponMastery_AddExperience(_Player, _Item, _WeaponType, _BaseExperience);

PROC
LLWEAPONEX_WeaponMastery_GainExperienceWithType((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_BaseExperience)
AND
CharacterGetEquippedItem(_Player, "Shield", _Item)
AND
IsTagged(_Item, _WeaponType, 1)
AND
IsTagged((ITEMGUID)_Item, "LLWEAPONEX_WeaponMasteryEnabled", 1)
AND
IsTagged(_Item, "LLWEAPONEX_WeaponMasteryComplete", 0)
THEN
LLWEAPONEX_WeaponMastery_AddExperience(_Player, _Item, _WeaponType, _BaseExperience);

PROC
LLWEAPONEX_WeaponMastery_AddExperience((CHARACTERGUID)_Player, (ITEMGUID)_Item, (STRING)_WeaponType, (INTEGER)_BaseExperience)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _MaxXPVar, _LevelVar)
AND
GetVarInteger(_Player, _CurrentXPVar, _Current)
AND
GetVarInteger(_Player, _MaxXPVar, _Max)
AND
IntegerDivide(_BaseExperience, 25, _ExpAmount)
AND
IntegerSum(_Current, _ExpAmount, _NextCurrent)
AND
NOT LLWEAPONEX_WeaponMastery_QRY_Internal_LeveledUp(_Player, _WeaponType, _CurrentXPVar, _LevelVar, _NextCurrent, _Max)
THEN
SetVarInteger(_Player, _CurrentXPVar, _NextCurrent);
LLWEAPONEX_WeaponMastery_OnExperienceAdded(_Player, _WeaponType, _NextCurrent, _Max);

PROC
LLWEAPONEX_WeaponMastery_OnExperienceAdded((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_Current, (INTEGER)_Max)
AND
IntegertoString(_Current, _CurrentStr)
AND
IntegertoString(_Max, _MaxStr)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:OnExperienceAdded] Weapon Mastery [",_WeaponType,"] experience: [", _CurrentStr, "/",_MaxStr,"].");

QRY
LLWEAPONEX_WeaponMastery_QRY_Internal_LeveledUp((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_CurrentXPVar, (STRING)_LevelVar, (INTEGER)_NextCurrent, (INTEGER)_Max)
AND
_NextCurrent >= _Max
AND
GetVarInteger(_Player, _LevelVar, _MasteryLevel)
AND
IntegerSum(_MasteryLevel, 1, _NextMasteryLevel)
AND
IntegertoString(_NextMasteryLevel, _NextMasteryLevelStr)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:MasteryLevelUp] Weapon Mastery [",_WeaponType,"] leveled up to [",_NextMasteryLevelStr,"].");
SetVarInteger(_Player, _CurrentXPVar, 0);
SetVarInteger(_Player, _LevelVar, _NextMasteryLevel);
LLWEAPONEX_WeaponMastery_OnMasteryLeveledUp(_Player, _WeaponType, _NextMasteryLevel);

PROC
LLWEAPONEX_WeaponMastery_OnMasteryLeveledUp((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_MasteryLevel)
AND
IntegertoString(_MasteryLevel, _LevelStr)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryNames(_WeaponType, _MasteryName)
THEN
//LeaderLog_LogTarget("NOTIFICATION", _Player, "<font color='#f7ba14'>Weapon Mastery <font color='#00FF7F'>",_WeaponType,"</font> leveled up to <font color='#FFFF00'>",_LevelStr,"</font>!</font>");
LeaderLog_LogTarget("STATUS", _Player, "",_MasteryName," <font color='#f7ba14'>increased to level</font> <font color='#FFFF00'>",_LevelStr,"</font>");

PROC
LLWEAPONEX_WeaponMastery_OnMasteryLeveledUp((CHARACTERGUID)_Player, (STRING)_WeaponType, (INTEGER)_MasteryLevel)
AND
DB_LLWEAPONEX_WeaponMastery_SkillProgression(_WeaponType, _Level, _SkillID, _UnlockEvent)
AND
_MasteryLevel >= _Level
AND
NOT DB_LLWEAPONEX_WeaponMastery_Learned(_Player, _WeaponType, _SkillID)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:WeaponMastery:OnMasteryLeveledUp] Weapon Mastery [",_WeaponType,"] leveled up. Unlocking skill [",_SkillID,"].");
DB_LLWEAPONEX_WeaponMastery_Learned(_Player, _WeaponType, _SkillID);
LLWEAPONEX_WeaponMastery_OnSkillLearned(_Player, _WeaponType, _SkillID);
//END_REGION

//REGION STATUS_UNLOCKING
/*
IF
CharacterStatusApplied(_Player, _Status, _)
AND
DB_LLWEAPONEX_WeaponMastery_StatusUnlocking(_WeaponType, _SkillID, _Status, _InfoStatus)
AND
DB_LLWEAPONEX_WeaponMastery_Learned(_Player, _WeaponType, _SkillID)
THEN
LLWEAPONEX_WeaponMastery_UnlockSkill(_Player, _WeaponType, _SkillID);

IF
CharacterStatusRemoved(_Player, _Status, _)
AND
DB_LLWEAPONEX_WeaponMastery_StatusUnlocking(_WeaponType, _SkillID, _Status, _InfoStatus)
AND
DB_LLWEAPONEX_WeaponMastery_ActiveSkills(_Player, _WeaponType, _SkillID, _Status)
THEN
LLWEAPONEX_WeaponMastery_RemoveSkill(_Player, _WeaponType, _SkillID);
*/

PROC
LLWEAPONEX_WeaponMastery_ApplyInfoStatus((CHARACTERGUID)_Player, (STRING)_Status, (STRING)_InfoStatus, 0)
AND
_InfoStatus != ""
AND
HasActiveStatus(_Player, _InfoStatus, 0)
AND
GetStatusTurns(_Player, _Status, _Turns)
AND
Real(_Turns, _TurnsR)
AND
RealProduct(_TurnsR, 6.0, _Duration)
THEN
ApplyStatus(_Player, _InfoStatus, _Duration, 1, _Player);

PROC
LLWEAPONEX_WeaponMastery_ApplyInfoStatus((CHARACTERGUID)_Player, (STRING)_Status, (STRING)_InfoStatus, 1)
AND
_InfoStatus != ""
AND
GetStatusTurns(_Player, _Status, _Turns)
AND
Real(_Turns, _TurnsR)
AND
RealProduct(_TurnsR, 6.0, _Duration)
THEN
ApplyStatus(_Player, _InfoStatus, _Duration, 1, _Player);

QRY
LLWEAPONEX_WeaponMastery_QRY_HasAnySkillUnlockStatus((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID)
AND
DB_LLWEAPONEX_WeaponMastery_StatusUnlocking(_WeaponType, _SkillID, _Status, _InfoStatus)
AND
HasActiveStatus(_Player, _Status, 1)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_WeaponMastery_QRY_RemoveInfoStatus((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID, (STRING)_InfoStatus)
THEN
LLWEAPONEX_WeaponMastery_RemoveInfoStatus(_Player, _WeaponType, _SkillID, _InfoStatus);

PROC
LLWEAPONEX_WeaponMastery_RemoveInfoStatus((CHARACTERGUID)_Player, (STRING)_WeaponType, (STRING)_SkillID, (STRING)_InfoStatus)
AND
_InfoStatus != ""
AND
NOT LLWEAPONEX_WeaponMastery_QRY_HasAnySkillUnlockStatus(_Player, _WeaponType, _SkillID)
THEN
RemoveStatus(_Player, _InfoStatus);
//END_REGION

//REGION MENU_TEXT
IF
DialogStarted("LLWEAPONEX_WeaponMasteryMenu", _Instance)
AND
DialogGetInvolvedPlayer(_Instance, 1, (CHARACTERGUID)_Player)
THEN
DB_LLWEAPONEX_WeaponMastery_Temp_CurrentExperienceString(_Player, _Instance, "");
LLWEAPONEX_WeaponMastery_SetExperienceString(_Player, _Instance);

PROC
LLWEAPONEX_WeaponMastery_SetExperienceString((CHARACTERGUID)_Player, (INTEGER)_Instance)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryVariables(_WeaponType, _CurrentXPVar, _MaxXPVar, _LevelVar)
AND
DB_LLWEAPONEX_WeaponMastery_MasteryNames(_WeaponType, _MasteryName)
AND
GetVarInteger(_Player, _CurrentXPVar, _CurrentExpInt)
AND
GetVarInteger(_Player, _MaxXPVar, _MaxExpInt)
AND
GetVarInteger(_Player, _LevelVar, _CurrentLevelInt)
AND
IntegertoString(_CurrentExpInt, _CurrentExp)
AND
IntegertoString(_MaxExpInt, _MaxExp)
AND
IntegertoString(_CurrentLevelInt, _CurrentLevel)
AND
DB_LLWEAPONEX_WeaponMastery_RankNames(_WeaponType, _CurrentLevelInt, _RankName)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_CurrentExperienceString(_Player, _Instance, _String)
AND
LeaderLog_QRY_Log("COMBINE", _String, _MasteryName, " - ",_RankName, " - <font color='#F228EC'>",_CurrentExp, "</font>/", _MaxExp, "<br>")
AND
DB_LeaderLog_Temp_CombinedString(_NewString)
THEN
NOT DB_LeaderLog_Temp_CombinedString(_NewString);
NOT DB_LLWEAPONEX_WeaponMastery_Temp_CurrentExperienceString(_Player, _Instance, _String);
DB_LLWEAPONEX_WeaponMastery_Temp_CurrentExperienceString(_Player, _Instance, _NewString);

PROC
LLWEAPONEX_WeaponMastery_SetExperienceString((CHARACTERGUID)_Player, (INTEGER)_Instance)
AND
DB_LLWEAPONEX_WeaponMastery_Temp_CurrentExperienceString(_Player, _Instance, _String)
THEN
NOT DB_LLWEAPONEX_WeaponMastery_Temp_CurrentExperienceString(_Player, _Instance, _String);
DialogSetVariableStringForInstance(_Instance, "LLWEAPONEX_WeaponMastery_Current_f4dda1ff-ab17-4141-be2f-763c6c22a7cc", _String);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader_WeaponExpansion"