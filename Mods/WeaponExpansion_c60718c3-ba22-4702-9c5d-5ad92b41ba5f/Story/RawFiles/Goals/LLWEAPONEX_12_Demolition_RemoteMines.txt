Version 1
SubGoalCombiner SGC_AND
INITSECTION

KBSECTION

IF
CanPickupItem(_Player, _RemoteMine, _)
AND
IsTagged(_RemoteMine, "LLWEAPONEX_RemoteMine", 1)
THEN
CharacterItemSetEvent(_Player, _RemoteMine, "LLWEAPONEX_RemoteMine_OnPrePickedUp");

//REGION ADD_MINE
IF
CharacterStatusApplied(_Character, "LLWEAPONEX_ADD_REMOTEMINE", _)
THEN
CharacterGiveReward(_Character, "S_LLWEAPONEX_RemoteMines_AddRandom", 1);

PROC
LLWEAPONEX_RemoteMines_SetOwner((CHARACTERGUID)_Character, (ITEMGUID)_RemoteMine)
AND
NOT LeaderLib_Helper_QRY_ObjectVariableSet(_RemoteMine, "LLWEAPONEX_Mine_Owner")
THEN
SetVarObject(_RemoteMine, "LLWEAPONEX_Mine_Owner", _Character);

/*
IF
ItemTemplateAddedToCharacter(WPN_LLWEAPONEX_Trap_Mine_Remote_A_9723e927-785b-4fe9-91e7-a8ad1af30716, _Item,  _Character)
AND
LeaderLib_Helper_QRY_HasStatus(_Character, "LLWEAPONEX_ADD_REMOTEMINE")
THEN
SetVarObject(_Item, "LLWEAPONEX_Mine_Owner", _Character);
*/
//END_REGION

//REGION HOLDING_TAG
IF
ItemAddedToCharacter(_RemoteMine, _Character)
AND
ObjectExists(_RemoteMine, 1) //prevent stacked items from asserting all over the place
AND
IsTagged(_RemoteMine, "LLWEAPONEX_RemoteMine", 1)
THEN
LeaderLib_Tags_PreserveTag(_Character, "LLWEAPONEX_HoldingRemoteMine");

IF
ItemRemovedFromCharacter(_RemoteMine, _Character)
AND
IsTagged(_RemoteMine, "LLWEAPONEX_RemoteMine", 1)
AND
ItemTagIsInCharacterInventory(_Character, "LLWEAPONEX_RemoteMine", _Count)
AND
_Count <= 0
THEN
LeaderLib_Tags_ClearPreservedTag(_Character, "LLWEAPONEX_HoldingRemoteMine");

IF
ItemAddedToContainer(_RemoteMine, _Container)
AND
ObjectExists(_RemoteMine, 1) //prevent stacked items from asserting all over the place
AND
IsTagged(_RemoteMine, "LLWEAPONEX_RemoteMine", 1)
THEN
SetTag(_Container, "LLWEAPONEX_HoldingRemoteMine");

IF
ItemRemovedFromContainer(_RemoteMine, _Container)
AND
IsTagged(_RemoteMine, "LLWEAPONEX_RemoteMine", 1)
THEN
ClearTag(_Container, "LLWEAPONEX_HoldingRemoteMine");
InventoryLaunchTagIterator(_Container, "LLWEAPONEX_RemoteMine", "", "LLWEAPONEX_Iterator_RemoteMineFound", "");

IF
StoryEvent((ITEMGUID)_RemoteMine, "LLWEAPONEX_Iterator_RemoteMineFound")
AND
ObjectExists(_RemoteMine, 1)
AND
GetInventoryOwner(_RemoteMine, (ITEMGUID)_Container)
THEN
SetTag(_Container, "LLWEAPONEX_HoldingRemoteMine");
//END_REGION

//REGION DELAYED_DETONATION
IF
CharacterStatusApplied(_Item, "LLWEAPONEX_REMOTEMINE_DETONATE_DELAYED", _Source)
THEN
LeaderLib_Timers_StartObjectObjectTimer(_Item, _Source, 1000, "LLWEAPONEX_Timers_RemoteMine_DelayedDetonation", "LLWEAPONEX_RemoteMine_ApplyDetonation");

IF
ItemStatusChange(_Item, "LLWEAPONEX_REMOTEMINE_DETONATE_DELAYED", _Source)
THEN
LeaderLib_Timers_StartObjectObjectTimer(_Item, _Source, 1000, "LLWEAPONEX_Timers_RemoteMine_DelayedDetonation", "LLWEAPONEX_RemoteMine_ApplyDetonation");

PROC
LeaderLib_Timers_ObjectObjectTimerFinished(_Item, _Source, "LLWEAPONEX_RemoteMine_ApplyDetonation")
THEN
ApplyStatus(_Item, "LLWEAPONEX_REMOTEMINE_DETONATE", 0.0, 0, _Source);
//END_REGION

//REGION INVENTORY_DETONATION
IF
CharacterStatusApplied(_Target, "LLWEAPONEX_REMOTEMINE_DETONATE", (CHARACTERGUID)_Character)
AND
ItemTagIsInCharacterInventory(_Target, "LLWEAPONEX_RemoteMine", _Count)
AND
_Count > 0
THEN
DB_LLWEAPONEX_RemoteMines_Temp_DetonateTarget(_Character, _Target, _Count);
CharacterCharacterSetEvent(_Character, _Target, "LLWEAPONEX_RemoteMines_StartNextDetonation");

IF
CharacterCharacterEvent(_Character, _Target, "LLWEAPONEX_RemoteMines_StartNextDetonation")
AND
DB_LLWEAPONEX_RemoteMines_Temp_DetonateTarget(_Character, _Target, _Count)
THEN
NOT DB_LLWEAPONEX_RemoteMines_Temp_DetonateTarget(_Character, _Target, _Count);
LLWEAPONEX_RemoteMines_DetonateMines(_Character, _Target, _Count);

PROC
LLWEAPONEX_RemoteMines_DetonateMines((CHARACTERGUID)_Character, (CHARACTERGUID)_Target, (INTEGER)_Count)
AND
_Count > 0
AND
IntegerSubtract(_Count, 1, _NextCount)
AND
CharacterFindTaggedItem(_Target, "LLWEAPONEX_RemoteMine", _RemoteMine)
AND
ItemGetAmount(_RemoteMine, _Amount)
THEN
LLWEAPONEX_RemoteMines_SetOwner(_Character, _RemoteMine); // Failsafe
SetVarInteger(_RemoteMine, "LLWEAPONEX_Mine_Amount", _Amount);
DB_LLWEAPONEX_RemoteMines_Temp_DetonateTarget(_Character, _Target, _NextCount);
CharacterItemSetEvent(_Target, _RemoteMine, "LLWEAPONEX_RemoteMine_StartDetonation_Character");
LeaderLib_Timers_StartCharacterCharacterTimer(_Character, _Target, 250, "LLWEAPONEX_Timers_RemoteMines_NextDetonation", "LLWEAPONEX_RemoteMines_StartNextDetonation");

IF
ItemStatusChange(_Target, "LLWEAPONEX_REMOTEMINE_DETONATE", (CHARACTERGUID)_Character)
AND
ObjectExists(_Target, 1)
AND
ItemIsContainer(_Target, 1)
AND
ItemIsDestroyed(_Target, 0)
THEN
DB_LLWEAPONEX_RemoteMines_Temp_Detonating(_Character, _Target);
InventoryLaunchTagIterator(_Target, "LLWEAPONEX_RemoteMine", "", "LLWEAPONEX_Iterator_RemoteMines_Detonate", "");
ProcObjectTimer(_Target, "LLWEAPONEX_Timers_RemoteMines_ClearDetonatingDB", 500);

PROC
ProcObjectTimerFinished((ITEMGUID)_Target, "LLWEAPONEX_Timers_RemoteMines_ClearDetonatingDB")
AND
DB_LLWEAPONEX_RemoteMines_Temp_Detonating(_Character, _Target)
THEN
NOT DB_LLWEAPONEX_RemoteMines_Temp_Detonating(_Character, _Target);

IF
StoryEvent((ITEMGUID)_RemoteMine, "LLWEAPONEX_Iterator_RemoteMines_Detonate")
AND
ObjectExists(_RemoteMine, 1)
AND
GetInventoryOwner(_RemoteMine, (ITEMGUID)_Target)
AND
ItemGetAmount(_RemoteMine, _Amount)
AND
DB_LLWEAPONEX_RemoteMines_Temp_Detonating(_Character, _Target)
THEN
LLWEAPONEX_RemoteMines_SetOwner(_Character, _RemoteMine); // Failsafe
SetVarObject(_RemoteMine, "LLWEAPONEX_Mine_Inventory", _Target);
SetVarInteger(_RemoteMine, "LLWEAPONEX_Mine_Amount", _Amount);
CharacterItemSetEvent(_Character, _RemoteMine, "LLWEAPONEX_RemoteMine_StartDetonation_Container");

IF
ItemStatusChange(_RemoteMine, "LLWEAPONEX_REMOTEMINE_DETONATE", (CHARACTERGUID)_Character)
AND
IsTagged(_RemoteMine, "LLWEAPONEX_RemoteMine", 1)
THEN
LLWEAPONEX_RemoteMines_SetOwner(_Character, _RemoteMine);
CharacterItemSetEvent(_Character, _RemoteMine, "LLWEAPONEX_RemoteMine_DetonationStatus");
//END_REGION

//REGION BEHAVIOR_SCRIPT_DETONATION_EVENTS
IF
CharacterItemEvent(_Character, _Mine, "LLWEAPONEX_RemoteMine_DetonateInWorld_BySkillID")
AND
GetVarString(_Mine, "LLWEAPONEX_Mine_SkillID", _Skill)
AND
GetPosition(_Mine, _x, _y, _z)
AND
CharacterGetLevel(_Character, _Level)
THEN
CreateExplosionAtPosition(_x, _y, _z, _Skill, _Level);
SetStoryEvent(_Mine, "LLWEAPONEX_RemoteMine_DetonationDone");

IF
CharacterItemEvent(_Character, _Mine, "LLWEAPONEX_RemoteMine_DetonateInWorld_BySkillID")
AND
GetVarString(_Mine, "LLWEAPONEX_Mine_ExplosionStatusID", _Status)
THEN
ApplyStatus(_Mine, _Status, 0.0, 1, _Character);
SetStoryEvent(_Mine, "LLWEAPONEX_RemoteMine_DetonationDone");

IF
CharacterItemEvent(_Target, _Mine, "LLWEAPONEX_RemoteMine_DetonateInInventory_BySkillID")
AND
GetVarString(_Mine, "LLWEAPONEX_Mine_SkillID", _Skill)
AND
GetVarObject(_Mine, "LLWEAPONEX_Mine_Owner", (CHARACTERGUID)_Owner)
AND
GetPosition(_Target, _x, _y, _z)
AND
CharacterGetLevel(_Owner, _Level)
THEN
CreateExplosionAtPosition(_x, _y, _z, _Skill, _Level);
SetStoryEvent(_Mine, "LLWEAPONEX_RemoteMine_DetonationDone");

IF
CharacterItemEvent(_Target, _Mine, "LLWEAPONEX_RemoteMine_DetonateInInventory_ByStatusID")
AND
GetVarString(_Mine, "LLWEAPONEX_Mine_ExplosionStatusID", _Status)
AND
GetVarObject(_Mine, "LLWEAPONEX_Mine_Owner", (CHARACTERGUID)_Owner)
THEN
ApplyStatus(_Target, _Status, 0.0, 1, _Owner);
SetStoryEvent(_Mine, "LLWEAPONEX_RemoteMine_DetonationDone");
//END_REGION

//REGION THROWING
/*
IF
StoryEvent((ITEMGUID)_Object, "LLWEAPONEX_MovingObjectRemoteMine_Init")
AND
ObjectExists(_Object, 1)
AND
ItemGetOwner(_Object, _Owner)
AND
String(_Owner, _OwnerStr)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX_12_RemoteMines:LLWEAPONEX_MovingObjectRemoteMine_Init] Owner [",_OwnerStr,"]");
*/

PROC
ProcProcessUseOfItem((CHARACTERGUID)_Player, (ITEMGUID)_Item, (INTEGER)_RequestID)
AND
NOT DB_CustomUseItemResponse(_Player, _Item, 0)
AND
IsTagged(_Item, "LLWEAPONEX_RemoteMine", 1)
THEN
DB_LLWEAPONEX_RemoteMines_Temp_ThrowingStart(_Player, _Item);

IF
CharacterStoppedUsingItem(_Player, _RemoteMine)
AND
DB_LLWEAPONEX_RemoteMines_Temp_ThrowingStart(_Player, _RemoteMine)
THEN
NOT DB_LLWEAPONEX_RemoteMines_Temp_ThrowingStart(_Player, _RemoteMine);

PROC
LLWEAPONEX_RemoteMines_Internal_SetThrowingActive((CHARACTERGUID)_Player, (ITEMGUID)_RemoteMine, (ITEMGUID)_MovingObject)
THEN
DB_LLWEAPONEX_RemoteMines_Temp_ThrowingActive(_Player, _RemoteMine, _MovingObject);

IF
StoryEvent(_Object, "LLWEAPONEX_MovingObjectRemoteMine_Init")
AND
ObjectExists(_Object, 1)
AND
ObjectIsItem((ITEMGUID)_Object, 1)
AND
DB_LLWEAPONEX_RemoteMines_Temp_ThrowingStart(_Player, _RemoteMine)
AND
NOT DB_LLWEAPONEX_RemoteMines_Temp_ThrowingActive((CHARACTERGUID)_, _, _Object)
THEN
NOT DB_LLWEAPONEX_RemoteMines_Temp_ThrowingStart(_Player, _RemoteMine);
LLWEAPONEX_RemoteMines_Internal_SetThrowingActive(_Player, _RemoteMine, _Object);
ItemSetOwner(_Object, _Player);

IF
CharacterItemEvent(_Player, _Object, "LLWEAPONEX_MovingObjectRemoteMine_Landed")
AND
DB_LLWEAPONEX_RemoteMines_Temp_ThrowingActive(_Player, _RemoteMine, _Object)
THEN
NOT DB_LLWEAPONEX_RemoteMines_Temp_ThrowingActive(_Player, _RemoteMine, _Object);
LeaderLog_Log("DEBUG", "[LLWEAPONEX_12_RemoteMines:LLWEAPONEX_MovingObjectRemoteMine_Landed] Remote Mine projectile landed.");
LeaderLib_Helpers_CopyItemTransform(_RemoteMine, _Object, 0, 1, _Player);
SetOnStage(_Object, 0);
ItemDestroy(_Object);
SetStoryEvent(_RemoteMine, "LLWEAPONEX_RemoteMine_Thrown");

IF
StoryEvent((ITEMGUID)_RemoteMine, "LLWEAPONEX_MovingObjectRemoteMine_SnapToGround")
AND
GetPosition(_RemoteMine, _x, _y, _z)
THEN
ItemMoveToPosition(_RemoteMine, _x, _y, _z, 20.0, 0.0);
//END_REGION

EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LLWEAPONEX_00_PostCC"