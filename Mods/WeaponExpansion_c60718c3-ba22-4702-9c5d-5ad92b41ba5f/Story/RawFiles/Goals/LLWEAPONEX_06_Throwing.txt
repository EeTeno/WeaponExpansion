Version 1
SubGoalCombiner SGC_AND
INITSECTION
LLWEAPONEX_Throwing_InitSettings();
KBSECTION
PROC
LLWEAPONEX_Throwing_InitSettings()
THEN
DB_LLWEAPONEX_Throwing_KevinSkills("Projectile_LLWEAPONEX_Throw_Rock_Kevin");
DB_LLWEAPONEX_Throwing_KevinSkills("Projectile_LLWEAPONEX_Throw_Rock_Kevin_Poison");
DB_LLWEAPONEX_Throwing_KevinSkills("Projectile_LLWEAPONEX_Throw_Rock_Kevin_Oil");
DB_LLWEAPONEX_Throwing_KevinSkills("Projectile_LLWEAPONEX_Throw_Rock_Kevin_Nails");

DB_LLWEAPONEX_Throwing_ReturnSkill("Projectile_LLWEAPONEX_ShieldToss", "Projectile_LLWEAPONEX_ShieldToss_Returned", "LLWEAPONEX_COMBAT_SHIELD_HIT", 3, "LLWEAPONEX_Timers_ShieldTossTimeout", 1000);

DB_LLWEAPONEX_Throwing_ReturnSkillTags("Projectile_LLWEAPONEX_ShieldToss_Returned", "LLWEAPONEX_ShieldToss_Caster");

DB_LLWEAPONEX_Throwing_StrengthDistanceConstants(10, 40);
DB_LLWEAPONEX_Throwing_StrengthToDistance(10, 2);
DB_LLWEAPONEX_Throwing_StrengthToDistance(11, 2);
DB_LLWEAPONEX_Throwing_StrengthToDistance(12, 2);
DB_LLWEAPONEX_Throwing_StrengthToDistance(13, 2);
DB_LLWEAPONEX_Throwing_StrengthToDistance(14, 3);
DB_LLWEAPONEX_Throwing_StrengthToDistance(15, 3);
DB_LLWEAPONEX_Throwing_StrengthToDistance(16, 3);
DB_LLWEAPONEX_Throwing_StrengthToDistance(17, 4);
DB_LLWEAPONEX_Throwing_StrengthToDistance(18, 4);
DB_LLWEAPONEX_Throwing_StrengthToDistance(19, 4);
DB_LLWEAPONEX_Throwing_StrengthToDistance(20, 4);
DB_LLWEAPONEX_Throwing_StrengthToDistance(21, 5);
DB_LLWEAPONEX_Throwing_StrengthToDistance(22, 5);
DB_LLWEAPONEX_Throwing_StrengthToDistance(23, 5);
DB_LLWEAPONEX_Throwing_StrengthToDistance(24, 5);
DB_LLWEAPONEX_Throwing_StrengthToDistance(25, 6);
DB_LLWEAPONEX_Throwing_StrengthToDistance(26, 6);
DB_LLWEAPONEX_Throwing_StrengthToDistance(27, 6);
DB_LLWEAPONEX_Throwing_StrengthToDistance(28, 7);
DB_LLWEAPONEX_Throwing_StrengthToDistance(29, 7);
DB_LLWEAPONEX_Throwing_StrengthToDistance(30, 7);
DB_LLWEAPONEX_Throwing_StrengthToDistance(31, 8);
DB_LLWEAPONEX_Throwing_StrengthToDistance(32, 8);
DB_LLWEAPONEX_Throwing_StrengthToDistance(33, 8);
DB_LLWEAPONEX_Throwing_StrengthToDistance(34, 9);
DB_LLWEAPONEX_Throwing_StrengthToDistance(35, 9);
DB_LLWEAPONEX_Throwing_StrengthToDistance(36, 10);
DB_LLWEAPONEX_Throwing_StrengthToDistance(37, 10);
DB_LLWEAPONEX_Throwing_StrengthToDistance(38, 10);
DB_LLWEAPONEX_Throwing_StrengthToDistance(39, 10);
DB_LLWEAPONEX_Throwing_StrengthToDistance(40, 11);

//DB_LLWEAPONEX_Throwing_ReturnSkill(_ShootSkill, _ReturnSkill, _HitStatus, _MaxTargets, _TimerName, _Timeout)

//Make the impale effect look more believable
/*
IF
CharacterUsedSkillOnTarget(_Character, (CHARACTERGUID)_Target, _Skill, "projectile", _)
AND
_Skill != "Projectile_LLWEAPONEX_Throw_Rock_Kevin"
AND
NOT Query_IsPlayerHiding(_Character)
AND
StringContains(_Skill, "Projectile_LLWEAPONEX_Throw_", 1)
THEN
CharacterLookAt(_Target, _Character, 0);
*/

//REGION KEVIN_THROWN
IF
CharacterUsedSkillOnTarget(_Character, _Target, _Skill, _, _)
AND
DB_LLWEAPONEX_Throwing_KevinSkills(_Skill)
AND
NOT DB_LLWEAPONEX_Throwing_Temp_KevinIterator(_Character, _, _, _)
AND
GetUUID(_Character, _UUID)
AND
StringConcatenate("LLWEAPONEX_Throwing_KevinTargetFound_", _UUID, _Event)
THEN
DB_LLWEAPONEX_Throwing_Temp_KevinIterator(_Character, _Target, _Event, 1);
CharacterLaunchIteratorAroundObject(_Target, 5.0, _Event);

IF
StoryEvent((CHARACTERGUID)_Target, _IteratorEvent)
AND
DB_LLWEAPONEX_Throwing_Temp_KevinIterator(_Character, _InitialTarget, _IteratorEvent, _TotalTargets)
AND
_Target != _InitialTarget
AND
CharacterIsEnemy(_Character, _Target, 1)
AND
IntegerSum(_TotalTargets, 1, _NextCount)
AND
_NextCount < 4 // 3 forks max
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_KevinIterator(_Character, _InitialTarget, _IteratorEvent, _TotalTargets);
DB_LLWEAPONEX_Throwing_Temp_KevinIterator(_Character, _InitialTarget, _IteratorEvent, _NextCount);

IF
SkillCast(_Player, "Projectile_LLWEAPONEX_Throw_Rock_Kevin", _, _)
THEN
ProcObjectTimer(_Player, "LLWEAPONEX_Timers_ShootKevinReturnEffect", 1000);

IF
CharacterStatusApplied(_Target, "LLWEAPONEX_HIT_BY_KEVIN", (CHARACTERGUID)_Player)
AND
_Player != NULL_00000000-0000-0000-0000-000000000000
THEN
LLWEAPONEX_Throwing_SetKevinReturnTarget(_Player, _Target);

PROC
LLWEAPONEX_Throwing_SetKevinReturnTarget((CHARACTERGUID)_Player, (CHARACTERGUID)_Target)
AND
NOT DB_LLWEAPONEX_Throwing_Temp_KevinReturnTarget(_Player, _, _)
THEN
LLWEAPONEX_Throwing_Internal_SetKevinReturnTarget(_Player, _Target, 0);

PROC
LLWEAPONEX_Throwing_SetKevinReturnTarget((CHARACTERGUID)_Player, (CHARACTERGUID)_Target)
AND
DB_LLWEAPONEX_Throwing_Temp_KevinReturnTarget(_Player, _OtherTarget, _Count)
AND
IntegerSum(_Count, 1, _NextCount)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_KevinReturnTarget(_Player, _OtherTarget, _Count);
LLWEAPONEX_Throwing_Internal_SetKevinReturnTarget(_Player, _Target, _NextCount);

PROC
LLWEAPONEX_Throwing_Internal_SetKevinReturnTarget((CHARACTERGUID)_Player, (CHARACTERGUID)_Target, (INTEGER)_Count)
THEN
DB_LLWEAPONEX_Throwing_Temp_KevinReturnTarget(_Player, _Target, _Count);

PROC
LLWEAPONEX_Throwing_Internal_SetKevinReturnTarget((CHARACTERGUID)_Player, (CHARACTERGUID)_Target, (INTEGER)_Count)
AND
DB_LLWEAPONEX_Throwing_Temp_KevinIterator(_Character, _InitialTarget, _IteratorEvent, _TotalTargets)
AND
_Count < _TotalTargets
THEN
ProcObjectTimerCancel(_Player, "LLWEAPONEX_Timers_ShootKevinReturnEffect");
ProcObjectTimer(_Player, "LLWEAPONEX_Timers_ShootKevinReturnEffect", 300);

PROC
LLWEAPONEX_Throwing_Internal_SetKevinReturnTarget((CHARACTERGUID)_Player, (CHARACTERGUID)_Target, (INTEGER)_Count)
AND
DB_LLWEAPONEX_Throwing_Temp_KevinIterator(_Character, _InitialTarget, _IteratorEvent, _TotalTargets)
AND
_Count >= _TotalTargets
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_KevinReturnTarget(_Player, _Target, _Count);
ProcObjectTimerCancel(_Player, "LLWEAPONEX_Timers_ShootKevinReturnEffect");
CharacterCharacterSetEvent(_Player, _Target, "LLWEAPONEX_Events_ReturnKevin");

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Player, "LLWEAPONEX_Timers_ShootKevinReturnEffect")
AND
DB_LLWEAPONEX_Throwing_Temp_KevinReturnTarget(_Player, _Target, _Count)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_KevinReturnTarget(_Player, _Target, _Count);
//CharacterUseSkill(_Target, "Projectile_LLWEAPONEX_Throw_Rock_Kevin_Effect", _Player, 1, 1, 1);
CharacterCharacterSetEvent(_Player, _Target, "LLWEAPONEX_Events_ReturnKevin");

/*
IF
DB_LLWEAPONEX_Throwing_Temp_KevinReturnTarget(_Player, _Target, _Count)
AND
IntegertoString(_Count, _CountStr)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:Throwing:KevinReturnTarget] Hit count: [",_CountStr,"].");

IF
DB_LLWEAPONEX_Throwing_Temp_KevinIterator(_Character, _InitialTarget, _IteratorEvent, _TotalTargets)
AND
IntegertoString(_TotalTargets, _CountStr)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:Throwing:KevinIterator] Total targets: [",_CountStr,"](",_IteratorEvent,").");
*/

IF
CharacterCharacterEvent(_Character, _Target, "LLWEAPONEX_Events_ReturnKevin")
//CharacterStatusAttempt(_Character, "LLWEAPONEX_KEVIN_RETURNED", _)
AND
DB_LLWEAPONEX_Throwing_Temp_KevinIterator(_Character, _InitialTarget, _IteratorEvent, _TotalTargets)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_KevinIterator(_Character, _InitialTarget, _IteratorEvent, _TotalTargets);
//CharacterStatusText(_Character, "LLWEAPONEX_CaughtKevin");
//PlayAnimation(_Player, "use_activate", "");
//END_REGION

//REGION KEVIN_ENERGY
IF
CharacterItemEvent(_Player, _Kevin, "LLWEAPONEX_ReducedKevinEnergy")
AND
GetVarInteger(_Kevin, "LLWEAPONEX_Kevin_CurrentEnergy", _Energy)
AND
GetVarInteger(_Kevin, "LLWEAPONEX_Kevin_MaxEnergy", _MaxEnergy)
AND
IntegertoString(_MaxEnergy, _MaxStr)
AND
IntegertoString(_Energy, _EnergyStr)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:Throwing:ModifyKevinEnergy] Kevin's current energy: [",_EnergyStr,"/",_MaxStr,"].");

IF
CharacterItemEvent(_Player, _Kevin, "LLWEAPONEX_RechargeComplete")
AND
GetVarInteger(_Kevin, "LLWEAPONEX_Kevin_CurrentEnergy", _Energy)
AND
GetVarInteger(_Kevin, "LLWEAPONEX_Kevin_MaxEnergy", _MaxEnergy)
AND
IntegertoString(_MaxEnergy, _MaxStr)
AND
IntegertoString(_Energy, _EnergyStr)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:Throwing:ModifyKevinEnergy] Kevin's current energy: [",_EnergyStr,"/",_MaxStr,"].");

IF
CharacterItemEvent(_Player, _Kevin, "LLWEAPONEX_KevinIsExausted")
AND
GetTemplate(_Kevin, _Template)
THEN
DB_LLWEAPONEX_Temp_KevinOriginalForm(_Kevin, _Template);
Transform(_Kevin, "WPN_LLWEAPONEX_Throwing_Rock_Unique_Kevin_Disabled_9b6ea03d-801b-438d-a7c7-a6b9575c1043", 0, 0, 1);

IF
CharacterItemEvent(_Player, _Kevin, "LLWEAPONEX_KevinIsRestored")
AND
DB_LLWEAPONEX_Temp_KevinOriginalForm(_Kevin, _Template)
THEN
NOT DB_LLWEAPONEX_Temp_KevinOriginalForm(_Kevin, _Template);
Transform(_Kevin, _Template, 0, 0, 1);

//END_REGION

//REGION KEVIN_UPDATE
IF
ItemTemplateAddedToCharacter(ITEMGUID_WPN_LLWEAPONEX_Throwing_Rock_Unique_Kevin_b3fc8995-8c7c-4de5-b465-e2573334cff7, _Item, _Character)
AND
ObjectExists(_Item, 1)
AND
IsTagged(_Item, "LLWEAPONEX_KevinThePetRock", 0)
THEN
SetTag(_Item, "LLWEAPONEX_KevinThePetRock");

PROC
LeaderUpdater_ModUpdated("WeaponExpansion", "LaughingLeader", (STRING)_OldVersion, "0.9.0.2")
AND
CharacterGetHostCharacter(_Player)
AND
GetItemForItemTemplateInPartyInventory(_Player, "WPN_LLWEAPONEX_Throwing_Rock_Unique_Kevin_b3fc8995-8c7c-4de5-b465-e2573334cff7", _Item)
AND
IsTagged(_Item, "LLWEAPONEX_KevinThePetRock", 0)
THEN
SetTag(_Item, "LLWEAPONEX_KevinThePetRock");

PROC
LeaderUpdater_ModUpdated("WeaponExpansion", "LaughingLeader", (STRING)_OldVersion, "0.9.0.2")
AND
GetItemForItemTemplateInInventory(CHARACTERGUID_S_LLWEAPONEX_VendingMachine_A_680d2702-721c-412d-b083-4f5e816b945a, "WPN_LLWEAPONEX_Throwing_Rock_Unique_Kevin_b3fc8995-8c7c-4de5-b465-e2573334cff7", _Item)
AND
IsTagged(_Item, "LLWEAPONEX_KevinThePetRock", 0)
THEN
SetTag(_Item, "LLWEAPONEX_KevinThePetRock");
//END_REGION

//REGION COMBAT_SHIELD_TOSS
IF
CharacterUsedSkillOnTarget(_Character, _Target, "Projectile_LLWEAPONEX_ShieldToss", _, _)
AND
DB_LLWEAPONEX_Throwing_ReturnSkill("Projectile_LLWEAPONEX_ShieldToss", _ReturnSkill, _HitStatus, _MaxTargets, _TimerName, _Timeout)
AND
_MaxTargets > 1
AND
NOT DB_LLWEAPONEX_Throwing_Temp_ForkIterator("Projectile_LLWEAPONEX_ShieldToss", _Character, _, _, _)
AND
GetUUID(_Character, _UUID)
AND
StringConcatenate("LLWEAPONEX_Throwing_", "Projectile_LLWEAPONEX_ShieldToss", _Str1)
AND
StringConcatenate(_Str1, _UUID, _Event)
THEN
DB_LLWEAPONEX_Throwing_Temp_ForkIterator("Projectile_LLWEAPONEX_ShieldToss", _Character, _Target, _Event, 1);
CharacterLaunchIteratorAroundObject(_Target, 6.0, _Event);

IF
CharacterUsedSkillAtPosition(_Character, _x, _y, _z, "Projectile_LLWEAPONEX_ShieldToss", _, _)
AND
DB_LLWEAPONEX_Throwing_ReturnSkill("Projectile_LLWEAPONEX_ShieldToss", _ReturnSkill, _HitStatus, _MaxTargets, _TimerName, _Timeout)
THEN
SetVarFloat3(_Character, "LLWEAPONEX_ReturnSkillFallbackPosition", _x, _y, _z);

IF
StoryEvent((CHARACTERGUID)_Target, _IteratorEvent)
AND
DB_LLWEAPONEX_Throwing_Temp_ForkIterator(_ShootSkill, _Character, _InitialTarget, _IteratorEvent, _TotalTargets)
AND
_Target != _InitialTarget
AND
CharacterIsEnemy(_Character, _Target, 1)
AND
IntegerSum(_TotalTargets, 1, _NextCount)
AND
DB_LLWEAPONEX_Throwing_ReturnSkill(_ShootSkill, _ReturnSkill, _HitStatus, _MaxTargets, _TimerName, _Timeout)
AND
_NextCount <= _MaxTargets
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_ForkIterator(_ShootSkill, _Character, _InitialTarget, _IteratorEvent, _TotalTargets);
DB_LLWEAPONEX_Throwing_Temp_ForkIterator(_ShootSkill, _Character, _InitialTarget, _IteratorEvent, _NextCount);

IF
SkillCast(_Character, "Projectile_LLWEAPONEX_ShieldToss", _, _)
AND
DB_LLWEAPONEX_Throwing_ReturnSkill("Projectile_LLWEAPONEX_ShieldToss", _ReturnSkill, _HitStatus, _MaxTargets, _TimerName, _Timeout)
THEN
DB_LLWEAPONEX_Throwing_Temp_SkillNotReturned(_Character, "Projectile_LLWEAPONEX_ShieldToss", _ReturnSkill);

IF
DB_LLWEAPONEX_Throwing_Temp_SkillNotReturned(_Character, _ShootSkill, _ReturnSkill)
AND
DB_LLWEAPONEX_Throwing_ReturnSkillTags(_ReturnSkill, _Tag)
THEN
SetTag(_Character, _Tag);

IF
SkillCast(_Character, "Projectile_LLWEAPONEX_ShieldToss", _, _)
AND
DB_LLWEAPONEX_Throwing_ReturnSkill("Projectile_LLWEAPONEX_ShieldToss", _ReturnSkill, _HitStatus, _MaxTargets, _TimerName, _Timeout)
AND
DB_LLWEAPONEX_Throwing_Temp_ForkIterator("Projectile_LLWEAPONEX_ShieldToss", _Character, _InitialTarget, _IteratorEvent, _TotalTargets)
THEN
ProcObjectTimerCancel(_Character, _TimerName);
ProcObjectTimer(_Character, _TimerName, _Timeout);

IF
SkillCast(_Character, "Projectile_LLWEAPONEX_ShieldToss", _, _)
AND
DB_LLWEAPONEX_Throwing_ReturnSkill("Projectile_LLWEAPONEX_ShieldToss", _ReturnSkill, _HitStatus, _MaxTargets, _TimerName, _Timeout)
AND
NOT DB_LLWEAPONEX_Throwing_Temp_ForkIterator("Projectile_LLWEAPONEX_ShieldToss", _Character, _, _, _)
AND
IntegerDivide(_Timeout, 2, _NewTimeout)
THEN
ProcObjectTimerCancel(_Character, _TimerName);
ProcObjectTimer(_Character, _TimerName, _NewTimeout);

IF
CharacterMissedBy(_Target, _Character, _)
AND
DB_LLWEAPONEX_Throwing_Temp_ForkIterator(_ShootSkill, _Character, _InitialTarget, _IteratorEvent, _TotalTargets)
AND
DB_LLWEAPONEX_Throwing_Temp_SkillNotReturned(_Character, _ShootSkill, _ReturnSkill)
THEN
LLWEAPONEX_Throwing_Internal_OnTargetHit(_Character, (GUIDSTRING)_Target, _ShootSkill);

IF
CharacterStatusApplied(_Target, _HitStatus, (CHARACTERGUID)_Character)
AND
DB_LLWEAPONEX_Throwing_ReturnSkill(_ShootSkill, _ReturnSkill, _HitStatus, _MaxTargets, _TimerName, _Timeout)
AND
DB_LLWEAPONEX_Throwing_Temp_SkillNotReturned(_Character, _ShootSkill, _ReturnSkill)
AND
_Character != NULL_00000000-0000-0000-0000-000000000000
THEN
LLWEAPONEX_Throwing_Internal_OnTargetHit(_Character, (GUIDSTRING)_Target, _ShootSkill);

IF
ItemStatusChange(_Target, _HitStatus, (CHARACTERGUID)_Character)
AND
DB_LLWEAPONEX_Throwing_ReturnSkill(_ShootSkill, _ReturnSkill, _HitStatus, _MaxTargets, _TimerName, _Timeout)
AND
DB_LLWEAPONEX_Throwing_Temp_SkillNotReturned(_Character, _ShootSkill, _ReturnSkill)
AND
_Character != NULL_00000000-0000-0000-0000-000000000000
THEN
LLWEAPONEX_Throwing_Internal_OnTargetHit(_Character, (GUIDSTRING)_Target, _ShootSkill);

PROC
LLWEAPONEX_Throwing_Internal_OnTargetHit((CHARACTERGUID)_Character, (GUIDSTRING)_Target, (STRING)_ShootSkill)
AND
NOT DB_LLWEAPONEX_Throwing_Temp_ReturnTarget(_Character, _, _, _)
THEN
LLWEAPONEX_Throwing_Internal_SetReturnTarget(_Character, _Target, _ShootSkill, 0);

PROC
LLWEAPONEX_Throwing_Internal_OnTargetHit((CHARACTERGUID)_Character, (GUIDSTRING)_Target, (STRING)_ShootSkill)
AND
DB_LLWEAPONEX_Throwing_Temp_ReturnTarget(_Character, _OtherTarget, _ShootSkill, _Count)
AND
IntegerSum(_Count, 1, _NextCount)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_ReturnTarget(_Character, _OtherTarget, _ShootSkill, _Count);
LLWEAPONEX_Throwing_Internal_SetReturnTarget(_Character, _Target, _ShootSkill, _NextCount);

/*
PROC
LLWEAPONEX_Throwing_Internal_OnTargetHit((CHARACTERGUID)_Character, (GUIDSTRING)_Target, (STRING)_ShootSkill)
AND
NOT DB_LLWEAPONEX_Throwing_Temp_ForkIterator(_ShootSkill, _Character, _, _, _)
AND
DB_LLWEAPONEX_Throwing_ReturnSkill(_ShootSkill, _ReturnSkill, _HitStatus, _MaxTargets, _TimerName, _Timeout)
THEN
ProcObjectTimerCancel(_Character, _TimerName);
ProcObjectTimer(_Character, _TimerName, _Timeout);
*/

PROC
LLWEAPONEX_Throwing_Internal_SetReturnTarget((CHARACTERGUID)_Character, (GUIDSTRING)_Target, (STRING)_ShootSkill, (INTEGER)_Count)
THEN
DB_LLWEAPONEX_Throwing_Temp_ReturnTarget(_Character, _Target, _ShootSkill, _Count);

QRY
LLWEAPONEX_Throwing_QRY_MaxTargetsHit((CHARACTERGUID)_Character, (STRING)_ShootSkill, (INTEGER)_Count)
AND
NOT DB_LLWEAPONEX_Throwing_Temp_CountResolved(_Character, _ShootSkill)
AND
DB_LLWEAPONEX_Throwing_Temp_ForkIterator(_ShootSkill, _Character, _InitialTarget, _IteratorEvent, _TotalTargets)
AND
DB_LLWEAPONEX_Throwing_ReturnSkill(_ShootSkill, _ReturnSkill, _HitStatus, _MaxTargets, _TimerName, _Timeout)
AND
_TotalTargets < _MaxTargets
AND
_Count >= _TotalTargets
THEN
DB_LLWEAPONEX_Throwing_Temp_CountResolved(_Character, _ShootSkill);

QRY
LLWEAPONEX_Throwing_QRY_MaxTargetsHit((CHARACTERGUID)_Character, (STRING)_ShootSkill, (INTEGER)_Count)
AND
NOT DB_LLWEAPONEX_Throwing_Temp_CountResolved(_Character, _ShootSkill)
AND
DB_LLWEAPONEX_Throwing_ReturnSkill(_ShootSkill, _ReturnSkill, _HitStatus, _MaxTargets, _TimerName, _Timeout)
AND
_Count >= _MaxTargets
THEN
DB_LLWEAPONEX_Throwing_Temp_CountResolved(_Character, _ShootSkill);

QRY
LLWEAPONEX_Throwing_QRY_MaxTargetsHit((CHARACTERGUID)_Character, (STRING)_ShootSkill, (INTEGER)_Count)
AND
DB_LLWEAPONEX_Throwing_Temp_CountResolved(_Character, _ShootSkill)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_CountResolved(_Character, _ShootSkill);

PROC
LLWEAPONEX_Throwing_Internal_SetReturnTarget((CHARACTERGUID)_Character, (GUIDSTRING)_Target, (STRING)_ShootSkill, (INTEGER)_Count)
AND
NOT LLWEAPONEX_Throwing_QRY_MaxTargetsHit(_Character, _ShootSkill, _Count)
AND
DB_LLWEAPONEX_Throwing_ReturnSkill(_ShootSkill, _ReturnSkill, _HitStatus, _MaxTargets, _TimerName, _Timeout)
AND
IntegerDivide(_Timeout, 2, _FastTimeout)
AND
IntegertoString(_Count, _CountStr)
AND
IntegertoString(_MaxTargets, _TotalStr)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:Throwing:Internal:SetReturnTarget(",_ShootSkill,")] [",_CountStr,"/",_TotalStr,"] hit targets.");
ProcObjectTimerCancel(_Character, _TimerName);
ProcObjectTimer(_Character, _TimerName, _FastTimeout);

PROC
LLWEAPONEX_Throwing_Internal_SetReturnTarget((CHARACTERGUID)_Character, (GUIDSTRING)_Target, (STRING)_ShootSkill, (INTEGER)_Count)
AND
LLWEAPONEX_Throwing_QRY_MaxTargetsHit(_Character, _ShootSkill, _Count)
AND
DB_LLWEAPONEX_Throwing_ReturnSkill(_ShootSkill, _ReturnSkill, _HitStatus, _MaxTargets, _TimerName, _Timeout)
AND
DB_LLWEAPONEX_Throwing_Temp_ReturnTarget(_Character, _Target, _ShootSkill, _CurrentCount)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_ReturnTarget(_Character, _Target, _ShootSkill, _CurrentCount);
ProcObjectTimerCancel(_Character, _TimerName);
LeaderLog_Log("DEBUG", "[LLWEAPONEX:Throwing:Internal:SetReturnTarget(",_ShootSkill,")] All targets hit. Shooting return skill [",_ShootSkill,"] back to caster.");
LLWEAPONEX_Throwing_Internal_ClearIterator(_Character, _ShootSkill);
LLWEAPONEX_Throwing_ShootReturnSkill(_Character, _Target, _ReturnSkill);
LLWEAPONEX_Throwing_OnFullCombo(_Character, _ShootSkill);

PROC
LLWEAPONEX_Throwing_OnFullCombo((CHARACTERGUID)_Character, "Projectile_LLWEAPONEX_ShieldToss")
THEN
//CharacterStatusText(_Character, "LLWEAPONEX_Skills_ShieldToss_AllHit");
SetStoryEvent(_Character, "LLWEAPONEX_ShieldToss_ApplyAuraBonus");
PlayEffect(_Character, "RS3_FX_GP_Status_Harmony_Impact_01");

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Character, _TimerName)
AND
DB_LLWEAPONEX_Throwing_ReturnSkill(_ShootSkill, _ReturnSkill, _HitStatus, _MaxTargets, _TimerName, _Timeout)
AND
DB_LLWEAPONEX_Throwing_Temp_SkillNotReturned(_Character, _ShootSkill, _ReturnSkill)
THEN
LLWEAPONEX_Throwing_Internal_OnSkillTimeout(_Character, _ShootSkill, _ReturnSkill);

PROC
LLWEAPONEX_Throwing_Internal_OnSkillTimeout((CHARACTERGUID)_Character, (STRING)_ShootSkill, (STRING)_ReturnSkill)
AND
NOT DB_LLWEAPONEX_Throwing_Temp_ReturnTarget(_Character, _, _ShootSkill, _)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:Throwing:OnSkillTimeout(",_ShootSkill,")] Shooting return skill [",_ShootSkill,"] back to caster. No targets hit.");
LLWEAPONEX_Throwing_ShootReturnSkill(_Character, _Character, _ReturnSkill);
LLWEAPONEX_Throwing_Internal_ClearIterator(_Character, _ShootSkill);

PROC
LLWEAPONEX_Throwing_Internal_OnSkillTimeout((CHARACTERGUID)_Character, (STRING)_ShootSkill, (STRING)_ReturnSkill)
AND
DB_LLWEAPONEX_Throwing_ReturnSkill(_ShootSkill, _ReturnSkill, _HitStatus, _MaxTargets, _TimerName, _Timeout)
AND
DB_LLWEAPONEX_Throwing_Temp_ReturnTarget(_Character, _Target, _ShootSkill, _CurrentCount)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_ReturnTarget(_Character, _Target, _ShootSkill, _CurrentCount);
LeaderLog_Log("DEBUG", "[LLWEAPONEX:Throwing:",_TimerName,"] Shooting return skill [",_ReturnSkill,"] back to caster.");
LLWEAPONEX_Throwing_Internal_ClearIterator(_Character, _ShootSkill);
LLWEAPONEX_Throwing_ShootReturnSkill(_Character, _Target, _ReturnSkill);

PROC
LLWEAPONEX_Throwing_Internal_ClearIterator((CHARACTERGUID)_Character, (STRING)_ShootSkill)
AND
DB_LLWEAPONEX_Throwing_Temp_ForkIterator(_ShootSkill, _Character, _InitialTarget, _IteratorEvent, _TotalTargets)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_ForkIterator(_ShootSkill, _Character, _InitialTarget, _IteratorEvent, _TotalTargets);

PROC
LLWEAPONEX_Throwing_ShootReturnSkill((CHARACTERGUID)_Character, (GUIDSTRING)_Target, (STRING)_ReturnSkill)
THEN
ProcObjectTimerCancel(_Character, "LLWEAPONEX_Timers_Throwing_ClearReturnSkillTag");
ProcObjectTimer(_Character, "LLWEAPONEX_Timers_Throwing_ClearReturnSkillTag", 1500);

PROC
LLWEAPONEX_Throwing_ShootReturnSkill((CHARACTERGUID)_Character, (GUIDSTRING)_Target, (STRING)_ReturnSkill)
AND
DB_LLWEAPONEX_Throwing_Temp_SkillNotReturned(_Character, _ShootSkill, _ReturnSkill)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_SkillNotReturned(_Character, _ShootSkill, _ReturnSkill);

PROC
ProcObjectTimerFinished(_Character, "LLWEAPONEX_Timers_Throwing_ClearReturnSkillTag")
AND
DB_LLWEAPONEX_Throwing_ReturnSkillTags(_ReturnSkill, _Tag)
AND
IsTagged(_Character, _Tag, 1)
THEN
ClearTag(_Character, _Tag);

PROC
LLWEAPONEX_Throwing_ShootReturnSkill((CHARACTERGUID)_Character, (GUIDSTRING)_Target, (STRING)_ReturnSkill)
AND
ObjectIsCharacter((CHARACTERGUID)_Target, 1)
THEN
SetVarString(_Character, "LLWEAPONEX_ReturnSkill", _ReturnSkill);
CharacterCharacterSetEvent(_Character, _Target, "LLWEAPONEX_Events_ShootReturnSkill");

PROC
LLWEAPONEX_Throwing_ShootReturnSkill((CHARACTERGUID)_Character, (GUIDSTRING)_Target, (STRING)_ReturnSkill)
AND
ObjectIsItem((ITEMGUID)_Target, 1)
THEN
SetVarString(_Character, "LLWEAPONEX_ReturnSkill", _ReturnSkill);
CharacterItemSetEvent(_Character, _Target, "LLWEAPONEX_Events_ShootReturnSkill");

//Debug
IF
DB_LLWEAPONEX_Throwing_Temp_ForkIterator(_ShootSkill, _Character, _InitialTarget, _IteratorEvent, _TotalTargets)
AND
IntegertoString(_TotalTargets, _TotalStr)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:Throwing:ForkIterator(",_ShootSkill,")] Found [",_TotalStr,"] total fork targets.");

IF
DB_LLWEAPONEX_Throwing_Temp_ReturnTarget(_Character, _Target, _ShootSkill, _Count)
AND
DB_LLWEAPONEX_Throwing_Temp_ForkIterator(_ShootSkill, _Character, _InitialTarget, _IteratorEvent, _TotalTargets)
AND
IntegertoString(_Count, _CountStr)
AND
IntegertoString(_TotalTargets, _TotalStr)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:Throwing:ReturnTarget(",_ShootSkill,")] [",_CountStr,"/",_TotalStr,"] hit targets.");

//END_REGION

//REGION BALRIN_AXE_OLD_METHOD
/*
IF
CharacterUsedSkill(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A_Targeting", _, _)
THEN
CharacterSetAnimationOverride(_Player, "skill_prepare_weapon_01_loop");

IF
CharacterUsedSkill(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A_Targeting", _, _)
AND
CharacterIsInFightMode(_Player, 0)
THEN
CharacterSetFightMode(_Player, 1, 1);

IF
CharacterUsedSkillOnTarget(_Player, (CHARACTERGUID)_Target, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A_Targeting", _, _)
AND
LLWEAPONEX_QRY_WeaponTypeEquipped(_Player, "LLWEAPONEX_UniqueThrowingAxeA")
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:Throwing:CharacterUsedSkillOnTarget] Throwing Balrin's Axe after 250ms (failsafe).");
LeaderLib_Timers_StartCharacterCharacterTimer(_Player, _Target, 250, "LLWEAPONEX_Timers_Throwing_BalrinTargetingFinished", "LLWEAPONEX_Throwing_ThrowBalrinAxe");

IF
CharacterUsedSkillOnTarget(_Player, (CHARACTERGUID)_Target, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A_Targeting", _, _)
AND
NOT LLWEAPONEX_QRY_WeaponTypeEquipped(_Player, "LLWEAPONEX_UniqueThrowingAxeA")
THEN
CharacterSetAnimationOverride(_Player, "");
CharacterAddActionPoints(_Player, 2);
ShowNotification(_Player, "LLWEAPONEX_Nofitications_BalrinAxeMissing");

IF
SkillCast(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A_Targeting", _, _)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:Throwing:SkillCast(Balrin's Targeting)] Throwing Balrin's Axe after 24ms.");
//CharacterFlushQueue(_Player);
LeaderLib_Timers_RestartCharacterCharacterTimer(_Player, "LLWEAPONEX_Timers_Throwing_BalrinTargetingFinished", 24);

IF
CharacterCharacterEvent(_Player, _Target, "LLWEAPONEX_Throwing_ThrowBalrinAxe")
THEN
CharacterSetAnimationOverride(_Player, "");

IF
CharacterCharacterEvent(_Player, _Target, "LLWEAPONEX_Throwing_ThrowBalrinAxe")
AND
NOT DB_LLWEAPONEX_Throwing_Temp_BalrinAxeThrown(_Player, _Target, _)
AND
NOT DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Player, _Target, _, _)
AND
CharacterGetEquippedItem(_Player, "Weapon", (ITEMGUID)_ThrowingAxe)
AND
_ThrowingAxe != NULL_00000000-0000-0000-0000-000000000000
AND
IsTagged(_ThrowingAxe, "LLWEAPONEX_UniqueThrowingAxeA", 1)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:Throwing:LLWEAPONEX_Throwing_ThrowBalrinAxe] Throwing Balrin's Axe via [Projectile_LLWEAPONEX_Throw_UniqueAxe_A].");
DB_LLWEAPONEX_Throwing_Temp_BalrinAxeThrown(_Player, _Target, _ThrowingAxe);
ProcObjectTimerCancel(_Player, "LLWEAPONEX_Timers_BalrinAxeThrowingFailure");
ProcObjectTimer(_Player, "LLWEAPONEX_Timers_BalrinAxeThrowingFailure", 250);
CharacterUseSkill(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A", _Target, 1, 1, 1);

IF
CharacterCharacterEvent(_Player, _Target, "LLWEAPONEX_Throwing_ThrowBalrinAxe")
AND
NOT DB_LLWEAPONEX_Throwing_Temp_BalrinAxeThrown(_Player, _Target, _)
AND
NOT DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Player, _Target, _, _)
AND
CharacterGetEquippedItem(_Player, "Shield", (ITEMGUID)_ThrowingAxe)
AND
_ThrowingAxe != NULL_00000000-0000-0000-0000-000000000000
AND
IsTagged(_ThrowingAxe, "LLWEAPONEX_UniqueThrowingAxeA", 1)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX:Throwing:LLWEAPONEX_Throwing_ThrowBalrinAxe] Throwing Balrin's Axe via [Projectile_LLWEAPONEX_Throw_UniqueAxe_A_Offhand].");
DB_LLWEAPONEX_Throwing_Temp_BalrinAxeThrown(_Player, _Target, _ThrowingAxe);
ProcObjectTimerCancel(_Player, "LLWEAPONEX_Timers_BalrinAxeThrowingFailure");
ProcObjectTimer(_Player, "LLWEAPONEX_Timers_BalrinAxeThrowingFailure", 250);
CharacterUseSkill(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A_Offhand", _Target, 1, 1, 1);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Player, "LLWEAPONEX_Timers_BalrinAxeThrowingFailure")
AND
DB_LLWEAPONEX_Throwing_Temp_BalrinAxeThrown(_Player, _Target, _ThrowingAxe)
AND
NOT DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Player, _Target, _, _)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_BalrinAxeThrown(_Player, _Target, _ThrowingAxe);
LeaderLog_Log("DEBUG", "[LLWEAPONEX:Throwing:LLWEAPONEX_Timers_BalrinAxeThrowingFailure] [ERROR] Failed to throw Balrin's Axe! Trying again...");
CharacterCharacterSetEvent(_Player, _Target, "LLWEAPONEX_Throwing_ThrowBalrinAxe");
*/

/*
PROC
LLWEAPONEX_Throwing_BalrinAxe_RefreshSkillCooldown((CHARACTERGUID)_Player)
AND
CharacterHasSkill(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A_Targeting", 1)
THEN
CharacterRemoveSkill(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A_Targeting");
CharacterAddSkill(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A_Targeting", 0);
*/

//END_REGION

//REGION BALRIN_AXE_SKILLS
IF
SkillCast(_Player, "Shout_LLWEAPONEX_Prepare_BalrinsAxe", _, _)
AND
NOT LLWEAPONEX_QRY_WeaponTypeEquipped(_Player, "LLWEAPONEX_UniqueThrowingAxeA")
THEN
ShowNotification(_Player, "LLWEAPONEX_Nofitications_BalrinAxeMissing");

IF
CharacterStatusApplied(_Player, "LLWEAPONEX_BALRINAXE_PREPARED", _)
AND
LLWEAPONEX_QRY_WeaponTypeEquipped(_Player, "LLWEAPONEX_UniqueThrowingAxeA")
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX_06_Throwing:CharacterStatusApplied(LLWEAPONEX_BALRINAXE_PREPARED)] Adding Balrin's Axe throwing skill.");
LLWEAPONEX_Throwing_BalrinAxe_AddThrowSkill(_Player);

PROC
LLWEAPONEX_Throwing_BalrinAxe_AddThrowSkill((CHARACTERGUID)_Player)
AND
CharacterGetEquippedItem(_Player, "Weapon", (ITEMGUID)_ThrowingAxe)
AND
_ThrowingAxe != NULL_00000000-0000-0000-0000-000000000000
AND
IsTagged(_ThrowingAxe, "LLWEAPONEX_UniqueThrowingAxeA", 1)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX_06_Throwing:BalrinAxe:AddThrowSkill] Adding mainhand throwing skill");
CharacterRemoveSkill(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A_Offhand");
CharacterAddSkill(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A", 1);

PROC
LLWEAPONEX_Throwing_BalrinAxe_AddThrowSkill((CHARACTERGUID)_Player)
AND
CharacterGetEquippedItem(_Player, "Shield", (ITEMGUID)_ThrowingAxe)
AND
_ThrowingAxe != NULL_00000000-0000-0000-0000-000000000000
AND
IsTagged(_ThrowingAxe, "LLWEAPONEX_UniqueThrowingAxeA", 1)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX_06_Throwing:BalrinAxe:AddThrowSkill] Adding offhand throwing skill");
CharacterRemoveSkill(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A");
CharacterAddSkill(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A_Offhand", 1);

IF
CharacterStatusRemoved(_Player, "LLWEAPONEX_BALRINAXE_PREPARED", _)
THEN
LLWEAPONEX_Throwing_RemoveBalrinAxeSkills(_Player);

PROC
LLWEAPONEX_Throwing_RemoveBalrinAxeSkills((CHARACTERGUID)_Player)
AND
CharacterHasSkill(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A", 1)
THEN
CharacterRemoveSkill(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A");

PROC
LLWEAPONEX_Throwing_RemoveBalrinAxeSkills((CHARACTERGUID)_Player)
AND
CharacterHasSkill(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A_Offhand", 1)
THEN
CharacterRemoveSkill(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A_Offhand");
//END_REGION

//REGION BALRIN_AXE_TEMPLATE_UNEQUIPPED
//Remove the prepared status when Balrin's Axe is swapped between hands
/*
WPN_UNIQUE_LLWEAPONEX_Humans_Axe_1H_A_8ff641b7-920a-4bbc-b1c1-d17a73312e53
WPN_UNIQUE_LLWEAPONEX_Humans_Axe_1H_A_Air_f4db8570-4a0b-4292-bb36-f66fb2d8b0c3
WPN_UNIQUE_LLWEAPONEX_Humans_Axe_1H_A_Fire_1f3bc0cd-6c5f-4291-812b-50a92bba3adb
WPN_UNIQUE_LLWEAPONEX_Humans_Axe_1H_A_Oil_6e245aba-3bf5-45cd-a95f-7ec29635b8fb
WPN_UNIQUE_LLWEAPONEX_Humans_Axe_1H_A_Water_e15b0225-bc10-4c1d-8088-8aec094a1435
*/
PROC
LLWEAPONEX_OnItemUnEquipped((CHARACTERGUID)_Character, (ITEMGUID)_Item, "WPN_UNIQUE_LLWEAPONEX_Humans_Axe_1H_A_8ff641b7-920a-4bbc-b1c1-d17a73312e53")
AND
NOT DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Character, _, _, _)
THEN
RemoveStatus(_Character, "LLWEAPONEX_BALRINAXE_PREPARED");

PROC
LLWEAPONEX_OnItemUnEquipped((CHARACTERGUID)_Character, (ITEMGUID)_Item, "WPN_UNIQUE_LLWEAPONEX_Humans_Axe_1H_A_Air_f4db8570-4a0b-4292-bb36-f66fb2d8b0c3")
AND
NOT DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Character, _, _, _)
THEN
RemoveStatus(_Character, "LLWEAPONEX_BALRINAXE_PREPARED");

PROC
LLWEAPONEX_OnItemUnEquipped((CHARACTERGUID)_Character, (ITEMGUID)_Item, "WPN_UNIQUE_LLWEAPONEX_Humans_Axe_1H_A_Fire_1f3bc0cd-6c5f-4291-812b-50a92bba3adb")
AND
NOT DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Character, _, _, _)
THEN
RemoveStatus(_Character, "LLWEAPONEX_BALRINAXE_PREPARED");

PROC
LLWEAPONEX_OnItemUnEquipped((CHARACTERGUID)_Character, (ITEMGUID)_Item, "WPN_UNIQUE_LLWEAPONEX_Humans_Axe_1H_A_Oil_6e245aba-3bf5-45cd-a95f-7ec29635b8fb")
AND
NOT DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Character, _, _, _)
THEN
RemoveStatus(_Character, "LLWEAPONEX_BALRINAXE_PREPARED");

PROC
LLWEAPONEX_OnItemUnEquipped((CHARACTERGUID)_Character, (ITEMGUID)_Item, "WPN_UNIQUE_LLWEAPONEX_Humans_Axe_1H_A_Water_e15b0225-bc10-4c1d-8088-8aec094a1435")
AND
NOT DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Character, _, _, _)
THEN
RemoveStatus(_Character, "LLWEAPONEX_BALRINAXE_PREPARED");
//END_REGION

//REGION BALRIN_AXE_MAIN
IF
CharacterUsedSkillOnTarget(_Player, _Target, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A", _, _)
AND
CharacterGetEquippedItem(_Player, "Weapon", (ITEMGUID)_ThrowingAxe)
AND
_ThrowingAxe != NULL_00000000-0000-0000-0000-000000000000
AND
IsTagged(_ThrowingAxe, "LLWEAPONEX_UniqueThrowingAxeA", 1)
THEN
DB_LLWEAPONEX_Throwing_Temp_BalrinAxeThrown(_Player, _Target, _ThrowingAxe);

IF
CharacterUsedSkillOnTarget(_Player, _Target, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A_Offhand", _, _)
AND
CharacterGetEquippedItem(_Player, "Shield", (ITEMGUID)_ThrowingAxe)
AND
_ThrowingAxe != NULL_00000000-0000-0000-0000-000000000000
AND
IsTagged(_ThrowingAxe, "LLWEAPONEX_UniqueThrowingAxeA", 1)
THEN
DB_LLWEAPONEX_Throwing_Temp_BalrinAxeThrown(_Player, _Target, _ThrowingAxe);

IF
SkillCast(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A", _, _)
THEN
LLWEAPONEX_Throwing_OnSkillCast(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A");

IF
SkillCast(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A_Offhand", _, _)
THEN
LLWEAPONEX_Throwing_OnSkillCast(_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A");

PROC
LLWEAPONEX_Throwing_OnSkillCast((CHARACTERGUID)_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A")
THEN
RemoveStatus(_Player, "LLWEAPONEX_BALRINAXE_PREPARED");

PROC
LLWEAPONEX_Throwing_OnSkillCast((CHARACTERGUID)_Player, "Projectile_LLWEAPONEX_Throw_UniqueAxe_A")
AND
DB_LLWEAPONEX_Throwing_Temp_BalrinAxeThrown(_Player, _Target, _ThrowingAxe)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_BalrinAxeThrown(_Player, _Target, _ThrowingAxe);
DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Player, _Target, _ThrowingAxe, 0);
LeaderLib_Timers_StartObjectObjectTimer(_Player, _Target, 800, "LLWEAPONEX_Timers_Throwing_CheckForBalrinAxeKill", "LLWEAPONEX_CheckForBalrinAxeKill");
CharacterUnequipItem(_Player, _ThrowingAxe);
SetOnStage(_ThrowingAxe, 0);
ProcObjectTimer(_Player, "LLWEAPONEX_Timers_Throwing_BalrinAxeThrowMissed", 1200);
LeaderLog_Log("DEBUG", "[LLWEAPONEX:Throwing:OnSkillCast][Projectile_LLWEAPONEX_Throw_UniqueAxe_A] Unequipped Balrin's Axe.");

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Player, "LLWEAPONEX_Timers_Throwing_BalrinAxeThrowMissed")
AND
DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Player, _Target, _ThrowingAxe, 0)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Player, _Target, _ThrowingAxe, 0);
SetOnStage(_ThrowingAxe, 1);
CharacterEquipItem(_Player, _ThrowingAxe);
CharacterStatusText(_Player, "LLWEAPONEX_StatusText_BalrinAxeTimedOut");

IF
CharacterStatusAttempt(_Target, "LLWEAPONEX_WEAPON_THROW_UNIQUE_AXE1H_A", (CHARACTERGUID)_Player)
AND
DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Player, _Target, _ThrowingAxe, 0)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Player, _Target, _ThrowingAxe, 0);
DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Player, _Target, _ThrowingAxe, 1);
LeaderLib_Timers_RestartObjectObjectTimer(_Player, _Target, "LLWEAPONEX_Timers_Throwing_CheckForBalrinAxeKill", 500);
ProcObjectTimerCancel(_Player, "LLWEAPONEX_Timers_Throwing_BalrinAxeThrowMissed");
LeaderLog_Log("DEBUG", "[LLWEAPONEX:Throwing:CharacterStatusApplied][LLWEAPONEX_WEAPON_THROW_UNIQUE_AXE1H_A] Balrin's Axe hit the target.");

//Refund cooldown on kill
PROC
LeaderLib_Timers_ObjectObjectTimerFinished((GUIDSTRING)_Player, (GUIDSTRING)_Target, "LLWEAPONEX_CheckForBalrinAxeKill")
AND
CharacterIsDead((CHARACTERGUID)_Target, 1)
THEN
LLWEAPONEX_Throwing_BalrinAxe_RefreshSkillCooldown((CHARACTERGUID)_Player);

IF
CharacterStatusAttempt(_Player, "LLWEAPONEX_BALRINAXE_RECOVER_START", (CHARACTERGUID)_Target)
AND
DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Player, _Target, _ThrowingAxe, 1)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Player, _Target, _ThrowingAxe, 1);
RemoveStatus(_Target, "LLWEAPONEX_WEAPON_THROW_UNIQUE_AXE1H_A");
ApplyStatus(_Target, "LLWEAPONEX_BALRINAXE_DEBUFF", 6.0, 1, _Player);
//CharacterLookAt(_Player, _Target);
//PlayAnimation(_Player, "use_loot");
LLWEAPONEX_Throwing_ReturnBalrinAxe(_Player, _ThrowingAxe);
CharacterStatusText(_Player, "LLWEAPONEX_StatusText_BalrinAxeRetrieved");

//Happens when they die too
IF
CharacterStatusRemoved(_Target, "LLWEAPONEX_WEAPON_THROW_UNIQUE_AXE1H_A", _)
AND
DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Player, _Target, _ThrowingAxe, 1)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Player, _Target, _ThrowingAxe, 1);
LLWEAPONEX_Throwing_ReturnBalrinAxe(_Player, _ThrowingAxe);
CharacterStatusText(_Player, "LLWEAPONEX_StatusText_BalrinAxeTimedOut");

PROC
LLWEAPONEX_Throwing_ReturnBalrinAxe((CHARACTERGUID)_Player, (ITEMGUID)_ThrowingAxe)
AND
_ThrowingAxe != NULL_00000000-0000-0000-0000-000000000000
THEN
DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeRequipping(_Player, _ThrowingAxe);
ProcObjectTimerCancel(_Player, "LLWEAPONEX_Timers_Throwing_CheckForBalrinEquipFail");
ProcObjectTimer(_Player, "LLWEAPONEX_Timers_Throwing_CheckForBalrinEquipFail", 250);
RemoveStatus(_Player, "LLWEAPONEX_BALRINAXE_DISARMED_INFO");
SetOnStage(_ThrowingAxe, 1);
CharacterEquipItem(_Player, _ThrowingAxe);
LLWEAPONEX_Throwing_ClearBalrinAxeData(_Player);

//Refresh cooldown
PROC
LLWEAPONEX_Throwing_BalrinAxe_RefreshSkillCooldown((CHARACTERGUID)_Player)
THEN
ApplyStatus(_Player, "LLWEAPONEX_BALRINAXE_PREPARED", -1.0, 1, _Player);

PROC
LLWEAPONEX_Throwing_ReturnBalrinAxe((CHARACTERGUID)_Player, (ITEMGUID)_ThrowingAxe)
AND
_ThrowingAxe == NULL_00000000-0000-0000-0000-000000000000
THEN
ProcObjectTimerCancel(_Player, "LLWEAPONEX_Timers_Throwing_CheckForBalrinEquipFail");
ProcObjectTimer(_Player, "LLWEAPONEX_Timers_Throwing_CheckForBalrinEquipFail", 250);

PROC
LLWEAPONEX_Throwing_ClearBalrinAxeData((CHARACTERGUID)_Player)
AND
DB_LLWEAPONEX_Throwing_Temp_BalrinAxeThrown(_Player, _Target, _ThrowingAxe)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_BalrinAxeThrown(_Player, _Target, _ThrowingAxe);

PROC
LLWEAPONEX_Throwing_ClearBalrinAxeData((CHARACTERGUID)_Player)
AND
DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Player, _Target, _ThrowingAxe, _Success)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Player, _Target, _ThrowingAxe, _Success);

IF
//ItemTemplateUnEquipped("WPN_UNIQUE_LLWEAPONEX_Humans_Axe_1H_A_8ff641b7-920a-4bbc-b1c1-d17a73312e53", _Player)
CharacterStatusRemoved(_Player, "LLWEAPONEX_BALRINAXE_INFO", _)
AND
NOT DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeCaster(_Player, _, _, _)
AND
NOT LeaderLib_Helper_QRY_HasStatus(_Player, "LLWEAPONEX_BALRINAXE_INFO")
THEN
LLWEAPONEX_Throwing_OnBalrinAxeRemoved(_Player);

PROC
LLWEAPONEX_Throwing_OnBalrinAxeRemoved((CHARACTERGUID)_Player)
THEN
RemoveStatus(_Player, "LLWEAPONEX_BALRINAXE_PREPARED");
CharacterRemoveSkill(_Player, "Shout_LLWEAPONEX_Prepare_BalrinsAxe");
ObjectClearFlag(_Player, "LLWEAPONEX_HasBalrinThrowingAxe", 0);
LLWEAPONEX_Throwing_ClearBalrinAxeData(_Player);
LLWEAPONEX_Throwing_RemoveBalrinAxeSkills(_Player);

IF
//ItemTemplateEquipped("WPN_UNIQUE_LLWEAPONEX_Humans_Axe_1H_A_8ff641b7-920a-4bbc-b1c1-d17a73312e53", _Player)
CharacterStatusAttempt(_Player, "LLWEAPONEX_BALRINAXE_INFO", _)
AND
ObjectGetFlag(_Player, "Mimicry_IsMimicking", 0)
AND
CharacterHasSkill(_Player, "Shout_LLWEAPONEX_Prepare_BalrinsAxe", 0)
THEN
CharacterAddSkill(_Player, "Shout_LLWEAPONEX_Prepare_BalrinsAxe", 1);
ObjectSetFlag(_Player, "LLWEAPONEX_HasBalrinThrowingAxe", 0);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Player, "LLWEAPONEX_Timers_Throwing_CheckForBalrinEquipFail")
AND
DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeRequipping(_Player, _ThrowingAxe)
AND
CharacterGetEquippedItem(_Player, "Weapon", _ThrowingAxe)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeRequipping(_Player, _ThrowingAxe);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Player, "LLWEAPONEX_Timers_Throwing_CheckForBalrinEquipFail")
AND
DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeRequipping(_Player, _ThrowingAxe)
AND
CharacterGetEquippedItem(_Player, "Shield", _ThrowingAxe)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeRequipping(_Player, _ThrowingAxe);

//Not equipped
PROC
ProcObjectTimerFinished((CHARACTERGUID)_Player, "LLWEAPONEX_Timers_Throwing_CheckForBalrinEquipFail")
AND
DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeRequipping(_Player, _ThrowingAxe)
THEN
LLWEAPONEX_Throwing_OnBalrinAxeRemoved(_Player);
NOT DB_LLWEAPONEX_Throwing_Temp_ThrowingAxeRequipping(_Player, _ThrowingAxe);
LLWEAPONEX_Throwing_FindAndReturnBalrinAxe(_Player, _ThrowingAxe);

//For when Balrin's Axe failed to equip, and the item is missing.
PROC
LLWEAPONEX_Throwing_FindAndReturnBalrinAxe((CHARACTERGUID)_Player, (ITEMGUID)_ThrowingAxe)
AND
ObjectExists(_ThrowingAxe, 1)
THEN
SetOnStage(_ThrowingAxe, 1);
ItemToInventory(_ThrowingAxe, _Player);

PROC
LLWEAPONEX_Throwing_FindAndReturnBalrinAxe((CHARACTERGUID)_Player, (ITEMGUID)_ThrowingAxe)
AND
ObjectExists(_ThrowingAxe, 0)
AND
NOT PartyFindTaggedItem(_Player, "LLWEAPONEX_UniqueThrowingAxeA", 1, _)
THEN
ItemTemplateAddTo("WPN_UNIQUE_LLWEAPONEX_Humans_Axe_1H_A_8ff641b7-920a-4bbc-b1c1-d17a73312e53", _Player, 1, 1);
//END_REGION

//REGION MOVING_OBJECT_WEAPON
IF
CharacterUsedSkill(_Player, "Projectile_LLWEAPONEX_ThrowWeapon", _, _)
THEN
DB_LLWEAPONEX_Throwing_Temp_MovingObjectWeapon_Waiting(_Player);

IF
StoryEvent(_Object, "LLWEAPONEX_MovingObjectWeapon_Init")
AND
ObjectExists(_Object, 1)
AND
ObjectIsItem((ITEMGUID)_Object, 1)
AND
ItemGetOwner(_Object, _Player)
AND
DB_LLWEAPONEX_Throwing_Temp_MovingObjectWeapon_Waiting(_Player)
AND
NOT DB_LLWEAPONEX_Throwing_Temp_MovingObjectWeapon_Active(_, _Object)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_MovingObjectWeapon_Waiting(_Player);
DB_LLWEAPONEX_Throwing_Temp_MovingObjectWeapon_Active(_Player, _Object);
LeaderLib_Timers_StartCharacterItemTimer(_Player, _Object, 125, "LLWEAPONEX_Timers_MovingObject_CopyVisuals", "LLWEAPONEX_MovingObject_CopyVisuals");

IF
CharacterItemEvent(_Player, _Object, "LLWEAPONEX_MovingObject_CopyVisuals")
AND
ObjectExists(_Object, 1)
THEN
ApplyStatus(_Player, "LEADERLIB_HIDE_WEAPON", 30.0, 1, _Player);
LLWEAPONEX_Throwing_MovingObject_CopyWeaponVisuals(_Player, _Object);

PROC
LLWEAPONEX_Throwing_MovingObject_CopyWeaponVisuals((CHARACTERGUID)_Player, (ITEMGUID)_Object)
AND
CharacterGetEquippedItem(_Player, "Weapon", (ITEMGUID)_Weapon)
AND
_Weapon != NULL_00000000-0000-0000-0000-000000000000
AND
ObjectExists(_Weapon, 1)
AND
GetTemplate(_Weapon, _Template)
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX_06_Throwing:MovingObject_CopyWeaponVisuals] Transforming object into [",_Template,"].");
Transform(_Object, _Template, 0, 1, 0);
ItemSetCanPickUp(_Object, 0);
ItemSetOwner(_Object, _Player);
LLWEAPONEX_Throwing_MovingObject_HideWeaponEffects(_Weapon);

PROC
LLWEAPONEX_Throwing_MovingObject_CopyWeaponVisuals((CHARACTERGUID)_Player, (ITEMGUID)_Object)
AND
CharacterGetEquippedItem(_Player, "Shield", (ITEMGUID)_Weapon)
AND
_Weapon != NULL_00000000-0000-0000-0000-000000000000
AND
ObjectExists(_Weapon, 1)
AND
NOT CharacterGetEquippedItem(_Player, "Weapon", _Weapon) // Two-handed weapons
AND
NOT CharacterGetEquippedShield(_Player, _Weapon) // Don't throw equipped shields
AND
GetPosition(_Object, _x, _y, _z)
AND
GetTemplate(_Weapon, _Template)
AND
CreateItemTemplateAtPosition(_Template, _x, _y, _z, _OffhandWeapon)
THEN
ItemSetCanPickUp(_OffhandWeapon, 0);
DB_LLWEAPONEX_Throwing_Temp_ThrownOffhandProjectile(_Player, _Object, _OffhandWeapon);
LLWEAPONEX_Throwing_MovingObject_HideWeaponEffects(_Weapon);

PROC
LLWEAPONEX_Throwing_MovingObject_HideWeaponEffects((ITEMGUID)_Weapon)
AND
IsTagged(_Weapon, "DISABLE_WEAPON_EFFECTS", 0)
THEN
SetTag(_Weapon, "DISABLE_WEAPON_EFFECTS");
ObjectSetFlag(_Weapon, "LLWEAPONEX_MovingObject_ResetDisableWeaponFXTag", 0);

IF
StoryEvent((ITEMGUID)_Object, "LLWEAPONEX_MovingObjectWeapon_Tick")
AND
DB_LLWEAPONEX_Throwing_Temp_ThrownOffhandProjectile(_Player, _Object, _OffhandWeapon)
AND
GetPosition(_Object, _x, _y, _z)
AND
RealSum(_y, 0.25, _ty)
AND
GetRotation(_Object, _rx, _ry, _rz)
THEN
ItemToTransform(_OffhandWeapon, _x, _ty, _z, _rx, _ry, _rz, 1, _Player);
LeaderLog_Log("DEBUG", "[LLWEAPONEX_06_Throwing:LLWEAPONEX_MovingObjectWeapon_Tick] Updating offhand projectile position.");

IF
CharacterItemEvent(_Player, _Object, "LLWEAPONEX_MovingObjectWeapon_Landed")
AND
DB_LLWEAPONEX_Throwing_Temp_MovingObjectWeapon_Active(_Player, _Object)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_MovingObjectWeapon_Active(_Player, _Object);
LeaderLog_Log("DEBUG", "[LLWEAPONEX_06_Throwing:LLWEAPONEX_MovingObjectWeapon_Landed] Weapon MovingObject landed. Teleporting equipped weapon to position.");
LLWEAPONEX_Throwing_MovingObject_TeleportWeapon(_Player, _Object);
RemoveStatus(_Player, "LEADERLIB_HIDE_WEAPON");
SetOnStage(_Object, 0);
ItemDestroy(_Object);

IF
CharacterItemEvent(_Player, _Object, "LLWEAPONEX_MovingObjectWeapon_Landed")
AND
DB_LLWEAPONEX_Throwing_Temp_ThrownOffhandProjectile(_Player, _Object, _OffhandWeapon)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_ThrownOffhandProjectile(_Player, _Object, _OffhandWeapon);
LLWEAPONEX_Throwing_MovingObject_TeleportOffhandWeapon(_Player, _OffhandWeapon);
SetOnStage(_OffhandWeapon, 0);
ItemDestroy(_OffhandWeapon);

PROC
LLWEAPONEX_Throwing_MovingObject_TeleportWeapon((CHARACTERGUID)_Player, (ITEMGUID)_Object)
AND
CharacterGetEquippedWeapon(_Player, (ITEMGUID)_Weapon)
AND
_Weapon != NULL_00000000-0000-0000-0000-000000000000
THEN
CharacterUnequipItem(_Player, _Weapon);
LeaderLib_Helpers_CopyItemTransform(_Weapon, _Object);
LLWEAPONEX_Throwing_MovingObject_ResetWeaponEffects(_Weapon);

PROC
LLWEAPONEX_Throwing_MovingObject_TeleportOffhandWeapon((CHARACTERGUID)_Player, (ITEMGUID)_Object)
AND
CharacterGetEquippedItem(_Player, "Shield", (ITEMGUID)_Weapon)
AND
_Weapon != NULL_00000000-0000-0000-0000-000000000000
THEN
CharacterUnequipItem(_Player, _Weapon);
LeaderLib_Helpers_CopyItemTransform(_Weapon, _Object);
LLWEAPONEX_Throwing_MovingObject_ResetWeaponEffects(_Weapon);

PROC
LLWEAPONEX_Throwing_MovingObject_ResetWeaponEffects((ITEMGUID)_Weapon)
AND
IsTagged(_Weapon, "DISABLE_WEAPON_EFFECTS", 1)
AND
ObjectGetFlag(_Weapon, "LLWEAPONEX_MovingObject_ResetDisableWeaponFXTag", 1)
THEN
ObjectClearFlag(_Weapon, "LLWEAPONEX_MovingObject_ResetDisableWeaponFXTag", 0);
ClearTag(_Weapon, "DISABLE_WEAPON_EFFECTS");
//END_REGION

//REGION THROW_OBJECT
IF
CharacterStatusApplied(_Target, "LLWEAPONEX_TOSSED", (CHARACTERGUID)_Source)
THEN
DB_LLWEAPONEX_Throwing_Temp_TossedChar(_Source, _Target);
CharacterCharacterSetEvent(_Source, _Target, "LLWEAPONEX_Throwing_TossObject");
LeaderLib_Timers_StartObjectObjectTimer(_Source, _Target, 3500, "LLWEAPONEX_Timers_Tossed_ResetTargetDB", "LLWEAPONEX_Tossed_ResetTargetDB");

IF
ItemStatusChange(_Target, "LLWEAPONEX_TOSSED", (CHARACTERGUID)_Source)
THEN
DB_LLWEAPONEX_Throwing_Temp_TossedItem(_Source, _Target);
CharacterItemSetEvent(_Source, (ITEMGUID)_Target, "LLWEAPONEX_Throwing_TossObject");
LeaderLib_Timers_StartObjectObjectTimer(_Source, _Target, 3500, "LLWEAPONEX_Timers_Tossed_ResetTargetDB", "LLWEAPONEX_Tossed_ResetTargetDB");

PROC
LLWEAPONEX_Throwing_TossObject_LaunchCharStart((CHARACTERGUID)_Source, (CHARACTERGUID)_Target)
AND
CharacterGetAttribute(_Source, "Strength", _Strength)
THEN
LLWEAPONEX_Throwing_TossObject_Launch(_Source, _Strength, _Target);

PROC
LLWEAPONEX_Throwing_TossObject_LaunchItemStart((CHARACTERGUID)_Source, (GUIDSTRING)_Target)
AND
CharacterGetAttribute(_Source, "Strength", _Strength)
THEN
LLWEAPONEX_Throwing_TossObject_Launch(_Source, _Strength, _Target);

PROC
LLWEAPONEX_Throwing_TossObject_Launch((CHARACTERGUID)_Source, (INTEGER)_Strength, (GUIDSTRING)_Target)
AND
NOT DB_LLWEAPONEX_Throwing_Temp_TossResolved(_Source, _Target)
AND
DB_LLWEAPONEX_Throwing_StrengthDistanceConstants(_Min, _Max)
AND
_Strength < _Min
THEN
DB_LLWEAPONEX_Throwing_Temp_TossResolved(_Source, _Target);
LeaderLib_Force_Apply(_Source, _Target, 1);

PROC
LLWEAPONEX_Throwing_TossObject_Launch((CHARACTERGUID)_Source, (INTEGER)_Strength, (GUIDSTRING)_Target)
AND
NOT DB_LLWEAPONEX_Throwing_Temp_TossResolved(_Source, _Target)
AND
DB_LLWEAPONEX_Throwing_StrengthDistanceConstants(_Min, _Max)
AND
_Strength > _Max
THEN
DB_LLWEAPONEX_Throwing_Temp_TossResolved(_Source, _Target);
LeaderLib_Force_Apply(_Source, _Target, 11);

PROC
LLWEAPONEX_Throwing_TossObject_Launch((CHARACTERGUID)_Source, (INTEGER)_Strength, (GUIDSTRING)_Target)
AND
NOT DB_LLWEAPONEX_Throwing_Temp_TossResolved(_Source, _Target)
AND
DB_LLWEAPONEX_Throwing_StrengthToDistance(_Strength, _Dist)
THEN
DB_LLWEAPONEX_Throwing_Temp_TossResolved(_Source, _Target);
LeaderLib_Force_Apply(_Source, _Target, _Dist);

PROC
LLWEAPONEX_Throwing_TossObject_Launch((CHARACTERGUID)_Source, (INTEGER)_Strength, (GUIDSTRING)_Target)
AND
DB_LLWEAPONEX_Throwing_Temp_TossResolved(_Source, _Target)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_TossResolved(_Source, _Target);

IF
CharacterStatusApplied(_Target, "LLWEAPONEX_TOSSED_LAND", _)
AND
DB_LLWEAPONEX_Throwing_Temp_TossedChar(_Source, _Target)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_TossedChar(_Source, _Target);
CharacterCharacterSetEvent(_Source, _Target, "LLWEAPONEX_Throwing_TossObject_Landed");
LeaderLib_Timers_CancelObjectObjectTimer(_Source, _Target, "LLWEAPONEX_Timers_Tossed_ResetTargetDB");

IF
ItemStatusChange(_Target, "LLWEAPONEX_TOSSED_LAND", _)
AND
DB_LLWEAPONEX_Throwing_Temp_TossedItem(_Source, _Target)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_TossedItem(_Source, _Target);
CharacterItemSetEvent(_Source, _Target, "LLWEAPONEX_Throwing_TossObject_Landed");
LeaderLib_Timers_CancelObjectObjectTimer(_Source, _Target, "LLWEAPONEX_Timers_Tossed_ResetTargetDB");

PROC
LeaderLib_Timers_ObjectObjectTimerFinished((CHARACTERGUID)_Source, _Target, "LLWEAPONEX_Tossed_ResetTargetDB")
AND
ObjectIsCharacter((CHARACTERGUID)_Target, 1)
AND
DB_LLWEAPONEX_Throwing_Temp_TossedChar(_Source, _Target)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_TossedChar(_Source, _Target);

PROC
LeaderLib_Timers_ObjectObjectTimerFinished((CHARACTERGUID)_Source, _Target, "LLWEAPONEX_Tossed_ResetTargetDB")
AND
ObjectIsItem((ITEMGUID)_Target, 1)
AND
DB_LLWEAPONEX_Throwing_Temp_TossedItem(_Source, _Target)
THEN
NOT DB_LLWEAPONEX_Throwing_Temp_TossedItem(_Source, _Target);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LLWEAPONEX_00_PostCC"
